<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>4. 큐(Queue)</title>
    <url>/2020/03/21/4-queue/</url>
    <content><![CDATA[<h1 id="큐-Queue"><a href="#큐-Queue" class="headerlink" title="큐(Queue)"></a>큐(Queue)</h1><h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>한쪽 끝에서 자료를 넣으면 다른 한쪽 끝에서 자료를 뺄 수 있는구조로 쉽게 말해서 먼저들어온 데이터가 먼저 나오는 구조라고해서 FIFO(First In First Out)라고 부른다.</p>
<img src="/2020/03/21/4-queue/queue1.png" class="" title="&lt;그림1. 큐&gt;">
<h2 id="큐의-연산"><a href="#큐의-연산" class="headerlink" title="큐의 연산"></a>큐의 연산</h2><ul>
<li>enqueue : 데이터를 큐에 삽입</li>
<li>dequeue : 제일 첫 번째 들어온 데이터를 제거</li>
<li>큐의 전단은 front, 후단은 rear로 이루어짐</li>
<li>새로운 데이터가 들어오면 rear가 하나씩 증가</li>
<li>데이터를 빼내면 front가 다음 queue에 저장되어 있는 데이터를 가리킴</li>
</ul>
<h3 id="enqueue"><a href="#enqueue" class="headerlink" title="enqueue"></a>enqueue</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Object[] queue, <span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">  queue[rear++] = data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue"></a>dequeue</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Object <span class="title">dequeue</span><span class="params">(Object[] queue)</span> </span>&#123;</span><br><span class="line">  queue[front++] = data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="배열에서-단순-큐의-문제점"><a href="#배열에서-단순-큐의-문제점" class="headerlink" title="배열에서 단순 큐의 문제점"></a>배열에서 단순 큐의 문제점</h2><ul>
<li>배열에서 큐가 차면 데이터를 빼내야 하고, front 앞의 배열에는 공백이 생긴다(가용용량이 줄어들어버림). 또 다른경우 데이터를 빼낼 때 기존 데이터를 배열의 첫 번 째 위치로 이동해야하는 연산이 생길 수 있다.</li>
<li>이런 문제를 해결하기 위해 Circular Queue 를 활용한다.</li>
</ul>
<h1 id="원형-큐-Circular-Queue"><a href="#원형-큐-Circular-Queue" class="headerlink" title="원형 큐(Circular Queue)"></a>원형 큐(Circular Queue)</h1><ul>
<li>배열의 끝(rear)과 시작(front)부분을 이어 순환시키도록 하는 것.</li>
<li>배열의 rear에 데이터를 삽입하면서 rear의 다음이 front와 만나면 배열이 꽉차게 됨.</li>
</ul>
<img src="/2020/03/21/4-queue/queue2.png" class="" title="&lt;그림2. 원형 큐(Circular Qeueue) &gt;">
<p>CircularQueue.c</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include "CircularQueue.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createQueue</span>(<span class="params">Queue **queue, <span class="keyword">int</span> capacity</span>)</span> &#123;</span><br><span class="line">    (*queue) = (Queue*)malloc(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    (*queue)-&gt;capacity = capacity;</span><br><span class="line">    (*queue)-&gt;front = <span class="number">0</span>;</span><br><span class="line">    (*queue)-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    (*queue)-&gt;nodes = (Node*)malloc(<span class="keyword">sizeof</span>(Node)* (capacity+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span>(<span class="params">Queue *queue, element data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> rear = (queue-&gt;rear) % queue-&gt;capacity;</span><br><span class="line">    queue-&gt;nodes[rear].data = data;</span><br><span class="line">    queue-&gt;rear = rear + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dequeue</span>(<span class="params">Queue *queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> front = (queue-&gt;front) % queue-&gt;capacity;</span><br><span class="line">    queue-&gt;nodes[front].data;</span><br><span class="line">    queue-&gt;front = front+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span>(<span class="params">Queue *queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (queue-&gt;front == queue-&gt;rear) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isFull</span>(<span class="params">Queue *queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (queue-&gt;rear % queue-&gt;capacity == queue-&gt;front) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (queue-&gt;front == (queue-&gt;rear+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CircularQueue.h</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#ifndef CIRCULARQUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CIRCULARQUEUE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">int</span> element;</span><br><span class="line">typedef <span class="keyword">struct</span> _Node &#123;</span><br><span class="line">    element data;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">struct</span> _Queue &#123;</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    Node* nodes;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createQueue</span>(<span class="params">Queue **queue, <span class="keyword">int</span> capacity</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span>(<span class="params">Queue *queue, element data</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dequeue</span>(<span class="params">Queue *queue</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span>(<span class="params">Queue *queue</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isFull</span>(<span class="params">Queue *queue</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> //CIRCULARQUEUE_H</span></span><br></pre></td></tr></table></figure>
<h2 id="ArrayList-Queue-java-version"><a href="#ArrayList-Queue-java-version" class="headerlink" title="ArrayList Queue java version"></a>ArrayList Queue java version</h2><p>Queue.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T t)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ArrayQueue.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Object[] queue;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.capacity = DEFAULT_CAPACITY;</span><br><span class="line">		<span class="keyword">this</span>.front = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.rear = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.length  = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.queue = <span class="keyword">new</span> Object[capacity];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">		<span class="keyword">this</span>.front = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.rear = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.queue = <span class="keyword">new</span> Object[capacity];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"queue is Full..."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> rear = (<span class="keyword">this</span>.rear) % <span class="keyword">this</span>.capacity;</span><br><span class="line">		queue[rear] = data;</span><br><span class="line">		<span class="keyword">this</span>.rear = rear+ <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">this</span>.length++;</span><br><span class="line">		System.out.println(<span class="string">"enqueue : rear : "</span>+  rear +<span class="string">" front : "</span>+ front);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"queue is empty..."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> front = ((<span class="keyword">this</span>.front) % <span class="keyword">this</span>.capacity);</span><br><span class="line">		Object data = queue[front];</span><br><span class="line">		queue[front] = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">this</span>.front  = front + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">this</span>.length--;</span><br><span class="line">		System.out.println(<span class="string">"dequeue : rear : "</span>+  rear +<span class="string">" front : "</span>+ front);</span><br><span class="line">		<span class="keyword">return</span> (T)data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (length == capacity) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ( length == <span class="number">0</span> || front == rear) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[ ]"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;length; i++) &#123;</span><br><span class="line">				sb.append(queue[i]);</span><br><span class="line">				<span class="keyword">if</span> (i != length-<span class="number">1</span>) &#123;</span><br><span class="line">					sb.append(<span class="string">", "</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append(<span class="string">"]"</span>);</span><br><span class="line">			<span class="keyword">return</span> sb.toString();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="연결리스트-큐-LinkedList-Queue"><a href="#연결리스트-큐-LinkedList-Queue" class="headerlink" title="연결리스트 큐 (LinkedList Queue)"></a>연결리스트 큐 (LinkedList Queue)</h1><ul>
<li>연결리스트 큐를 이용하면 용량상태를 확인할 필요가 없으며 용량의 제한이 없어서 가득찬다는 개념이 존재하지 않음</li>
<li>front에서 데이터를 빼낼 때 next Node를 연결 해제 해주면 되므로 삽입 삭제가 편리</li>
</ul>
<p>LinkedQueue.h</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#ifndef LINKQUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINKQUEUE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">int</span> element;</span><br><span class="line">typedef <span class="keyword">struct</span> _Node &#123;</span><br><span class="line">    element data;</span><br><span class="line">    <span class="keyword">struct</span> _Node* next;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">struct</span> _Queue &#123;</span><br><span class="line">    Node* front;</span><br><span class="line">    Node* rear;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">&#125;LinkedQueue;</span><br><span class="line"></span><br><span class="line">Node *createNode(element data);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createQueue</span>(<span class="params">LinkedQueue **queue</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span>(<span class="params">LinkedQueue *queue, Node* newNode</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dequeue</span>(<span class="params">LinkedQueue *queue</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span>(<span class="params">LinkedQueue *queue</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> //LINKQUEUE_H</span></span><br></pre></td></tr></table></figure>
<p>LinkQueue.c</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include "LinkQueue.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createQueue</span>(<span class="params">LinkedQueue **queue</span>)</span> &#123;</span><br><span class="line">    (*queue) = (LinkedQueue*)malloc((<span class="keyword">sizeof</span>(LinkedQueue)));</span><br><span class="line">    (*queue)-&gt;front = NULL;</span><br><span class="line">    (*queue)-&gt;rear = NULL;</span><br><span class="line">    (*queue)-&gt;count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *createNode(element data) &#123;</span><br><span class="line">    Node* newNode = (Node*)malloc(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;next = NULL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span>(<span class="params">LinkedQueue *queue, Node* newNode</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (queue-&gt;front == NULL) &#123;</span><br><span class="line">        queue-&gt;front = newNode;</span><br><span class="line">        queue-&gt;rear = newNode;</span><br><span class="line">        queue-&gt;count++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queue-&gt;rear-&gt;next = newNode;</span><br><span class="line">        queue-&gt;rear = newNode;</span><br><span class="line">        queue-&gt;count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dequeue</span>(<span class="params">LinkedQueue *queue</span>)</span> &#123;</span><br><span class="line">    Node* front = queue-&gt;front;</span><br><span class="line">    <span class="keyword">if</span> (queue-&gt;front-&gt;next == NULL) &#123;</span><br><span class="line">        queue-&gt;front = NULL;</span><br><span class="line">        queue-&gt;rear = NULL;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queue-&gt;front =queue-&gt;front-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    queue-&gt;count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span>(<span class="params">LinkedQueue *queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (queue-&gt;count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Linked-Queue-java-version"><a href="#Linked-Queue-java-version" class="headerlink" title="Linked Queue java version"></a>Linked Queue java version</h2><p>LinkedQueue.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedQueue</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Node front;</span><br><span class="line">	<span class="keyword">private</span> Node rear;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> length;</span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> T data;</span><br><span class="line">		<span class="keyword">private</span> Node next;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.data = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.data =data;</span><br><span class="line">			<span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LinkedQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">		<span class="keyword">if</span> (front == <span class="keyword">null</span>) &#123;</span><br><span class="line">			front = newNode;</span><br><span class="line">			rear = newNode;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			rear.next = newNode;</span><br><span class="line">			rear = newNode;</span><br><span class="line">		&#125;</span><br><span class="line">		length++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"is empty"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Node remove = front;</span><br><span class="line">		front = front.next;</span><br><span class="line">		remove.next = <span class="keyword">null</span>;</span><br><span class="line">		length--;</span><br><span class="line">		<span class="keyword">return</span> remove.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Node temp = front;</span><br><span class="line">		<span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[ ]"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// StringBuilder 클래스를 이용하여 데이터를 출력</span></span><br><span class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">			sb.append(temp.data);</span><br><span class="line">			temp = temp.next;</span><br><span class="line">			<span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sb.append(<span class="string">", "</span>);</span><br><span class="line">				sb.append(temp.data);</span><br><span class="line">				temp = temp.next;</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append(<span class="string">"]"</span>);</span><br><span class="line">			<span class="keyword">return</span> sb.toString();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Queue.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T t)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h1><p><strong><a href="https://github.com/pscheol/ILT/tree/master/algorithm/Queue" target="_blank" rel="noopener">github 이동 (Click)</a></strong></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>queue</tag>
        <tag>큐</tag>
        <tag>dequeue</tag>
      </tags>
  </entry>
  <entry>
    <title>3. 연결리스트(Linked List)</title>
    <url>/2020/03/20/3-linkedlist/</url>
    <content><![CDATA[<h1 id="연결리스트-Linked-List"><a href="#연결리스트-Linked-List" class="headerlink" title="연결리스트(Linked List)"></a>연결리스트(Linked List)</h1><h2 id="개념과-구조"><a href="#개념과-구조" class="headerlink" title="개념과 구조"></a>개념과 구조</h2><ul>
<li><p>데이터가 연속적인 리스트</p>
</li>
<li><p>새로운 노드를 삽입하거나 삭제가 간편</p>
</li>
<li><p>링크라는 개념을 통해 물리 메모리를 연속적으로 사용하지 않아도 된다.</p>
</li>
<li><p>데이터를 구조체로 묶어 포인터로 연결</p>
</li>
</ul>
<p>Linked List에는 기본적으로 Node와 Link라는 용어를 사용</p>
<img src="/2020/03/20/3-linkedlist/linkedlist1.png" class="" title="&lt;그림1 : 연결리스트&gt;">
<blockquote>
<p>HeadNode에는 데이터를 저장하지 않는다. 단지 LinkedList의 시작부분임을 나타낸다.(ex:기관차에서 headNode는 승객이 타지 않음)</p>
</blockquote>
<p>LinkedList의 마지막 부분을 나타내는 노드도 있다. End Node or Tail Node라고 불리며, 데이터를 저장하지 않는다. 즉, Head, Tail(End) 노드는 데이터를 저장하지 않음(저장할 수 없다는 것이 아니라 묵시적으로 데이터를 저장하지 않는다는 것)</p>
<img src="/2020/03/20/3-linkedlist/linkedlist2.png" class="" title="&lt;그림2: HeadNode와 TailNode를 가진 연결리스트&gt;">
<ul>
<li>링크에 화살표가 표시되어 있는 방향은 Head Node 부터 시작해 연결된 다음 노드들을 계속 가리키다보면 D에는 EndNode를 가리키고 EndNode는 아무것도 가리키지 않는 상태가 된다. 이와 같이 자신의 노드에서 다음 노드만 가리킬 수 있는 형태가 전형적이 LinkedList 의 형태이다.</li>
</ul>
<h2 id="연결리스트의-구조체"><a href="#연결리스트의-구조체" class="headerlink" title="연결리스트의 구조체"></a>연결리스트의 구조체</h2><p><strong>c</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _Node &#123;</span><br><span class="line">    char data; &#x2F;&#x2F;데이터</span><br><span class="line">    struct _Node *next; &#x2F;&#x2F;다음노드 꼬리 Link</span><br><span class="line">&#125; Node;</span><br></pre></td></tr></table></figure>
<p><strong>java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Object data;</span><br><span class="line">  <span class="keyword">private</span> Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="연결리스트의-장-단점"><a href="#연결리스트의-장-단점" class="headerlink" title="연결리스트의 장 단점"></a>연결리스트의 장 단점</h2><p><strong>장점</strong></p>
<ul>
<li>새로운 노드의 추가, 삽입, 삭제가 쉽고 빠름, 배열은 삽입 삭제가 어렵 - 현재 노드의 다음 노드를 얻어오는 연산에 대해 비용이 발생하지 않음</li>
</ul>
<p><strong>단점</strong></p>
<ul>
<li>다음 노드를 가리키려는 포인터 때문에 각 노드마다 4byte의 메모리가 추가로 필요</li>
<li>특정 위치에 있는 노드(중간삽입)를 얻는데 비용이 크며 속도가 느림</li>
<li>노드의 개수가 n개면 최악의 경우 n개의 노드 탐색 루프를 실행해야 특정 위치에 있는 노드를 찾을 수 있는 반면 배열은 상수 시간에 노드를 얻을 수 있음</li>
</ul>
<h2 id="연결리스트의-삽입과-삭제"><a href="#연결리스트의-삽입과-삭제" class="headerlink" title="연결리스트의 삽입과 삭제"></a>연결리스트의 삽입과 삭제</h2><p>Q. 배열을 사용하지 않고 LinkedList를 사용하는 이유</p>
<ul>
<li><p>배열은 생성할 때 데이터를 저장하는데 필요한 모든 메모리를 한번에 확보해 사용할 수 있게 해주므로 프로그램이 실행되는 중간에 배열의 크기를 바꿀 수 없다.</p>
</li>
<li><p>배얼 안에 저장되어 있는 값들을 정렬할 때에도 메모리에 저장되어 있는 각각의 값을 바꿔줘야한다.</p>
</li>
<li><p>배열은 연속적인 메모리를 사용하지만 연결리스트는 반드시 연속적이라고 불 수 없다</p>
</li>
<li><p>연결리스트는 연속적이지 않은 데이터들을 링크로 서로 연결시키는 개념으로 볼 수 있다.</p>
</li>
</ul>
<h3 id="배열에서의-삽입"><a href="#배열에서의-삽입" class="headerlink" title="배열에서의 삽입"></a>배열에서의 삽입</h3><p>배열에서 B와 D 사이에 C 데이터 추가하려면 배열의 끝에서부터 한 칸씩 뒤로 이동해야 한다 즉 E와 D가 한칸씩 이동하고 B 와 D 사이에 C가 들어간다.</p>
<img src="/2020/03/20/3-linkedlist/linkedlist3.png" class="" title="&lt;그림3. B와 D 사이에 C 데이터 추가 과정&gt;">
<p><strong>배열 데이터 삽입(C언어)</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertArray</span><span class="params">(<span class="keyword">char</span>* <span class="built_in">array</span>, <span class="keyword">char</span> data,<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, cur;</span><br><span class="line">    <span class="keyword">char</span> tmp, tmp2;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>[i] &gt; data) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = <span class="built_in">array</span>[i];</span><br><span class="line">    <span class="built_in">array</span>[i] = data;</span><br><span class="line">    i++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i&lt;length; i++) &#123;</span><br><span class="line">        tmp2 = <span class="built_in">array</span>[i];</span><br><span class="line">        <span class="built_in">array</span>[i] = tmp;</span><br><span class="line">        tmp = tmp2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="연결리스트의-삽입"><a href="#연결리스트의-삽입" class="headerlink" title="연결리스트의 삽입"></a>연결리스트의 삽입</h3><p>ㅁㅁ -&gt; A -&gt; B - <strong>C</strong> - D -&gt; E -&gt; ㅁㅁ<br>(B와 D 사이에 새로운 노드 C 삽입)</p>
<p>B와 D 노드에 새로 삽입되는 노드 C가 있다면 C가 노드 D를 가리키도록 하고 원래 노드 D를 가리키던 B노드는 C 노드를 가리키도록 해야한다.</p>
<p><strong>연결리스트 삽입(C언어)</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(Node *newNode)</span> </span>&#123;</span><br><span class="line">  Node *idxNode;</span><br><span class="line">  <span class="keyword">for</span> (idxNode = head; idxNode != end; idxNodx = idxNode-&gt;Next) &#123;</span><br><span class="line">    <span class="keyword">if</span> (idxNode-&gt;next-&gt;data &gt; newNode-&gt;data) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  newNode-&gt;next = idxNode-&gt;next;</span><br><span class="line">  idxNode-&gt;next = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="연결리스트에서-1개의-노드를-삽입하는-과정"><a href="#연결리스트에서-1개의-노드를-삽입하는-과정" class="headerlink" title="연결리스트에서 1개의 노드를 삽입하는 과정"></a>연결리스트에서 1개의 노드를 삽입하는 과정</h4><ol>
<li>새로운 노드를 생성한다<br><code>Node *noewNode = (Node*)malloc(sizeof(Node));</code></li>
<li><p>새로운 노드가 삽입될 위치를 검색한다.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (idxNode = head; idxNode != <span class="built_in">end</span>; idxNodx = idxNode-&gt;Next) &#123;</span><br><span class="line">  <span class="keyword">if</span> (idxNode-&gt;next-&gt;data &gt; newNode-&gt;data) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>새로운 노드의 Next를 새로운 노드가 삽입될 다음 노드로 연결</p>
<p><code>newNode-&gt;next = idxNode-&gt;next</code></p>
</li>
<li><p>새로운 노드가 삽입될 위치의 이전노드의 Next가 새로운 노드를 가리키도록 한다.</p>
<p><code>idxNode-&gt;next = newNode</code></p>
</li>
</ol>
<h3 id="연결리스트에서-노드-삭제하는-과정"><a href="#연결리스트에서-노드-삭제하는-과정" class="headerlink" title="연결리스트에서 노드 삭제하는 과정"></a>연결리스트에서 노드 삭제하는 과정</h3><ol>
<li><p>이전 노드를 가리킬 포인터와 삭제할 노드를 가리킬 포인터를 선언</p>
<p><code>Node idxNode</code><br><code>Node removeNode</code></p>
</li>
<li><p>삭제할 노드 검색</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(idxNode = head; idxNode != end; idxNode = idxNode-&gt;next) &#123;</span><br><span class="line">  <span class="keyword">if</span> (idxNode-&gt;next-&gt;data == removeNode-&gt;data) &#123;</span><br><span class="line">    removeNode = idxNode-&gt;next;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>이전 노드가 삭제할 노드를 건너뛰고 다음 노드를 가리키도록 새로 설정</p>
<p><code>idxNode-&gt;next = idexNode-&gt;next-&gt;next</code></p>
</li>
<li><p>free() 함수로 노드를 메모리에서 삭제</p>
<p><code>free(removeNode)</code></p>
</li>
</ol>
<h2 id="연결리스트-c-version"><a href="#연결리스트-c-version" class="headerlink" title="연결리스트 c version"></a>연결리스트 c version</h2><p>LinkedList.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LINKEDLIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINKEDLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">createNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Node** head, Node* newNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addAfter</span><span class="params">(Node* cur, Node* newNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHead</span><span class="params">(Node** head, Node* newHead)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeNode</span><span class="params">(Node** head, Node* remove)</span></span>;</span><br><span class="line"><span class="function">Node* <span class="title">getNode</span><span class="params">(Node* head, <span class="keyword">int</span> idx)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryNode</span><span class="params">(Node *node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    Node* cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cur= cur-&gt;next;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>LinkedList.c</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LinkedList.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">createNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    Node *newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newNode-&gt;data =data;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryNode</span><span class="params">(Node *node)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Node** head, Node* newNode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((*head) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node* tail = (*head);</span><br><span class="line">        <span class="keyword">while</span>(tail-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail-&gt;next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addAfter</span><span class="params">(Node* cur, Node* newNode)</span> </span>&#123;</span><br><span class="line">    newNode-&gt;next = cur-&gt;next;</span><br><span class="line">    cur-&gt;next = newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHead</span><span class="params">(Node** head, Node* newHead)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (*head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        (*head) = newHead;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newHead-&gt;next = (*head);</span><br><span class="line">        (*head) = newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeNode</span><span class="params">(Node** head, Node* remove)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (*head == remove) &#123;</span><br><span class="line">        *head = remove-&gt;next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node* cur = *head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">NULL</span> &amp;&amp; cur-&gt;next != remove) &#123;</span><br><span class="line">            cur= cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            cur-&gt;next = remove-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    destoryNode(remove);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node* <span class="title">getNode</span><span class="params">(Node* head, <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">    Node* cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cur= cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="연결리스트-java-version"><a href="#연결리스트-java-version" class="headerlink" title="연결리스트 java version"></a>연결리스트 java version</h2><p>List.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// 임의의 위치에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data, <span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 첫번째에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addFirst</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 마지막에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 끝에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 인덱스 값을 통해 임의 위치 값 줄력</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 리스트의 크기 값</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 마지막 리스트 의 값 출력</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 첫번째 리스트의 값 출력</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 임의 위치에 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 첫번째 위치 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 마지막 위치 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 마지막 위치 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LinkedList.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Node header;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		header = <span class="keyword">new</span> Node();</span><br><span class="line">		length = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> T data;</span><br><span class="line">		<span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">		Node() &#123;</span><br><span class="line">			data = <span class="keyword">null</span>;</span><br><span class="line">			next = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Node(<span class="keyword">final</span> T data) &#123;</span><br><span class="line">			<span class="keyword">this</span>.data = data;</span><br><span class="line">			<span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; (length == <span class="number">0</span> || index &lt;= <span class="number">0</span> || index &gt; length)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		Node cur = header;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++) &#123;</span><br><span class="line">			cur = cur.next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cur;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">				addFirst(data);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Node prev = getNode(index - <span class="number">1</span>);</span><br><span class="line">			Node next = getNode(index);</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">			newNode.next = next;</span><br><span class="line">			prev.next = newNode;</span><br><span class="line">			length++;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addFirst</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">			<span class="keyword">if</span> (header.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">				header.next = newNode;</span><br><span class="line">				length++;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				newNode.next = header.next;</span><br><span class="line">				header.next = newNode;</span><br><span class="line">				length++;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">				addFirst(data);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			Node next = getNode(length - <span class="number">1</span>);</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">			next.next = newNode;</span><br><span class="line">			length++;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		addLast(data);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		Node cur = header;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">			cur = cur.next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cur.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.length;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> get(length);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> get(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (length &lt; index) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (length &lt;= <span class="number">0</span> || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> removeFirst();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				Node prev = getNode(index - <span class="number">1</span>);</span><br><span class="line">				Node remove = getNode(index);</span><br><span class="line">				<span class="keyword">if</span> (remove.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">					prev.next = <span class="keyword">null</span>;</span><br><span class="line">					length--;</span><br><span class="line">					<span class="keyword">return</span> remove.data;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					prev.next = remove.next;</span><br><span class="line">					length--;</span><br><span class="line">					<span class="keyword">return</span> remove.data;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length ==<span class="number">0</span> ) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Node remove = header.next;</span><br><span class="line">		header.next = remove.next;</span><br><span class="line">		length--;</span><br><span class="line">		<span class="keyword">return</span> remove.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> remove(length - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> removeLast();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Node temp = header.next;</span><br><span class="line">		<span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[ ]"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// StringBuilder 클래스를 이용하여 데이터를 출력</span></span><br><span class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">			sb.append(temp.data);</span><br><span class="line">			temp = temp.next;</span><br><span class="line">			<span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sb.append(<span class="string">", "</span>);</span><br><span class="line">				sb.append(temp.data);</span><br><span class="line">				temp = temp.next;</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append(<span class="string">"]"</span>);</span><br><span class="line">			<span class="keyword">return</span> sb.toString();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Circular-Linked-List-원형-연결-리스트"><a href="#Circular-Linked-List-원형-연결-리스트" class="headerlink" title="Circular Linked List(원형 연결 리스트)"></a>Circular Linked List(원형 연결 리스트)</h1><ul>
<li><p>head와 tail로 연결되어 있는 연결 리스트</p>
</li>
<li><p>tail의 다음 노드 포인터가 헤드를 가리킴</p>
<ul>
<li>장점으로는 시작과 끝을 알 수 있다.</li>
</ul>
</li>
</ul>
<p><strong>노드추가</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> *<span class="title">prev</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Node** head, Node* newNode)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((*head) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    *head = newNode;</span><br><span class="line">    (*head)-&gt;next = *head;</span><br><span class="line">    (*head)-&gt;prev = *head;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">     Node* tail = (*head)-&gt;prev;</span><br><span class="line">     tail-&gt;next-&gt;prev = newNode;</span><br><span class="line">     tail-&gt;next = newNode;</span><br><span class="line">     newNode-&gt;nextNode = (*head)</span><br><span class="line">     newNode-&gt;prevNode = tail;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>노드 삭제</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node** head, Node* remove)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((*head)-&gt;next == remove) &#123;</span><br><span class="line">    (*head)-&gt;prev-&gt;next = remove-&gt;next;</span><br><span class="line">    (*head)-&gt;next-&gt;prev = remove-&gt;prev;</span><br><span class="line">    *head = remove-&gt;nextNode;</span><br><span class="line"></span><br><span class="line">    remove-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    remove-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    Node* tmp = remove;</span><br><span class="line">    remove-&gt;prev-&gt;next = temp-&gt;next;</span><br><span class="line">    remove-&gt;next-&gt;prev = temp-&gt;prev;</span><br><span class="line"></span><br><span class="line">    remove-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    remove-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Circular-Linked-List-for-Java"><a href="#Circular-Linked-List-for-Java" class="headerlink" title="Circular Linked List for Java"></a>Circular Linked List for Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircularLinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Node header;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> T data;</span><br><span class="line">		<span class="keyword">private</span> Node prev;</span><br><span class="line">		<span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.data = data;</span><br><span class="line">			<span class="keyword">this</span>.prev = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.data = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">this</span>.prev = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CircularLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		header = <span class="keyword">new</span> Node();</span><br><span class="line">		header.prev = header;</span><br><span class="line">		header.next = header;</span><br><span class="line">		<span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> addFirst(data);</span><br><span class="line"></span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == length - <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> addLast(data);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				Node prev = getNode(index - <span class="number">1</span>);</span><br><span class="line">				Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">				newNode.next = prev.next;</span><br><span class="line">				newNode.prev = prev;</span><br><span class="line">				prev.next.prev = newNode;</span><br><span class="line">				prev.next = newNode;</span><br><span class="line">				length++;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addFirst</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">			Node nextNode = header.next;</span><br><span class="line">			newNode.next = nextNode;</span><br><span class="line">			newNode.prev = header;</span><br><span class="line">			nextNode.prev = newNode;</span><br><span class="line">			header.next = newNode;</span><br><span class="line">			length++;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">			Node tailNode = header.prev;</span><br><span class="line">			tailNode.next = newNode;</span><br><span class="line">			newNode.prev = tailNode;</span><br><span class="line">			newNode.next = header;</span><br><span class="line">			header.prev = newNode;</span><br><span class="line">			length++;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> addLast(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		T data = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">			data = getFirst();</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == length - <span class="number">1</span>) &#123;</span><br><span class="line">			data = getLast();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Node cur = header;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">				cur = cur.next;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.length;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> header.prev.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> header.next.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (length &lt; index) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (length &lt;= <span class="number">0</span> || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">		  <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> removeFirst();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == length - <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> removeLast();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				Node remove = getNode(index);</span><br><span class="line">				Node prev = remove.prev;</span><br><span class="line">				prev.next = remove.next;</span><br><span class="line">				remove.next.prev = prev;</span><br><span class="line">				remove.next = <span class="keyword">null</span>;</span><br><span class="line">				remove.prev = <span class="keyword">null</span>;</span><br><span class="line">				length--;</span><br><span class="line">				<span class="keyword">return</span> remove.data;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Node remove = header.next;</span><br><span class="line">		<span class="keyword">if</span> (remove.next == header) &#123;</span><br><span class="line">			header.next = header;</span><br><span class="line">			header.prev = header;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			header.next = remove.next;</span><br><span class="line">			remove.next.prev = header;</span><br><span class="line">		&#125;</span><br><span class="line">		remove.next = <span class="keyword">null</span>;</span><br><span class="line">		remove.next = <span class="keyword">null</span>;</span><br><span class="line">		length--;</span><br><span class="line">		<span class="keyword">return</span> remove.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		Node remove = header.prev;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (remove.prev == header) &#123;</span><br><span class="line">			header.next = header;</span><br><span class="line">			header.prev = header;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			remove.prev.next = header;</span><br><span class="line">			header.prev = remove.prev;</span><br><span class="line">		&#125;</span><br><span class="line">		remove.next = <span class="keyword">null</span>;</span><br><span class="line">		remove.prev = <span class="keyword">null</span>;</span><br><span class="line">		length--;</span><br><span class="line">		<span class="keyword">return</span> remove.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> removeLast();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Node temp = header.next;</span><br><span class="line">		<span class="keyword">if</span> (temp == header) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[ ]"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">			sb.append(temp.data);</span><br><span class="line">			temp = temp.next;</span><br><span class="line">			<span class="keyword">while</span> (temp != header) &#123;</span><br><span class="line">				sb.append(<span class="string">", "</span>);</span><br><span class="line">				sb.append(temp.data);</span><br><span class="line">				temp = temp.next;</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append(<span class="string">"]"</span>);</span><br><span class="line">			<span class="keyword">return</span> sb.toString();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; (length == <span class="number">0</span> || index &lt;= <span class="number">0</span> || index &gt; length)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		Node cur = header;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++) &#123;</span><br><span class="line">			cur = cur.next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cur;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Double-Linked-List-더블-연결-리스트"><a href="#Double-Linked-List-더블-연결-리스트" class="headerlink" title="Double Linked List(더블 연결 리스트)"></a>Double Linked List(더블 연결 리스트)</h1><h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><ul>
<li>Double Linked List는 연결리스트의 탐색 기능을 개선한 자료구조이다.</li>
<li>연결리스트는 노드를 찾으려면 head에서 tail 방향으로만 탐색할 수 있지만 Double Linked List는 양방향 탐색이가능하다.</li>
</ul>
<img src="/2020/03/20/3-linkedlist/linkedlist4.png" class="" title="&lt;그림4. 더블 연결 리스트&gt;">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> data;             <span class="comment">//데이터 필드</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span>* <span class="title">prev</span>;</span>   <span class="comment">//이전 노드를 가리키는 포인터</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span>* <span class="title">next</span>;</span>   <span class="comment">//다음 노드를 가리키는 포인텅</span></span><br><span class="line">&#125;Node;</span><br></pre></td></tr></table></figure>
<h2 id="생성-삽입-삭제"><a href="#생성-삽입-삭제" class="headerlink" title="생성/삽입/삭제"></a>생성/삽입/삭제</h2><h3 id="노드생성"><a href="#노드생성" class="headerlink" title="노드생성"></a>노드생성</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">createNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    Node* newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="노드-삽입-순서대로"><a href="#노드-삽입-순서대로" class="headerlink" title="노드 삽입(순서대로)"></a>노드 삽입(순서대로)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Node** head, Node* newNode)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((*head) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    (*head)-&gt;next = newNode;</span><br><span class="line">    newNode-&gt;prev = (*head);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Node* tail = (*head);</span><br><span class="line">    <span class="keyword">while</span>( tail-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        tail = tail -&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    tail-&gt;next = newNode;</span><br><span class="line">    newNode-&gt;prev = tail;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="노드-중간-삽입"><a href="#노드-중간-삽입" class="headerlink" title="노드 중간 삽입"></a>노드 중간 삽입</h3><ol>
<li>newNode-&gt;next는 nextNode를 연결</li>
<li>newNode-&gt;prev는 prevNode를 연결</li>
<li>nextNode-&gt;prev는 newNode를 연결</li>
<li>prevNode-&gt;next는 newNode를 연결</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addAfter</span><span class="params">(Node* cur, Node* newNode)</span> </span>&#123;</span><br><span class="line">  newNode-&gt;next = cur-&gt;next;</span><br><span class="line">  newNode-&gt;prev = cur;</span><br><span class="line">  <span class="keyword">if</span> (cur-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    cur-&gt;next-&gt;prev = newNode;</span><br><span class="line">  &#125;</span><br><span class="line">  cur-&gt;next = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="노드-삭제"><a href="#노드-삭제" class="headerlink" title="노드 삭제"></a>노드 삭제</h3><ol>
<li>prevNode-&gt;next에 nextNode를 연결</li>
<li>nextNode-&gt;prev에 prevNode를 연결</li>
<li>removeNode는 메모리 해제</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(Node** head, Node* <span class="built_in">remove</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (*head == <span class="built_in">remove</span>) &#123;</span><br><span class="line">    *head = <span class="built_in">remove</span>-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> ((*head) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        (*head)-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">remove</span>-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">remove</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Node* tmp = <span class="built_in">remove</span>;</span><br><span class="line">    <span class="built_in">remove</span>-&gt;prev-&gt;next = tmp-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">remove</span>-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="built_in">remove</span>-&gt;next-&gt;prev = temp-&gt;prev;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">remove</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">remove</span>-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(<span class="built_in">remove</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Double-Linked-List-java-version"><a href="#Double-Linked-List-java-version" class="headerlink" title="Double Linked List (java version)"></a>Double Linked List (java version)</h2><p>List.java (interface)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// 임의의 위치에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data, <span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 첫번째에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addFirst</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 마지막에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 끝에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 인덱스 값을 통해 임의 위치 값 줄력</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 리스트의 크기 값</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 마지막 리스트 의 값 출력</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 첫번째 리스트의 값 출력</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 임의 위치에 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 첫번째 위치 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 마지막 위치 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 마지막 위치 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DLinkedList.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DLinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Node header;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		header = <span class="keyword">new</span> Node();</span><br><span class="line">		length = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> T data;</span><br><span class="line">		<span class="keyword">private</span> Node next;</span><br><span class="line">		<span class="keyword">private</span> Node prev;</span><br><span class="line"></span><br><span class="line">		Node() &#123;</span><br><span class="line">			data = <span class="keyword">null</span>;</span><br><span class="line">			next = <span class="keyword">null</span>;</span><br><span class="line">			prev = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Node(<span class="keyword">final</span> T data) &#123;</span><br><span class="line">			<span class="keyword">this</span>.data = data;</span><br><span class="line">			<span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">this</span>.prev = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; (length == <span class="number">0</span> || index &lt;= <span class="number">0</span> || index &gt; length)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		Node cur = header;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++) &#123;</span><br><span class="line">			cur = cur.next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cur;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">				addFirst(data);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Node prev = getNode(index - <span class="number">1</span>);</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">			newNode.next = prev.next;</span><br><span class="line">			newNode.prev = prev;</span><br><span class="line">			prev.next.prev = newNode;</span><br><span class="line">			prev.next = newNode;</span><br><span class="line">			length++;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addFirst</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">			<span class="keyword">if</span> (header.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">				header.next = newNode;</span><br><span class="line">				newNode.prev = header;</span><br><span class="line">				length++;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				newNode.next = header.next;</span><br><span class="line">				newNode.prev = header;</span><br><span class="line">				header.next.prev = newNode;</span><br><span class="line">				header.next = newNode;</span><br><span class="line">				length++;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">				addFirst(data);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			Node next = getNode(length - <span class="number">1</span>);</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">			next.next = newNode;</span><br><span class="line">			newNode.prev = next;</span><br><span class="line">			length++;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		addLast(data);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		Node cur = header;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">			cur = cur.next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cur.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.length;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> get(length);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> get(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (length &lt; index) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (length &lt;= <span class="number">0</span> || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> removeFirst();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				Node prev = getNode(index - <span class="number">1</span>);</span><br><span class="line">				Node remove = getNode(index);</span><br><span class="line">				<span class="keyword">if</span> (remove.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">					prev.next = <span class="keyword">null</span>;</span><br><span class="line">					remove.next = <span class="keyword">null</span>;</span><br><span class="line">					remove.prev = <span class="keyword">null</span>;</span><br><span class="line">					length--;</span><br><span class="line">					<span class="keyword">return</span> remove.data;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					prev.next = remove.next;</span><br><span class="line">					remove.next.prev = prev;</span><br><span class="line">					remove.next = <span class="keyword">null</span>;</span><br><span class="line">					remove.prev = <span class="keyword">null</span>;</span><br><span class="line">					length--;</span><br><span class="line">					<span class="keyword">return</span> remove.data;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length ==<span class="number">0</span> ) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Node remove = header.next;</span><br><span class="line">		header.next = remove.next;</span><br><span class="line">		remove.next.prev = header;</span><br><span class="line">		remove.next = <span class="keyword">null</span>;</span><br><span class="line">		remove.next = <span class="keyword">null</span>;</span><br><span class="line">		length--;</span><br><span class="line">		<span class="keyword">return</span> remove.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> remove(length - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> removeLast();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Node temp = header.next;</span><br><span class="line">		<span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[ ]"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// StringBuilder 클래스를 이용하여 데이터를 출력</span></span><br><span class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">			sb.append(temp.data);</span><br><span class="line">			temp = temp.next;</span><br><span class="line">			<span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sb.append(<span class="string">", "</span>);</span><br><span class="line">				sb.append(temp.data);</span><br><span class="line">				temp = temp.next;</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append(<span class="string">"]"</span>);</span><br><span class="line">			<span class="keyword">return</span> sb.toString();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h1><p><strong><a href="https://github.com/pscheol/ILT/tree/master/algorithm/LinkedList" target="_blank" rel="noopener">github 이동 (Click)</a></strong></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>연결리스트</tag>
        <tag>linkedlist</tag>
      </tags>
  </entry>
  <entry>
    <title>2. 스택(Stack)</title>
    <url>/2020/03/19/2-Stack/</url>
    <content><![CDATA[<h1 id="스택-Stack"><a href="#스택-Stack" class="headerlink" title="스택(Stack)"></a>스택(Stack)</h1><ul>
<li>먼저 들어간 데이터가 가장 마지막에 나오는 구조(Last In, First Out : LIFO)</li>
<li>삽입과 삭제가 한쪽 끝에서만 자료를 넣고 뺄 수 있다.</li>
<li>ex) 자동메모리, 네트워크 프로토콜</li>
</ul>
<h2 id="스택-Stack-의-주요-기능"><a href="#스택-Stack-의-주요-기능" class="headerlink" title="스택(Stack)의 주요 기능"></a>스택(Stack)의 주요 기능</h2><p><strong>스택의 초기화</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> stack[<span class="number">100</span>]; <span class="comment">//스택 배열</span></span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>; <span class="comment">// 스태의 크기</span></span><br></pre></td></tr></table></figure></p>
<h3 id="삽입-Push"><a href="#삽입-Push" class="headerlink" title="삽입(Push)"></a>삽입(Push)</h3><ul>
<li>스택 위에 새로운 노드를 쌓는 작업</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">	stack[size] = data;</span><br><span class="line">	size = size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>데이터 80 삽입</p>
<img src="/2020/03/19/2-Stack/stack-push.png" class="" title="&lt;데이터 80 삽입&gt;"> 
<h3 id="삭제-Pop"><a href="#삭제-Pop" class="headerlink" title="삭제(Pop)"></a>삭제(Pop)</h3><ul>
<li>스택에서 최상위 노드를 걷어내는 작업</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (size &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;		</span><br><span class="line">	<span class="keyword">int</span> pop = stack[size];</span><br><span class="line">	size = size - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> pop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>데이터 80 제거  </p>
<img src="/2020/03/19/2-Stack/stack-pop.png" class="" title="&lt;데이터 80 제거&gt;"> 
<h3 id="Peek"><a href="#Peek" class="headerlink" title="Peek"></a>Peek</h3><ul>
<li>Top이 가리키는 위치의 데이터를 가져오는 작업</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> stack[size];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/03/19/2-Stack/stack-push.png" class="" title="&lt; Top이 가리키는 위치의 데이터 70을 가져온다 &gt;"> 
<h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><ul>
<li>스택이 비어있는지 비어있지 않은지 알아보는 작업</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (size == <span class="number">0</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><ul>
<li>스택에 저장되어 있는 자료의 개수를 알아보는 작업</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="배열로-구현하는-스택"><a href="#배열로-구현하는-스택" class="headerlink" title="배열로 구현하는 스택"></a>배열로 구현하는 스택</h2><ul>
<li>동적으로 스택의 용량을 조절하기가 어렵다는 단점이 있다.</li>
<li>구현이 간단하다.</li>
</ul>
<p>Java version</p>
<p>ArrayStack.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> top;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> capacity;</span><br><span class="line">	<span class="keyword">private</span> Object[] stack;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		top = -<span class="number">1</span>;</span><br><span class="line">		capacity = DEFAULT_SIZE;</span><br><span class="line">		stack = <span class="keyword">new</span> Object[capacity];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">		top = -<span class="number">1</span>;</span><br><span class="line">		capacity = DEFAULT_SIZE;</span><br><span class="line">		stack = <span class="keyword">new</span> Object[capacity];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"stack overflow"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		stack[++top] = data;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"data impty"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> (T)stack[top--];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (T)stack[top];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (top == capacity-<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (top == -<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Stack.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T data)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>c language</p>
<p>ArrayList.h</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paik Seung Cheol on 2020. 3. 19..</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#ifndef ARRAYSTACK_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAYSTACK_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">struct</span> _Node &#123;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">struct</span> _Stack &#123;</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    Node* nodes;</span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createStack</span>(<span class="params">Stack** stack, <span class="keyword">int</span> capacity</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isFull</span>(<span class="params">Stack* stack</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span>(<span class="params">Stack* stack</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span>(<span class="params">Stack* stack, <span class="keyword">int</span> data</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">popup</span>(<span class="params">Stack* stack</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">peek</span>(<span class="params">Stack* stack</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> //ARRAYSTACK_H</span></span><br></pre></td></tr></table></figure>
<p>ArrayList.c</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paik Seung Cheol on 2020. 3. 19..</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#include "ArrayStack.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createStack</span>(<span class="params">Stack** stack, <span class="keyword">int</span> capacity</span>)</span> &#123;</span><br><span class="line">    (*stack) = (Stack*)malloc(<span class="keyword">sizeof</span>(Stack));</span><br><span class="line">    (*stack)-&gt;capacity = capacity;</span><br><span class="line">    (*stack)-&gt;top = <span class="number">-1</span>;</span><br><span class="line">    (*stack)-&gt;nodes = (Node*) malloc(<span class="keyword">sizeof</span>(Node)* capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isFull</span>(<span class="params">Stack* stack</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((stack)-&gt;top == (stack)-&gt;capacity<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span>(<span class="params">Stack* stack</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((stack)-&gt;top == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span>(<span class="params">Stack* stack, <span class="keyword">int</span> data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isFull(stack)) &#123;</span><br><span class="line">        printf(<span class="string">"stack overflow\n"</span>);</span><br><span class="line">        exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    stack-&gt;nodes[++stack-&gt;top].data = data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">popup</span>(<span class="params">Stack* stack</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty(stack)) &#123;</span><br><span class="line">        printf(<span class="string">"is empty\n"</span>);</span><br><span class="line">        exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack-&gt;nodes[stack-&gt;top--].data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">peek</span>(<span class="params">Stack* stack</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty(stack)) &#123;</span><br><span class="line">        printf(<span class="string">"is empty\n"</span>);</span><br><span class="line">        exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack-&gt;nodes[stack-&gt;top].data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="연결리스트로-구현하는-스택"><a href="#연결리스트로-구현하는-스택" class="headerlink" title="연결리스트로 구현하는 스택"></a>연결리스트로 구현하는 스택</h2><ul>
<li>스택의 용량에 제한을 두지 않는다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paik Seung Cheol on 2020. 3. 19..</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Node stack;</span><br><span class="line">	<span class="keyword">private</span> Node top;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> T data;</span><br><span class="line">		<span class="keyword">private</span> Node top;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.data = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">this</span>.top = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.data = data;</span><br><span class="line">			<span class="keyword">this</span>.top = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LinkedListStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		stack = <span class="keyword">new</span> Node();</span><br><span class="line">		top = <span class="keyword">new</span> Node();</span><br><span class="line">		length = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">		<span class="keyword">if</span> (stack.top == <span class="keyword">null</span>) &#123;</span><br><span class="line">			stack.top = newNode;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Node oldStack = stack;</span><br><span class="line">			<span class="keyword">do</span> &#123;</span><br><span class="line">				oldStack = oldStack.top;</span><br><span class="line">			&#125; <span class="keyword">while</span> (oldStack.top != <span class="keyword">null</span>);</span><br><span class="line">			oldStack.top = newNode;</span><br><span class="line">		&#125;</span><br><span class="line">		top = newNode;</span><br><span class="line">		length++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Stack is Empty "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Node remove = top;</span><br><span class="line">		<span class="keyword">if</span> (stack.top == top) &#123;</span><br><span class="line">			stack.top = <span class="keyword">null</span>;</span><br><span class="line">			top = <span class="keyword">null</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Node curTop = stack;</span><br><span class="line">			<span class="keyword">do</span> &#123;</span><br><span class="line">				curTop = curTop.top;</span><br><span class="line">			&#125; <span class="keyword">while</span> (curTop.top != top);</span><br><span class="line">			curTop.top = <span class="keyword">null</span>;</span><br><span class="line">			top = curTop;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		length--;</span><br><span class="line">		<span class="keyword">return</span> remove.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"stack is empty"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> top.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (length == <span class="number">0</span> &amp;&amp; stack.top == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Node temp = stack.top;</span><br><span class="line">		<span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[ ]"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// StringBuilder 클래스를 이용하여 데이터를 출력</span></span><br><span class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">			sb.append(temp.data);</span><br><span class="line">			temp = temp.top;</span><br><span class="line">			<span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sb.append(<span class="string">", "</span>);</span><br><span class="line">				sb.append(temp.data);</span><br><span class="line">				temp = temp.top;</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append(<span class="string">"]"</span>);</span><br><span class="line">			<span class="keyword">return</span> sb.toString();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ex) 후위표기 사칙연산 계산</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paik Seung Cheol on 2020. 3. 19..</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> result = postFixCalc(<span class="string">"132**"</span>);</span><br><span class="line">		System.out.println(result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">postFixCalc</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">		Stack&lt;Double&gt; stack = <span class="keyword">new</span> ArrayStack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length(); i++) &#123;</span><br><span class="line">			<span class="keyword">switch</span> (data.charAt(i)) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">				<span class="keyword">double</span> op1 = <span class="keyword">new</span> BigDecimal(stack.pop()).doubleValue();</span><br><span class="line">				<span class="keyword">double</span> op2 = <span class="keyword">new</span> BigDecimal(stack.pop()).doubleValue();</span><br><span class="line">				<span class="keyword">double</span> result = calculate(data.charAt(i), op1, op2);</span><br><span class="line">				stack.push(result);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">int</span> num = Character.digit(data.charAt(i),<span class="number">10</span>);</span><br><span class="line">				stack.push(<span class="keyword">new</span> BigDecimal(num).doubleValue());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">			result = stack.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">char</span> postfixExp, <span class="keyword">double</span> op1, <span class="keyword">double</span> op2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> result =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span> (postfixExp) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">			result = <span class="keyword">new</span> BigDecimal(op1).multiply(<span class="keyword">new</span> BigDecimal(op2)).doubleValue();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">			result = <span class="keyword">new</span> BigDecimal(op1).subtract(<span class="keyword">new</span> BigDecimal(op2)).doubleValue();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">			result = <span class="keyword">new</span> BigDecimal(op1).add(<span class="keyword">new</span> BigDecimal(op2)).doubleValue();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">			result = <span class="keyword">new</span> BigDecimal(op1).divide(<span class="keyword">new</span> BigDecimal(op2)).doubleValue();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span> :</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h1><p><strong><a href="https://github.com/pscheol/ILT/tree/master/algorithm/Stack" target="_blank" rel="noopener">github 이동 (Click)</a></strong></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>stack</tag>
        <tag>스택</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-9012]-괄호(Parentheses)</title>
    <url>/2020/03/18/BaekJoon-9012-Parentheses/</url>
    <content><![CDATA[<h1 id="BaekJoon-9012-괄호"><a href="#BaekJoon-9012-괄호" class="headerlink" title="[BaekJoon-9012] 괄호"></a>[BaekJoon-9012] 괄호</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>괄호 문자열(Parenthesis String, PS)은 두 개의 괄호 기호인 ‘(’ 와 ‘)’ 만으로 구성되어 있는 문자열이다. 그 중에서 괄호의 모양이 바르게 구성된 문자열을 올바른 괄호 문자열(Valid PS, VPS)이라고 부른다. 한 쌍의 괄호 기호로 된 “( )” 문자열은 기본 VPS 이라고 부른다. 만일 x 가 VPS 라면 이것을 하나의 괄호에 넣은 새로운 문자열 “(x)”도 VPS 가 된다. 그리고 두 VPS x 와 y를 접합(concatenation)시킨 새로운 문자열 xy도 VPS 가 된다. 예를 들어 “(())()”와 “((()))” 는 VPS 이지만 “(()(”, “(())()))” , 그리고 “(()” 는 모두 VPS 가 아닌 문자열이다. </p>
<p>여러분은 입력으로 주어진 괄호 문자열이 VPS 인지 아닌지를 판단해서 그 결과를 YES 와 NO 로 나타내어야 한다. </p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>입력 데이터는 표준 입력을 사용한다. 입력은 T개의 테스트 데이터로 주어진다. 입력의 첫 번째 줄에는 입력 데이터의 수를 나타내는 정수 T가 주어진다. 각 테스트 데이터의 첫째 줄에는 괄호 문자열이 한 줄에 주어진다. 하나의 괄호 문자열의 길이는 2 이상 50 이하이다. </p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>출력은 표준 출력을 사용한다. 만일 입력 괄호 문자열이 올바른 괄호 문자열(VPS)이면 “YES”, 아니면 “NO”를 한 줄에 하나씩 차례대로 출력해야 한다. </p>
<h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6  </span><br><span class="line">(())())  </span><br><span class="line">(((()())()  </span><br><span class="line">(()())((()))  </span><br><span class="line">((()()(()))(((())))()  </span><br><span class="line">()()()()(()()())()  </span><br><span class="line">(()((())()(</span><br></pre></td></tr></table></figure>
<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>
<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3  </span><br><span class="line">(  </span><br><span class="line">)  </span><br><span class="line">())(()</span><br></pre></td></tr></table></figure>
<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NO  </span><br><span class="line">NO  </span><br><span class="line">NO</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>스택을 이용하여 문제를 풀수 있으며, ‘(‘를 만나면 stack에 push를 하고 ‘)’일 경우 pop을 하여 처리하였다. 만약 ‘)’일 경우 stack에 ‘(‘가 없다면 NO를 출력하고, 문자열을 다 검색 후 스택에 ‘(‘가 남아 있다면 NO를 처리했다.</p>
<h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        parenthesis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parenthesis</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> t = parseInt(in.readLine());</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">0</span> &lt; t--) &#123;</span><br><span class="line">            Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            String ps = in.readLine();</span><br><span class="line">            String result = <span class="string">"YES"</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;ps.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch = ps.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'('</span>) &#123;</span><br><span class="line">                    stack.push(ch);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stack.empty()) &#123;</span><br><span class="line">                    result = <span class="string">"NO"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result.equals(<span class="string">"YES"</span>) &amp;&amp; !stack.empty()) &#123;</span><br><span class="line">                result = <span class="string">"NO"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(result);</span><br><span class="line">            out.write(<span class="string">'\n'</span>);</span><br><span class="line">            out.flush();;</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/9012" target="_blank" rel="noopener">https://www.acmicpc.net/problem/9012</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>stack</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-9093] 단어 뒤집기</title>
    <url>/2020/03/18/BaekJoon-9093-Flip-Word/</url>
    <content><![CDATA[<h1 id="BaekJoon-9093-단어-뒤집기"><a href="#BaekJoon-9093-단어-뒤집기" class="headerlink" title="[BaekJoon-9093] 단어 뒤집기"></a>[BaekJoon-9093] 단어 뒤집기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>문장이 주어졌을 때, 단어를 모두 뒤집어서 출력하는 프로그램을 작성하시오. 단, 단어의 순서는 바꿀 수 없다. 단어는 영어 알파벳으로만 이루어져 있다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있으며, 문장이 하나 주어진다. 단어의 길이는 최대 20, 문장의 길이는 최대 1000이다. 단어와 단어 사이에는 공백이 하나 있다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>각 테스트 케이스에 대해서, 입력으로 주어진 문장의 단어를 모두 뒤집어 출력한다.</p>
<h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><p>2<br>I am happy today<br>We want to win the first prize  </p>
<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><p>I ma yppah yadot<br>eW tnaw ot niw eht tsrif ezirp  </p>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>스택을 이용하면 N개의 문자를 스택에 넣었다 빼면 역순으로 출력할 수 있다.</p>
<ol>
<li>스택에 알파벳을 넣는다.</li>
<li>공백이나 문자열의 끝이면 스택에서 모두 빼낸다.</li>
<li>역순으로 만들도록 출력</li>
</ol>
<h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        flipWord();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">flipWord</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> t = parseInt(in.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">0</span> &lt; t--) &#123;</span><br><span class="line">            Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            String word = in.readLine() + <span class="string">"\n"</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i  = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch = word.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (ch != <span class="string">' '</span> &amp;&amp; ch != <span class="string">'\n'</span>) &#123;</span><br><span class="line">                    stack.push(ch);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">                    out.write(stack.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();;</span><br><span class="line">        in.close();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>stack</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BackJoon-10828] 스택</title>
    <url>/2020/03/18/BackJoon-10828-stack/</url>
    <content><![CDATA[<h1 id="BackJoon-10828-스택"><a href="#BackJoon-10828-스택" class="headerlink" title="[BackJoon-10828] 스택"></a>[BackJoon-10828] 스택</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.</p>
<p>명령은 총 다섯 가지이다.</p>
<ul>
<li>push X: 정수 X를 스택에 넣는 연산이다.</li>
<li>pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.</li>
<li>size: 스택에 들어있는 정수의 개수를 출력한다.</li>
<li>empty: 스택이 비어있으면 1, 아니면 0을 출력한다.</li>
<li>top: 스택의 가장 위에 있는 정수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.</li>
</ul>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 문제에 나와있지 않은 명령이 주어지는 경우는 없다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.</p>
<h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">14  </span><br><span class="line">push 1  </span><br><span class="line">push 2  </span><br><span class="line">top  </span><br><span class="line">size  </span><br><span class="line">empty  </span><br><span class="line">pop  </span><br><span class="line">pop  </span><br><span class="line">pop  </span><br><span class="line">size  </span><br><span class="line">empty  </span><br><span class="line">pop  </span><br><span class="line">push 3  </span><br><span class="line">empty  </span><br><span class="line">top</span><br></pre></td></tr></table></figure>
<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">-1</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">-1</span><br><span class="line">0</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">pop</span><br><span class="line">top</span><br><span class="line">push 123</span><br><span class="line">top</span><br><span class="line">pop</span><br><span class="line">top</span><br><span class="line">pop</span><br></pre></td></tr></table></figure>
<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1</span><br><span class="line">-1</span><br><span class="line">123</span><br><span class="line">123</span><br><span class="line">-1</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>
<h2 id="코드"><a href="#코드" class="headerlink" title="[코드]"></a>[코드]</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        stack();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stack</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        <span class="keyword">int</span> n = parseInt(in.readLine());</span><br><span class="line">        String stack[] = <span class="keyword">new</span> String[n];</span><br><span class="line">        <span class="keyword">int</span> size = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            String input = in.readLine();</span><br><span class="line">            <span class="keyword">if</span> (input.contains(<span class="string">"push"</span>)) &#123;</span><br><span class="line">                stack[++size] = input.split(<span class="string">" "</span>)[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"pop"</span>)) &#123;</span><br><span class="line">                out.write(size == -<span class="number">1</span> ? size + <span class="string">"\n"</span> : stack[size--] + <span class="string">"\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"size"</span>)) &#123;</span><br><span class="line">                out.write((size + <span class="number">1</span>) + <span class="string">"\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"empty"</span>)) &#123;</span><br><span class="line">                out.write((size == -<span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>) + <span class="string">"\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"top"</span>)) &#123;</span><br><span class="line">                out.write((size == -<span class="number">1</span> ? size : stack[size]) + <span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>문제 사이트</strong> : <a href="https://www.acmicpc.net/problem/10828" target="_blank" rel="noopener">https://www.acmicpc.net/problem/10828</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>stack</tag>
        <tag>스택</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>1. 알고리즘 개요(Algorithm Overview)</title>
    <url>/2020/03/17/1-algorithm-overview/</url>
    <content><![CDATA[<h1 id="알고리즘-Algorithm"><a href="#알고리즘-Algorithm" class="headerlink" title="알고리즘(Algorithm)"></a>알고리즘(Algorithm)</h1><p>알고리즘은 수학, 컴퓨터과학, 언어학 또는 관련분야에서 <strong>어떠한 문제를 해결하기 위해 정해진 일련의 절차나 방법을 공식화한 형태로 표현한 것</strong>을 말한다.</p>
<ul>
<li>계산 또는 작업을 처리하기 위한 순서</li>
<li>요리의 레시피(요리의 재료를 이용하여 레시피 대로 요리한 다음 요리를 완성)</li>
<li>특정문제를 컴퓨터로 해결하기 위한 순서</li>
<li>어떤 문제를 해결하는 방법을 모두 알고리즘이라 한다.</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">입력</td>
<td>0개 이상의 입력이 존재햐아한다</td>
</tr>
<tr>
<td style="text-align:center">출력</td>
<td>1개 이상의 출력이 존재해야한다</td>
</tr>
<tr>
<td style="text-align:center">명백성</td>
<td>각 명령어의 의미는 모호하지 않고 명확해야한다</td>
</tr>
<tr>
<td style="text-align:center">유한성</td>
<td>한정된 수의 단계 후에는 반드시 종료되어야한다</td>
</tr>
<tr>
<td style="text-align:center">유효성</td>
<td>각 명령어들은 실행 가능한 연산이어야 한다</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p><strong>코딩 테스트나 인터뷰에서 알고리즘을 보는 이유는 문제를 모델링하고 해결하는 능력을 알아보기 위해서이다.</strong></p>
</blockquote>
<h2 id="알고리즘의-효율성-Efficiency"><a href="#알고리즘의-효율성-Efficiency" class="headerlink" title="알고리즘의 효율성(Efficiency)"></a>알고리즘의 효율성(Efficiency)</h2><p>알고리즘 문제를 해결하는 어떤 코드를 작성했을 때, 이 프로그램의 효율성을 알고싶을 때</p>
<ul>
<li><strong>수행시간</strong></li>
<li>사용한 메모리</li>
<li>코드의 길이</li>
</ul>
<p>중 <strong>수행시간</strong>이 중요하다.</p>
<p>예를들어 어떤 프로그램을 작성했는데, 시간이 10일 걸리면 10일동안 실행해야하고, 메모리가 64GB가 필요할 경우 메모리가 부족하면 램을 구매하면 된다.<br>이런 문제를 해결할 때는 <strong>시간</strong>이 중요.</p>
<h2 id="문제의-크기-Scale-Of-Problem"><a href="#문제의-크기-Scale-Of-Problem" class="headerlink" title="문제의 크기(Scale Of Problem)"></a>문제의 크기(Scale Of Problem)</h2><p>개발중 접하게 되는 문제를 해결하는 과정에는 항상 문제의 크기가 발생한다.</p>
<ol>
<li>‘게임 동시 접속자 수’, ‘쇼핑몰 장바구니 물건의 수’ 등 이런 문제의 크기를 보통 <strong>N</strong>이라 하고, <strong>N</strong>에 따라 걸리는 시간이 다르다.</li>
<li>웹 사이트를 만드는 경우 100명이 동시에 접속하는 것과 10만명이 동시에 접속하는 사이트를 만드는 방법은 큰차이가 있으며 접속자가 많을 경우 사이트를 만드는 방법은 더 어렵다. 이럴 때도 문제의 크기에 따라 최적은 방법을 선택해야한다.</li>
</ol>
<blockquote>
<p><strong>문제를 해결할 때는 문제의 크기를 먼저 보고 방법을 생각해야 한다.</strong></p>
</blockquote>
<h2 id="알고리즘의-복잡도-분석-Complexity-Analysis"><a href="#알고리즘의-복잡도-분석-Complexity-Analysis" class="headerlink" title="알고리즘의 복잡도 분석(Complexity Analysis)"></a>알고리즘의 복잡도 분석(Complexity Analysis)</h2><p>알고리즘 복잡도 분석은 직접 구현하지 않고 모든 입력을 고려하는 방법으로 하드웨어나 소프트웨어어 환경과 관계없이 알고리즘의 수행시간 및 효율성을 평가할 수 있다. </p>
<ul>
<li>알고리즘이 수행하는 연산의 횟수를 측정</li>
<li>연산의 횟수는 N함수로 표현된다.</li>
</ul>
<p>알고리즘의 분석 방법에는 기억 공간을 분석하는 <strong>공간 복잡도(Space Complexity)</strong>와 실행 시간을 분석하는 <strong>시간복잡도(Time Complexity)</strong>가 있다.</p>
<h3 id="공간복잡도-Space-Complexity"><a href="#공간복잡도-Space-Complexity" class="headerlink" title="공간복잡도(Space Complexity)"></a>공간복잡도(Space Complexity)</h3><p>알고리즘의 메모리 사용량에 대한 분석결과로 대략적으로 얼마나 공간을 사용할지 예상할 수 있다.</p>
<h3 id="시간복잡도-Time-Complexity"><a href="#시간복잡도-Time-Complexity" class="headerlink" title="시간복잡도(Time Complexity)"></a>시간복잡도(Time Complexity)</h3><p>알고리즘의 수행시간 분석결과로 시간 복잡도를 이용하면 작성한 코드의 수행 시간이 얼마나 걸릴지 예상할 수 있다.</p>
<p>시간복잡도에서 불필요한 정보를 제거하여 알고리즘 분석을 쉽게할 목적으로 빅-오 표기법(Big-O Notation)을 이용하여 복잡도를 표시한다.</p>
<p><strong>빅오 표기법의 수학적 정의</strong></p>
<blockquote>
<p> 두 개의 함수 $f(n)$ 과 $g(n)$이 주어졌을 때 모든 $n \geqq n_0$ 에 대하여 $|f(n) \leqq c|g(n)|$을 만족하는 2개의 상수 $c$와 $n_0$가 존재하면 $f(n) = O(g(n))$이다 </p>
</blockquote>
<p>즉 입력크기 N에 대하여 얼마나 시간이 걸릴지 나타내고, 최악의 경우 시간이 얼마나 걸리지 알 수 있다.</p>
<p>빅오 표기법은 연산의 횟수가 다항식으로 표현되었을 경우 다항식의 최고차 항만을 남기고 다른 항들과 상수항을 버리는 것이다. 궁극적으로 최고차 항의 계수도 버리고 단지 최고차 항의 차수만을 사용한다.</p>
<ol>
<li>상수는 버린다. <ul>
<li>$O(3N^2) = O(N^2)$</li>
<li>$O({1 \over 2} N^2) = O(N^2)$</li>
<li>$O(5) = O(1)$</li>
</ul>
</li>
<li>두 개 이상 항이 있을 때 최고차의 항의 차수만 사용한다.<ul>
<li>$O(N^2 + N) = O(N^2)$</li>
<li>$O(N^2 + N\log N) = O(N^2)$</li>
</ul>
</li>
<li>두 가지 항이 있는데 다른 변수가 있으면 둔다<ul>
<li>$O(N^2 + M)$</li>
</ul>
</li>
</ol>
<p><strong>대표적인 시간복잡도</strong></p>
<ul>
<li>$O(1)$ : 상수</li>
<li>$O(\log N)$ : 로그</li>
<li>$O(N)$ : 선형</li>
<li>$O(N\log N)$ : 선형로그</li>
<li>$O(N^2)$ : 2차</li>
<li>$O(N^3)$ :3차</li>
<li>$O(2^N)$ : 지수</li>
<li>$O(N!)$ : 팩토리얼</li>
</ul>
<p><strong>실행시간 </strong></p>
<p>$O(1) &lt; O(\log N) &lt; O(N) &lt; O(N\log N) &lt; O(N^2) &lt; O(N^3) &lt; O(2^N) &lt; O(N!)$</p>
<p>Ex1) 1부터 N까지의 합</p>
<ul>
<li>i 는 1부터 N번을 수행하므로 시간복잡도 : $O(N)$</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line">for (int i &#x3D; 1; i&lt;&#x3D;N; i++) &#123;</span><br><span class="line">    sum+&#x3D; i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ex2) 1부터 N까지의 합</p>
<ul>
<li>N번을 2번 수행하므로 시간복잡도 : $O(N^2)$</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line">for (int i &#x3D; 1; i&lt;&#x3D;N; i++) &#123;</span><br><span class="line">    for (int j &#x3D; 1; j&lt;&#x3D;N; j++) &#123;</span><br><span class="line">       sum+&#x3D; j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ex3) 1부터 N까지의 합을 계산</p>
<ul>
<li><p>1번의 연산만 수행하므로 시간복잡도 : $O(1)$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line">sum &#x3D; N * (N + 1) &#x2F; 2;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><strong>참조</strong></p>
<ul>
<li>code.Plus : <a href="https://code.plus/course/41" target="_blank" rel="noopener">https://code.plus/course/41</a></li>
<li>C언어로 쉽게 풀어쓴 자료구조</li>
<li>위키피디아 : <a href="https://ko.wikipedia.org/wiki/알고리즘" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/알고리즘</a></li>
</ul>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>big-O</tag>
        <tag>빅오</tag>
        <tag>시간복잡도</tag>
        <tag>time complexity</tag>
      </tags>
  </entry>
</search>
