<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.알고리즘 개요(Algorithm Overview)</title>
    <url>/2020/03/17/1-algorithm-overview/</url>
    <content><![CDATA[<h1 id="알고리즘-Algorithm"><a href="#알고리즘-Algorithm" class="headerlink" title="알고리즘(Algorithm)"></a>알고리즘(Algorithm)</h1><p>알고리즘은 수학, 컴퓨터과학, 언어학 또는 관련분야에서 <strong>어떠한 문제를 해결하기 위해 정해진 일련의 절차나 방법을 공식화한 형태로 표현한 것</strong>을 말한다.</p>
<ul>
<li>계산 또는 작업을 처리하기 위한 순서</li>
<li>요리의 레시피(요리의 재료를 이용하여 레시피 대로 요리한 다음 요리를 완성)</li>
<li>특정문제를 컴퓨터로 해결하기 위한 순서</li>
<li>어떤 문제를 해결하는 방법을 모두 알고리즘이라 한다.</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">입력</td>
<td>0개 이상의 입력이 존재햐아한다</td>
</tr>
<tr>
<td style="text-align:center">출력</td>
<td>1개 이상의 출력이 존재해야한다</td>
</tr>
<tr>
<td style="text-align:center">명백성</td>
<td>각 명령어의 의미는 모호하지 않고 명확해야한다</td>
</tr>
<tr>
<td style="text-align:center">유한성</td>
<td>한정된 수의 단계 후에는 반드시 종료되어야한다</td>
</tr>
<tr>
<td style="text-align:center">유효성</td>
<td>각 명령어들은 실행 가능한 연산이어야 한다</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p><strong>코딩 테스트나 인터뷰에서 알고리즘을 보는 이유는 문제를 모델링하고 해결하는 능력을 알아보기 위해서이다.</strong></p>
</blockquote>
<h2 id="알고리즘의-효율성-Efficiency"><a href="#알고리즘의-효율성-Efficiency" class="headerlink" title="알고리즘의 효율성(Efficiency)"></a>알고리즘의 효율성(Efficiency)</h2><p>알고리즘 문제를 해결하는 어떤 코드를 작성했을 때, 이 프로그램의 효율성을 알고싶을 때</p>
<ul>
<li><strong>수행시간</strong></li>
<li>사용한 메모리</li>
<li>코드의 길이</li>
</ul>
<p>중 <strong>수행시간</strong>이 중요하다.</p>
<p>예를들어 어떤 프로그램을 작성했는데, 시간이 10일 걸리면 10일동안 실행해야하고, 메모리가 64GB가 필요할 경우 메모리가 부족하면 램을 구매하면 된다.<br>이런 문제를 해결할 때는 <strong>시간</strong>이 중요.</p>
<h2 id="문제의-크기-Scale-Of-Problem"><a href="#문제의-크기-Scale-Of-Problem" class="headerlink" title="문제의 크기(Scale Of Problem)"></a>문제의 크기(Scale Of Problem)</h2><p>개발중 접하게 되는 문제를 해결하는 과정에는 항상 문제의 크기가 발생한다.</p>
<ol>
<li>‘게임 동시 접속자 수’, ‘쇼핑몰 장바구니 물건의 수’ 등 이런 문제의 크기를 보통 <strong>N</strong>이라 하고, <strong>N</strong>에 따라 걸리는 시간이 다르다.</li>
<li>웹 사이트를 만드는 경우 100명이 동시에 접속하는 것과 10만명이 동시에 접속하는 사이트를 만드는 방법은 큰차이가 있으며 접속자가 많을 경우 사이트를 만드는 방법은 더 어렵다. 이럴 때도 문제의 크기에 따라 최적은 방법을 선택해야한다.</li>
</ol>
<blockquote>
<p><strong>문제를 해결할 때는 문제의 크기를 먼저 보고 방법을 생각해야 한다.</strong></p>
</blockquote>
<h2 id="알고리즘의-복잡도-분석-Complexity-Analysis"><a href="#알고리즘의-복잡도-분석-Complexity-Analysis" class="headerlink" title="알고리즘의 복잡도 분석(Complexity Analysis)"></a>알고리즘의 복잡도 분석(Complexity Analysis)</h2><p>알고리즘 복잡도 분석은 직접 구현하지 않고 모든 입력을 고려하는 방법으로 하드웨어나 소프트웨어어 환경과 관계없이 알고리즘의 수행시간 및 효율성을 평가할 수 있다. </p>
<ul>
<li>알고리즘이 수행하는 연산의 횟수를 측정</li>
<li>연산의 횟수는 N함수로 표현된다.</li>
</ul>
<p>알고리즘의 분석 방법에는 기억 공간을 분석하는 <strong>공간 복잡도(Space Complexity)</strong>와 실행 시간을 분석하는 <strong>시간복잡도(Time Complexity)</strong>가 있다.</p>
<h3 id="공간복잡도-Space-Complexity"><a href="#공간복잡도-Space-Complexity" class="headerlink" title="공간복잡도(Space Complexity)"></a>공간복잡도(Space Complexity)</h3><p>알고리즘의 메모리 사용량에 대한 분석결과로 대략적으로 얼마나 공간을 사용할지 예상할 수 있다.</p>
<h3 id="시간복잡도-Time-Complexity"><a href="#시간복잡도-Time-Complexity" class="headerlink" title="시간복잡도(Time Complexity)"></a>시간복잡도(Time Complexity)</h3><p>알고리즘의 수행시간 분석결과로 시간 복잡도를 이용하면 작성한 코드의 수행 시간이 얼마나 걸릴지 예상할 수 있다.</p>
<p>시간복잡도에서 불필요한 정보를 제거하여 알고리즘 분석을 쉽게할 목적으로 빅-오 표기법(Big-O Notation)을 이용하여 복잡도를 표시한다.</p>
<p><strong>빅오 표기법의 수학적 정의</strong></p>
<blockquote>
<p> 두 개의 함수 $f(n)$ 과 $g(n)$이 주어졌을 때 모든 $n \geqq n_0$ 에 대하여 $|f(n) \leqq c|g(n)|$을 만족하는 2개의 상수 $c$와 $n_0$가 존재하면 $f(n) = O(g(n))$이다 </p>
</blockquote>
<p>즉 입력크기 N에 대하여 얼마나 시간이 걸릴지 나타내고, 최악의 경우 시간이 얼마나 걸리지 알 수 있다.</p>
<p>빅오 표기법은 연산의 횟수가 다항식으로 표현되었을 경우 다항식의 최고차 항만을 남기고 다른 항들과 상수항을 버리는 것이다. 궁극적으로 최고차 항의 계수도 버리고 단지 최고차 항의 차수만을 사용한다.</p>
<ol>
<li>상수는 버린다. <ul>
<li>$O(3N^2) = O(N^2)$</li>
<li>$O({1 \over 2} N^2) = O(N^2)$</li>
<li>$O(5) = O(1)$</li>
</ul>
</li>
<li>두 개 이상 항이 있을 때 최고차의 항의 차수만 사용한다.<ul>
<li>$O(N^2 + N) = O(N^2)$</li>
<li>$O(N^2 + N\log N) = O(N^2)$</li>
</ul>
</li>
<li>두 가지 항이 있는데 다른 변수가 있으면 둔다<ul>
<li>$O(N^2 + M)$</li>
</ul>
</li>
</ol>
<p><strong>대표적인 시간복잡도</strong></p>
<ul>
<li>$O(1)$ : 상수</li>
<li>$O(\log N)$ : 로그</li>
<li>$O(N)$ : 선형</li>
<li>$O(N\log N)$ : 선형로그</li>
<li>$O(N^2)$ : 2차</li>
<li>$O(N^3)$ :3차</li>
<li>$O(2^N)$ : 지수</li>
<li>$O(N!)$ : 팩토리얼</li>
</ul>
<p><strong>실행시간 </strong></p>
<p>$O(1) &lt; O(\log N) &lt; O(N) &lt; O(N\log N) &lt; O(N^2) &lt; O(N^3) &lt; O(2^N) &lt; O(N!)$</p>
<p>Ex1) 1부터 N까지의 합</p>
<ul>
<li>i 는 1부터 N번을 수행하므로 시간복잡도 : $O(N)$</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line">for (int i &#x3D; 1; i&lt;&#x3D;N; i++) &#123;</span><br><span class="line">    sum+&#x3D; i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ex2) 1부터 N까지의 합</p>
<ul>
<li>N번을 2번 수행하므로 시간복잡도 : $O(N^2)$</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line">for (int i &#x3D; 1; i&lt;&#x3D;N; i++) &#123;</span><br><span class="line">    for (int j &#x3D; 1; j&lt;&#x3D;N; j++) &#123;</span><br><span class="line">       sum+&#x3D; j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ex3) 1부터 N까지의 합을 계산</p>
<ul>
<li><p>1번의 연산만 수행하므로 시간복잡도 : $O(1)$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line">sum &#x3D; N * (N + 1) &#x2F; 2;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><strong>참조</strong></p>
<ul>
<li>code.Plus : <a href="https://code.plus/course/41" target="_blank" rel="noopener">https://code.plus/course/41</a></li>
<li>C언어로 쉽게 풀어쓴 자료구조</li>
<li>위키피디아 : <a href="https://ko.wikipedia.org/wiki/알고리즘" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/알고리즘</a></li>
</ul>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>big-O</tag>
        <tag>빅오</tag>
        <tag>시간복잡도</tag>
        <tag>time complexity</tag>
      </tags>
  </entry>
</search>
