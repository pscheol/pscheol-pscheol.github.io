<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[BaekJoon-2178] 미로탐색</title>
    <url>/2020/06/25/BaekJoon-2178-MiroSearch/</url>
    <content><![CDATA[<h1 id="미로탐색"><a href="#미로탐색" class="headerlink" title="미로탐색"></a>미로탐색</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>N×M크기의 배열로 표현되는 미로가 있다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1	0	1	1	1	1</span><br><span class="line">1	0	1	0	1	0</span><br><span class="line">1	0	1	0	1	1</span><br><span class="line">1	1	1	0	1	1</span><br></pre></td></tr></table></figure>
<p>미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.</p>
<p>위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 6</span><br><span class="line">101111</span><br><span class="line">101010</span><br><span class="line">101011</span><br><span class="line">111011</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 6</span><br><span class="line">110110</span><br><span class="line">110110</span><br><span class="line">111111</span><br><span class="line">111101</span><br></pre></td></tr></table></figure>
<p>예제 출력 2<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><br>예제 입력 3<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 25</span><br><span class="line">1011101110111011101110111</span><br><span class="line">1110111011101110111011101</span><br></pre></td></tr></table></figure><br>예제 출력 3<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">38</span><br></pre></td></tr></table></figure><br>예제 입력 4<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 7</span><br><span class="line">1011111</span><br><span class="line">1110001</span><br><span class="line">1000001</span><br><span class="line">1000001</span><br><span class="line">1000001</span><br><span class="line">1000001</span><br><span class="line">1111111</span><br></pre></td></tr></table></figure><br>예제 출력 4<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure></p>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>(1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수룰 구하는 문제</p>
<p>최소의 칸수를 이용하려면 최소 범위를 구해야하는데 DFS로는 최소 범위를 구할 수 없으므로 BFS를 이용하여 문제를 푼다.</p>
<p>위치 이동은 상하 좌우로 이동하므로<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] PATH = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">0</span>,-<span class="number">1</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><br>를 세팅 해준다.</p>
<p>그리고 범위 탐색을해야하므로 <code>dist[][]</code> 를 추가하여 방문범위를 추가한다.</p>
<p>아래 처럼 미로가있다면<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 6</span><br><span class="line">101111</span><br><span class="line">101010</span><br><span class="line">101011</span><br><span class="line">111011</span><br></pre></td></tr></table></figure><br>dist로 방문 범위를 찍어주면 아래와 같은 결과를 얻을 수 있다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1  0  9 10 11 12 </span><br><span class="line">2  0  8  0 12  0 </span><br><span class="line">3  0  7  0 13 14 </span><br><span class="line">4  5  6  0 14 15</span><br></pre></td></tr></table></figure>
<p>그러면 (N, M)의 위치값을 구하는 것으로 <code>dist[n-1][m-1]</code>의 값을 출력해준다.</p>
<h3 id="DFS-코드"><a href="#DFS-코드" class="headerlink" title="DFS 코드"></a>DFS 코드</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Edge&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="keyword">new</span> Edge(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        dist[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            Edge e = queue.poll();</span><br><span class="line">            <span class="keyword">int</span> x = e.x;</span><br><span class="line">            <span class="keyword">int</span> y = e.y;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">int</span> nx = x + PATH[k][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> ny = y + PATH[k][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> &lt;= nx &amp;&amp; n &gt; nx &amp;&amp; <span class="number">0</span> &lt;= ny &amp;&amp; m &gt; ny) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (table[nx][ny] == <span class="number">1</span> &amp;&amp; dist[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">                        queue.offer(<span class="keyword">new</span> Edge(nx, ny));</span><br><span class="line">                        dist[nx][ny] = dist[x][y] + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2178 : 미로탐색</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiroSearchMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] table;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] dist;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] PATH = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">0</span>,-<span class="number">1</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Edge</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        Edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] splitnm = in.readLine().split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(splitnm[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(splitnm[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        table = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        dist = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            String[] splitLine = in.readLine().split(<span class="string">""</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; splitLine.length; j++) &#123;</span><br><span class="line">                table[i][j] = Integer.parseInt(splitLine[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bfs(n, m);</span><br><span class="line">        System.out.println(dist[n - <span class="number">1</span>][m - <span class="number">1</span>]);</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Edge&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="keyword">new</span> Edge(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        dist[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            Edge e = queue.poll();</span><br><span class="line">            <span class="keyword">int</span> x = e.x;</span><br><span class="line">            <span class="keyword">int</span> y = e.y;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">int</span> nx = x + PATH[k][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> ny = y + PATH[k][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> &lt;= nx &amp;&amp; n &gt; nx &amp;&amp; <span class="number">0</span> &lt;= ny &amp;&amp; m &gt; ny) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (table[nx][ny] == <span class="number">1</span> &amp;&amp; dist[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">                        queue.offer(<span class="keyword">new</span> Edge(nx, ny));</span><br><span class="line">                        dist[nx][ny] = dist[x][y] + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>그래프</tag>
        <tag>Graph</tag>
        <tag>BFS</tag>
        <tag>DFS</tag>
        <tag>깊이우선탐색</tag>
        <tag>너비우선탐색</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-266] 단지번호붙이기</title>
    <url>/2020/06/24/BaekJoon-2667-PasteOfNumbering/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>&lt;그림 1&gt;과 같이 정사각형 모양의 지도가 있다. 1은 집이 있는 곳을, 0은 집이 없는 곳을 나타낸다. 철수는 이 지도를 가지고 연결된 집들의 모임인 단지를 정의하고, 단지에 번호를 붙이려 한다. 여기서 연결되었다는 것은 어떤 집이 좌우, 혹은 아래위로 다른 집이 있는 경우를 말한다. 대각선상에 집이 있는 경우는 연결된 것이 아니다. &lt;그림 2&gt;는 &lt;그림 1&gt;을 단지별로 번호를 붙인 것이다. 지도를 입력하여 단지수를 출력하고, 각 단지에 속하는 집의 수를 오름차순으로 정렬하여 출력하는 프로그램을 작성하시오.</p>
<img src="/2020/06/24/BaekJoon-2667-PasteOfNumbering/img1.png" class=""> 
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫 번째 줄에는 지도의 크기 N(정사각형이므로 가로와 세로의 크기는 같으며 5≤N≤25)이 입력되고, 그 다음 N줄에는 각각 N개의 자료(0혹은 1)가 입력된다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫 번째 줄에는 총 단지수를 출력하시오. 그리고 각 단지내 집의 수를 오름차순으로 정렬하여 한 줄에 하나씩 출력하시오.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">0110100</span><br><span class="line">0110101</span><br><span class="line">1110101</span><br><span class="line">0000111</span><br><span class="line">0100000</span><br><span class="line">0111110</span><br><span class="line">0111000</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2667 : 단지번호 붙이기</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasteOfNumberingMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] table;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dist;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] path = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(in.readLine());</span><br><span class="line">        table = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        dist = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            String[] splitLine = in.readLine().split(<span class="string">""</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; splitLine.length; j++) &#123;</span><br><span class="line">                table[i][j] = Integer.parseInt(splitLine[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (table[i][j] == <span class="number">1</span> &amp;&amp; dist[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    ret = <span class="number">0</span>;</span><br><span class="line">                    bfs(i, j, n, ++cnt);</span><br><span class="line">                    list.add(ret);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list.sort(Integer::compareTo);</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(cnt);</span><br><span class="line">        sb.append(<span class="string">"\n"</span>);</span><br><span class="line">        list.sort(Integer::compareTo);</span><br><span class="line">        <span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">            sb.append(i);</span><br><span class="line">            sb.append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Edge</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> i , <span class="keyword">int</span> j, <span class="keyword">int</span> n ,<span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Edge&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        dist[i][j] = cnt;</span><br><span class="line">        ret++;</span><br><span class="line">        queue.offer(<span class="keyword">new</span> Edge(i, j));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            Edge e = queue.poll();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">int</span> nx = e.x + path[k][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> ny = e.y + path[k][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> &lt;= nx &amp;&amp; nx &lt; n &amp;&amp; <span class="number">0</span> &lt;= ny &amp;&amp; ny &lt; n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (table[nx][ny] == <span class="number">1</span> &amp;&amp; dist[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">                        dist[nx][ny] = cnt;</span><br><span class="line">                        ret++;</span><br><span class="line">                        queue.offer(<span class="keyword">new</span> Edge(nx,ny));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> n, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        dist[i][j] = cnt;</span><br><span class="line">        ret++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">            <span class="keyword">int</span> nx = i + path[k][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ny = j + path[k][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt;= nx &amp;&amp; nx &lt; n &amp;&amp; <span class="number">0</span> &lt;= ny &amp;&amp; ny &lt; n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (table[nx][ny] == <span class="number">1</span> &amp;&amp; dist[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">                    dfs(nx, ny ,n, cnt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>그래프</tag>
        <tag>Graph</tag>
        <tag>BFS</tag>
        <tag>DFS</tag>
        <tag>깊이우선탐색</tag>
        <tag>너비우선탐색</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-1707] 이분그래프</title>
    <url>/2020/06/24/BaekJoon-1707-BipartiteGraph/</url>
    <content><![CDATA[<h1 id="이분그래프"><a href="#이분그래프" class="headerlink" title="이분그래프"></a>이분그래프</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>그래프의 정점의 집합을 둘로 분할하여, 각 집합에 속한 정점끼리는 서로 인접하지 않도록 분할할 수 있을 때, 그러한 그래프를 특별히 이분 그래프 (Bipartite Graph) 라 부른다.</p>
<p>그래프가 입력으로 주어졌을 때, 이 그래프가 이분 그래프인지 아닌지 판별하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>입력은 여러 개의 테스트 케이스로 구성되어 있는데, 첫째 줄에 테스트 케이스의 개수 K(2≤K≤5)가 주어진다. 각 테스트 케이스의 첫째 줄에는 그래프의 정점의 개수 V(1≤V≤20,000)와 간선의 개수 E(1≤E≤200,000)가 빈 칸을 사이에 두고 순서대로 주어진다. 각 정점에는 1부터 V까지 차례로 번호가 붙어 있다. 이어서 둘째 줄부터 E개의 줄에 걸쳐 간선에 대한 정보가 주어지는데, 각 줄에 인접한 두 정점의 번호가 빈 칸을 사이에 두고 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>K개의 줄에 걸쳐 입력으로 주어진 그래프가 이분 그래프이면 YES, 아니면 NO를 순서대로 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3 2</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">4 4</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">4 2</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1-복사"><a href="#예제-출력-1-복사" class="headerlink" title="예제 출력 1  복사"></a>예제 출력 1  복사</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>일단 이분 그래프가 뭔지 알아야한다..</p>
<p><a href="https://ko.wikipedia.org/wiki/%EC%9D%B4%EB%B6%84_%EA%B7%B8%EB%9E%98%ED%94%84" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/%EC%9D%B4%EB%B6%84_%EA%B7%B8%EB%9E%98%ED%94%84</a></p>
<p>그다음 DFS or BFS 를 이용하면 된다.</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1707 이분그래프(Bipartite Graph)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BipartiteGraphMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; adjList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] colors;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isBipartite;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> t = scan.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (t-- != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = scan.nextInt(); <span class="comment">//vertex</span></span><br><span class="line">            <span class="keyword">int</span> e = scan.nextInt(); <span class="comment">//edge</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//init</span></span><br><span class="line">            adjList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            colors = <span class="keyword">new</span> <span class="keyword">int</span>[v + <span class="number">1</span>]; <span class="comment">//이분그래프를 분리할 테이블</span></span><br><span class="line">            isBipartite = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= v; i ++) &#123;</span><br><span class="line">                adjList.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                colors[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//무방향 그래프 값 삽입</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> from = scan.nextInt();</span><br><span class="line">                <span class="keyword">int</span> to = scan.nextInt();</span><br><span class="line">                adjList.get(from).add(to);</span><br><span class="line">                adjList.get(to).add(from);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//모든 정점의 길이만큼 수행.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= v; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!isBipartite) &#123; <span class="comment">// 이분그래프가 아니면 더 이상 루프를 돌 필요가 없으므로 Break</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (colors[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                    bfs(i, <span class="number">1</span>); <span class="comment">//RED 1, GREEN -1 형식으로 분리</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(isBipartite ? <span class="string">"YES"</span>:<span class="string">"NO"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * DFS</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        colors[v] = color;</span><br><span class="line">        <span class="keyword">for</span> (Integer vertex : adjList.get(v)) &#123;</span><br><span class="line">            <span class="comment">//시작정점과 인접 정점의 색이 같으면 이분 그래프가 아니므로 리턴</span></span><br><span class="line">            <span class="keyword">if</span> (colors[vertex] == color) &#123;</span><br><span class="line">                isBipartite = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//해당 정점을 방문하지 않았으면</span></span><br><span class="line">            <span class="keyword">if</span> (colors[vertex] == <span class="number">0</span>) &#123;</span><br><span class="line">                dfs(vertex, -color);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * BFS</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        colors[v] = color;</span><br><span class="line">        queue.offer(v);</span><br><span class="line">        <span class="keyword">int</span> tmpColor = color;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> dequeue = queue.poll();</span><br><span class="line">            color = colors[dequeue] == <span class="number">1</span> ? -<span class="number">1</span> : <span class="number">1</span>; <span class="comment">//RED 1, GREEN -1 형식으로 분리;</span></span><br><span class="line">            <span class="keyword">for</span> (Integer vertex : adjList.get(dequeue)) &#123;</span><br><span class="line">                <span class="comment">//시작정점과 인접 정점의 색이 같으면 이분 그래프가 아니므로 리턴</span></span><br><span class="line">                <span class="keyword">if</span> (colors[vertex] != <span class="number">0</span> &amp;&amp; colors[vertex] == colors[dequeue]) &#123;</span><br><span class="line">                    isBipartite = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//해당 정점을 방문하지 않았을 경우</span></span><br><span class="line">                <span class="keyword">if</span> (colors[vertex] == <span class="number">0</span>) &#123;</span><br><span class="line">                    colors[vertex] = color;</span><br><span class="line">                    queue.offer(vertex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>그래프</tag>
        <tag>Graph</tag>
        <tag>BFS</tag>
        <tag>DFS</tag>
        <tag>깊이우선탐색</tag>
        <tag>너비우선탐색</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-11724] 연결요소의 개수</title>
    <url>/2020/06/24/BaekJoon-11724-Connected-Component/</url>
    <content><![CDATA[<h1 id="연결요소의-개수"><a href="#연결요소의-개수" class="headerlink" title="연결요소의 개수"></a>연결요소의 개수</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>방향 없는 그래프가 주어졌을 때, 연결 요소 (Connected Component)의 개수를 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 정점의 개수 N과 간선의 개수 M이 주어진다. (1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)/2) 둘째 줄부터 M개의 줄에 간선의 양 끝점 u와 v가 주어진다. (1 ≤ u, v ≤ N, u ≠ v) 같은 간선은 한 번만 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 연결 요소의 개수를 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 5</span><br><span class="line">1 2</span><br><span class="line">2 5</span><br><span class="line">5 1</span><br><span class="line">3 4</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 8</span><br><span class="line">1 2</span><br><span class="line">2 5</span><br><span class="line">5 1</span><br><span class="line">3 4</span><br><span class="line">4 6</span><br><span class="line">5 4</span><br><span class="line">2 4</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>모든 정점의 개수만큼 루프를 돌면서</p>
<p>연결된 하나의 그래프의 개수를 카운팅</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 11724 연결요소</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectedComponentMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = scan.nextInt(); <span class="comment">//정점의 개수</span></span><br><span class="line">        <span class="keyword">int</span> m = scan.nextInt(); <span class="comment">//간선의 개수</span></span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; adjList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            adjList.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = scan.nextInt();</span><br><span class="line">            <span class="keyword">int</span> v = scan.nextInt();</span><br><span class="line">            adjList.get(u).add(v);</span><br><span class="line">            adjList.get(v).add(u);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span>[] check = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!check[i]) &#123;</span><br><span class="line">                bfs(adjList, check, i);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(cnt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DFS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> adjList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> check</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; adjList, <span class="keyword">boolean</span>[] check, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (check[v]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check[v] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer vertex : adjList.get(v)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!check[vertex]) &#123;</span><br><span class="line">                dfs(adjList, check, vertex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BFS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> adjList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> check</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; adjList, <span class="keyword">boolean</span>[] check, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        check[v] = <span class="keyword">true</span>;</span><br><span class="line">        queue.offer(v);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> dequeue = queue.poll();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> vertex : adjList.get(dequeue)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!check[vertex]) &#123;</span><br><span class="line">                    check[vertex] = <span class="keyword">true</span>;</span><br><span class="line">                    queue.offer(vertex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>그래프</tag>
        <tag>Graph</tag>
        <tag>BFS</tag>
        <tag>DFS</tag>
        <tag>깊이우선탐색</tag>
        <tag>너비우선탐색</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-1260] DFS 와 BFS</title>
    <url>/2020/06/24/BaekJoon-1260-dfs-and-bfs/</url>
    <content><![CDATA[<h1 id="DFS와-BFS"><a href="#DFS와-BFS" class="headerlink" title="DFS와 BFS"></a>DFS와 BFS</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 5 1</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 4</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 4 3</span><br><span class="line">1 2 3 4</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 5 3</span><br><span class="line">5 4</span><br><span class="line">5 2</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br><span class="line">3 1</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 1 2 5 4</span><br><span class="line">3 1 4 2 5</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-3"><a href="#예제-입력-3" class="headerlink" title="예제 입력 3"></a>예제 입력 3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1000 1 1000</span><br><span class="line">999 1000</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-3"><a href="#예제-출력-3" class="headerlink" title="예제 출력 3"></a>예제 출력 3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1000 999</span><br><span class="line">1000 999</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1260 : DFS와 BFS</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DFSAndBFSMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = scan.nextInt(); <span class="comment">//정점의 개수</span></span><br><span class="line">        <span class="keyword">int</span> m = scan.nextInt(); <span class="comment">//간선의 개수</span></span><br><span class="line">        <span class="keyword">int</span> v = scan.nextInt(); <span class="comment">//탐색을 시작할 정점의 번호</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//인접 리스트로 저장</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; adjList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            adjList.add(<span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> from = scan.nextInt();</span><br><span class="line">            <span class="keyword">int</span> to = scan.nextInt();</span><br><span class="line">            adjList.get(from).add(to);</span><br><span class="line">            adjList.get(to).add(from);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        dfs(adjList, stack, v);</span><br><span class="line">        System.out.println();</span><br><span class="line">        bfs(adjList, queue, v);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 깊이 우선 탐색 DFS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> adjList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stack</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; adjList, Stack&lt;Integer&gt; stack, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//방문했다고 표시</span></span><br><span class="line">        stack.push(v);</span><br><span class="line">        System.out.print(v);</span><br><span class="line">        adjList.get(v).sort(Integer::compareTo);</span><br><span class="line">        <span class="keyword">for</span> (Integer vertex : adjList.get(v)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty() &amp;&amp; stack.search(vertex) == -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">                dfs(adjList, stack, vertex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 너비 우선 탐색 BFS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> adjList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; adjList, Queue&lt;Integer&gt; queue, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[] check = <span class="keyword">new</span> <span class="keyword">boolean</span>[adjList.size()+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//1. 방문했음을 표시</span></span><br><span class="line">        check[v] = <span class="keyword">true</span>;</span><br><span class="line">        System.out.print(v);</span><br><span class="line">        <span class="comment">//2. queue 에 정점 v삽입</span></span><br><span class="line">        queue.offer(v);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//4. queue에서 정점 v 삭제</span></span><br><span class="line">            <span class="keyword">int</span> vertex = queue.poll();</span><br><span class="line">            <span class="comment">//5. 인접 정점 탐색</span></span><br><span class="line">            <span class="keyword">for</span> (Integer ver : adjList.get(vertex)) &#123;</span><br><span class="line">                <span class="comment">//6. 탐색하지 않았다면</span></span><br><span class="line">                <span class="keyword">if</span> (!check[ver]) &#123;</span><br><span class="line">                    <span class="comment">//방문했다고 ququq에 삽입</span></span><br><span class="line">                    queue.offer(ver);</span><br><span class="line">                    check[ver] = <span class="keyword">true</span>;</span><br><span class="line">                    System.out.print(<span class="string">" "</span>);</span><br><span class="line">                    System.out.print(ver);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>그래프</tag>
        <tag>Graph</tag>
        <tag>BFS</tag>
        <tag>DFS</tag>
        <tag>깊이우선탐색</tag>
        <tag>너비우선탐색</tag>
      </tags>
  </entry>
  <entry>
    <title>7. 그래프(Graph)</title>
    <url>/2020/06/18/7-graph/</url>
    <content><![CDATA[<h1 id="Graph-그래프"><a href="#Graph-그래프" class="headerlink" title="Graph(그래프)"></a>Graph(그래프)</h1><p>그래프는 연결되어 있는 객체간의 관계를 표현할 수 있는 자료구조로 vertex(정점)와 edge(간선)의 집합으로 이루어진다.</p>
<h2 id="그래프-용어"><a href="#그래프-용어" class="headerlink" title="그래프 용어"></a>그래프 용어</h2><ul>
<li>수학적으로는 G = (V,E)로 표시한다.</li>
<li>V(G)는 그래프 G의 vertex들의 집합</li>
<li>E(G)는 그래프 G의 edge들의 집합</li>
<li>Vertex는 Node라고 불린다.</li>
<li>Edge는 link라고 불린다.</li>
<li>Vertex의 종류에 따라 무방향 그래프(Undirected Graph)와 방향 그래프(Directed Graph)로 구분된다.<ul>
<li><strong>무방향 그래프</strong> :  ‘S—-E’ 화살표가 없는 선으로 이루어진 형태이다.<ul>
<li>무방향 그래프는 간선이 방향성이 없는 그래프로 양방향으로 갈 수 있다.</li>
<li>정점의 차수(Degree)는 그 정점에 인접한 정점의 수를 말한다.</li>
</ul>
</li>
<li><strong>방향 그래프</strong> : ‘S—-&gt;E’ 화살표가 있는 선으로 이루어진 형태다. <ul>
<li>방향 그래프는 간선이 방향성이 있는 그래프로 한쪽방향으로만 갈 수 있다.</li>
</ul>
</li>
</ul>
</li>
<li>간선에 비용이나 가중치가 할당된 그래프는 가중치 그래프(Weighted graph) 또는 네트워크(network)라고 한다.</li>
<li>인접정점(adjacent vertex) : 간선에 의해 직접 연결된 정점을 뜻한다.</li>
<li>경로 중에서 반복되는 간선이 없는 경우 단순경로(Simple Path)라고 한다</li>
<li>시작정점과 종료정점이 동일하다면 이러한 경로를 사이클(cycle)이라고 한다.</li>
<li>완전 그래프(Complete Graph) : 그래프 속에 있는 모든 정점이 서로 연결되어 있는 그래프<ul>
<li>무방향 완전 그래프의 정점의 수를 n이라고 하면 하나의 정점은 n-1개의 다른 정점으로 연결되므로 간선의 수는 n*(n-1)/2가 된다.</li>
</ul>
</li>
</ul>
<h2 id="그래프의-표현방법"><a href="#그래프의-표현방법" class="headerlink" title="그래프의 표현방법"></a>그래프의 표현방법</h2><h3 id="1-인접행렬-adjacency-matrix-O-n-2-2차원-배열인-인접행렬-M의-각-원소는-다음-규칙에-의해-할당한다"><a href="#1-인접행렬-adjacency-matrix-O-n-2-2차원-배열인-인접행렬-M의-각-원소는-다음-규칙에-의해-할당한다" class="headerlink" title="1.    인접행렬 (adjacency matrix) O(n^2): 2차원 배열인 인접행렬 M의 각 원소는 다음 규칙에 의해 할당한다."></a>1.    인접행렬 (adjacency matrix) O(n^2): 2차원 배열인 인접행렬 M의 각 원소는 다음 규칙에 의해 할당한다.</h3><ul>
<li>if(edge(i,j)가 그래프에 존재) M[i][j] = 1</li>
<li>otherwise M[i][j] = 0</li>
<li>그래프에서는 자체 간선을 허용하지 않으므로 인접행렬의 대각선 성분은 모두 0으로 표시한다.</li>
<li>무방향 그래프의 인접행렬을 대칭행렬이 된다.</li>
<li>방향 그래프의 인접행렬은 일반적으로 대칭이 아니다.</li>
<li>n개의 정점을 가지는 그래프를 인접행렬로 표현하기 위해서는 간선의 수에 무관하게 항상 n^2개의 메모리 공간이 필요하다.</li>
</ul>
<h4 id="인접행렬-ADT"><a href="#인접행렬-ADT" class="headerlink" title="인접행렬 ADT"></a>인접행렬 ADT</h4><p>AdjacencyMatrix.h</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="meta">#ifndef ADJACENCYMATRIX_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADJACENCYMATRIX_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string.h&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTICES 10</span></span><br><span class="line">typedef <span class="keyword">struct</span> _GraphType &#123;</span><br><span class="line">	<span class="keyword">int</span> n; <span class="comment">//정점의 개수</span></span><br><span class="line">	<span class="keyword">int</span> adj_matrix[MAX_VERTICES][MAX_VERTICES];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;GraphType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">graph_init</span>(<span class="params">GraphType* graph</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertvertex</span>(<span class="params">GraphType *g, <span class="keyword">int</span> v</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_edge</span>(<span class="params">GraphType* g, <span class="keyword">int</span> start, <span class="keyword">int</span> end</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> //ADJACENCYMATRIX_H</span></span><br></pre></td></tr></table></figure>
<p>AdjacencyMatrix.c</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paik Seung Cheol on 2017. 9. 20..</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#include "AdjacencyMatrix.h"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">graph_init</span>(<span class="params">GraphType* graph</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">int</span> r, c;</span><br><span class="line">	graph-&gt;n = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(r = <span class="number">0</span>; r&lt;MAX_VERTICES; r++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(c = <span class="number">0</span>; c&lt;MAX_VERTICES; c++) &#123;</span><br><span class="line">			graph-&gt;adj_matrix[r][c] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertvertex</span>(<span class="params">GraphType *g, <span class="keyword">int</span> v</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> ((g-&gt;n+<span class="number">1</span>) &gt; MAX_VERTICES) &#123;</span><br><span class="line">		fprintf(stderr, <span class="string">"graph Error vertex overflow\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	g-&gt;n++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_edge</span>(<span class="params">GraphType* g, <span class="keyword">int</span> start, <span class="keyword">int</span> end</span>)</span> &#123;</span><br><span class="line">	g-&gt;adj_matrix[start][end] = <span class="number">1</span>;</span><br><span class="line">	g-&gt;adj_matrix[end][start] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>main.c</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include "AdjacencyMatrix.h"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjMatrix</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	GraphType* graph = (GraphType*)malloc(<span class="keyword">sizeof</span>(GraphType));</span><br><span class="line">	grapth_init(graph);</span><br><span class="line">	insertvertex(graph, <span class="number">5</span>);</span><br><span class="line">	insertvertex(graph, <span class="number">5</span>);</span><br><span class="line">	insertvertex(graph, <span class="number">5</span>);</span><br><span class="line">	insertvertex(graph, <span class="number">5</span>);</span><br><span class="line">	insert_edge(graph,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">	insert_edge(graph,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">	insert_edge(graph,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">	insert_edge(graph,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">	insert_edge(graph,<span class="number">7</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> r, c;</span><br><span class="line">	graph-&gt;n = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(r = <span class="number">0</span>; r&lt;MAX_VERTICES; r++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(c = <span class="number">0</span>; c&lt;MAX_VERTICES; c++) &#123;</span><br><span class="line">			printf(<span class="string">"%d "</span>,graph-&gt;adj_matrix[r][c]);</span><br><span class="line">		&#125;</span><br><span class="line">		printf(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	adjMatrix();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-인접-리스트-adjacency-list-O-n-e-각각의-정점에-인접한-정점들을-연결리스트로-표시한-것으로-각-연결리스트이-노드들은-인접-정점을-저장한다"><a href="#2-인접-리스트-adjacency-list-O-n-e-각각의-정점에-인접한-정점들을-연결리스트로-표시한-것으로-각-연결리스트이-노드들은-인접-정점을-저장한다" class="headerlink" title="2.    인접 리스트(adjacency list) O(n+e) : 각각의 정점에 인접한 정점들을 연결리스트로 표시한 것으로 각 연결리스트이 노드들은 인접 정점을 저장한다."></a>2.    인접 리스트(adjacency list) O(n+e) : 각각의 정점에 인접한 정점들을 연결리스트로 표시한 것으로 각 연결리스트이 노드들은 인접 정점을 저장한다.</h3><ul>
<li>연결리스트들은 헤드 포인터를 가지고 있고 이 헤드 포인터들은 하나의 배열로 구성되어 있어서 정점의 번호만 알면 이 번호를 배열의 인덱스로 하여 각 정점의 연결리스트에 쉽게 접근이 가능하다.</li>
</ul>
<h4 id="인접리스트-ADT"><a href="#인접리스트-ADT" class="headerlink" title="인접리스트 ADT"></a>인접리스트 ADT</h4><p>AdjacencyList.h</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paik Seung Cheol on 2017. 9. 20..</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#ifndef ADJACENCYLIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADJACENCYLIST_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> VisitMode &#123; Visited, NotVisited&#125;;</span><br><span class="line">typedef <span class="keyword">int</span> Element;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">struct</span> tagVertex &#123;</span><br><span class="line">	Element Data;</span><br><span class="line">	<span class="keyword">int</span> visited;</span><br><span class="line">	<span class="keyword">int</span> index;</span><br><span class="line">	<span class="keyword">struct</span> tagVertex* next;</span><br><span class="line">	<span class="keyword">struct</span> tagEdge* AdjacencyList;</span><br><span class="line">&#125;Vertex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">struct</span> tagEdge &#123;</span><br><span class="line">	<span class="keyword">int</span> weight;</span><br><span class="line">	<span class="keyword">struct</span> tagEdge* next;</span><br><span class="line">	Vertex* <span class="keyword">from</span>;</span><br><span class="line">	Vertex* target;</span><br><span class="line">&#125;Edge;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">struct</span> tagGraph &#123;</span><br><span class="line">	Vertex* vertices;</span><br><span class="line">	<span class="keyword">int</span> vertexCount;</span><br><span class="line">&#125;Graph;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Graph* createGraph();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryGraph</span>(<span class="params">Graph* g</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vertex* createVertex(Element data);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryVertex</span>(<span class="params">Vertex* v</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Edge* createEdge(Vertex* <span class="keyword">from</span>, Vertex* target, <span class="keyword">int</span> weight);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryEdge</span>(<span class="params">Edge* e</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addVertex</span>(<span class="params">Graph* g, Vertex* v</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span>(<span class="params">Vertex* v, Edge* e</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printGraph</span>(<span class="params">Graph* g</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> //ADJACENCYLIST_H</span></span><br></pre></td></tr></table></figure>
<p>AdjacencyList.c</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paik Seung Cheol on 2017. 9. 20..</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#include "AdjacencyList.h"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Graph* createGraph() &#123;</span><br><span class="line">	Graph* graph = (Graph*)malloc(<span class="keyword">sizeof</span>(Graph));</span><br><span class="line">	graph-&gt;vertices = NULL;</span><br><span class="line">	graph-&gt;vertexCount = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryGraph</span>(<span class="params">Graph* g</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">while</span>(g-&gt;vertices != NULL) &#123;</span><br><span class="line">		Vertex* verteices = g-&gt;vertices-&gt;next;</span><br><span class="line">		destoryVertex(g-&gt;vertices);</span><br><span class="line">		g-&gt;vertices = verteices;</span><br><span class="line">	&#125;</span><br><span class="line">	free(g);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vertex* createVertex(Element data) &#123;</span><br><span class="line">	Vertex* vertex = (Vertex*)malloc(<span class="keyword">sizeof</span>(Vertex));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	vertex-&gt;Data = data;</span><br><span class="line">	vertex-&gt;next = NULL;</span><br><span class="line">	vertex-&gt;AdjacencyList = NULL;</span><br><span class="line">	vertex-&gt;visited = NotVisited;</span><br><span class="line">	vertex-&gt;index = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> vertex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryVertex</span>(<span class="params">Vertex* v</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">while</span>(v-&gt;AdjacencyList != NULL) &#123;</span><br><span class="line">		Edge* edge = v-&gt;AdjacencyList-&gt;next;</span><br><span class="line">		destoryEdge(v-&gt;AdjacencyList);</span><br><span class="line">		v-&gt;AdjacencyList = edge;</span><br><span class="line">	&#125;</span><br><span class="line">	free(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Edge* createEdge(Vertex* <span class="keyword">from</span>, Vertex* target, <span class="keyword">int</span> weight) &#123;</span><br><span class="line">	Edge* e = (Edge*)malloc(<span class="keyword">sizeof</span>(Edge));</span><br><span class="line">	e-&gt;<span class="keyword">from</span> = <span class="keyword">from</span>;</span><br><span class="line">	e-&gt;target = target;</span><br><span class="line">	e-&gt;weight = weight;</span><br><span class="line">	e-&gt;next = NULL;</span><br><span class="line">	<span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryEdge</span>(<span class="params">Edge* e</span>)</span> &#123;</span><br><span class="line">	free(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addVertex</span>(<span class="params">Graph* g, Vertex* v</span>)</span> &#123;</span><br><span class="line">	Vertex* vertexList = g-&gt;vertices;</span><br><span class="line">	<span class="keyword">if</span> (vertexList == NULL) &#123;</span><br><span class="line">		g-&gt;vertices = v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">while</span>(vertexList-&gt;next != NULL) &#123;</span><br><span class="line">			vertexList = vertexList-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		vertexList-&gt;next = v;</span><br><span class="line">	&#125;</span><br><span class="line">	v-&gt;index = g-&gt;vertexCount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span>(<span class="params">Vertex* v, Edge* e</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (v-&gt;AdjacencyList == NULL) &#123;</span><br><span class="line">		v-&gt;AdjacencyList = e;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		Edge* adjList = v-&gt;AdjacencyList;</span><br><span class="line">		<span class="keyword">while</span>(adjList-&gt;next != NULL) &#123;</span><br><span class="line">			adjList = adjList-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		adjList-&gt;next = e;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printGraph</span>(<span class="params">Graph* g</span>)</span> &#123;</span><br><span class="line">	Vertex* v = NULL;</span><br><span class="line">	Edge* e = NULL;</span><br><span class="line">	<span class="keyword">if</span> ((v = g-&gt;vertices) == NULL) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(v!= NULL) &#123;</span><br><span class="line">		printf(<span class="string">"%c : "</span>, v-&gt;Data);</span><br><span class="line">		<span class="keyword">if</span> ((e = v-&gt;AdjacencyList) == NULL) &#123;</span><br><span class="line">			v = v-&gt;next;</span><br><span class="line">			printf(<span class="string">"\n"</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(e != NULL) &#123;</span><br><span class="line">			printf(<span class="string">"%c[%d] "</span>, e-&gt;target-&gt;Data, e-&gt;weight);</span><br><span class="line">			e = e-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(<span class="string">"\n"</span>);</span><br><span class="line">		v = v-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="그래프-탐색-방법"><a href="#그래프-탐색-방법" class="headerlink" title="그래프 탐색 방법"></a>그래프 탐색 방법</h2><h3 id="1-깊이-우선-탐색-Depth-First-Search-DFS"><a href="#1-깊이-우선-탐색-Depth-First-Search-DFS" class="headerlink" title="1. 깊이 우선 탐색 (Depth First Search : DFS)"></a>1. 깊이 우선 탐색 (Depth First Search : DFS)</h3><ul>
<li>더 나아갈 길이 보이지 않을 때까지 깊이 들어간다.</li>
<li>한 방향으로 계속 가다가 더 이상 갈수 없게 되면 다시 가장 가까운 갈림길로 돌아와서 다른 방향으로 탐색을 진행  </li>
<li>길이 나오지 않을 때까지 그래프의 정점을 타고 깊이 들어가다 더 이상 방문해왔던 정점말고는 다른 이웃을 갖고 있지 않은 정점을 만나면 뒤로 돌아와 다른 경로로 뻗어 있는 정점을 타고 방문을 재개하는 방식</li>
</ul>
<h4 id="DFS-알고리즘"><a href="#DFS-알고리즘" class="headerlink" title="DFS 알고리즘"></a>DFS 알고리즘</h4><ol>
<li>시작 정점을 밟은 후 이 정점을 ‘방문했음’으로 표시</li>
<li>이 정점과 이웃하고 있는 정점(인접정점)중에서 아직 방문하지 않은 곳을 선택하고 이를 시작 정점으로 삼아 다시 깊이 우선탐색을 시작(1단계를 다시하는 것)</li>
<li>정점에 더 이상 방문하지 않은 인접 정점이 없으면 이전 정점으로 돌아가서 2단계를 수행</li>
<li>이전 정점으로 돌아가도 더 이상 방문할 이웃이 없으면 그래프의 모든 정점을 방문했으므로 탐색을 종료</li>
</ol>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//u 아직방문하지 않은 정점</span></span><br><span class="line">depth_first_search(v)</span><br><span class="line">	v를 방문했다고 표시</span><br><span class="line">	<span class="keyword">for</span> v에 인접한 정점 탐색 <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">if</span> (탐색하지 못한 정점이 있다면)</span><br><span class="line">			<span class="function">then <span class="title">depth_first_search</span>(<span class="params">u</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="DFS-소스코드"><a href="#DFS-소스코드" class="headerlink" title="DFS 소스코드"></a>DFS 소스코드</h4><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span>(<span class="params">Vertex* v</span>)</span> &#123;</span><br><span class="line">	<span class="comment">//1. 이미 방문햇음을 표시</span></span><br><span class="line">	Edge* e = NULL;</span><br><span class="line">	printf(<span class="string">"%d "</span>, v-&gt;data);</span><br><span class="line">	v-&gt;visited = visited; <span class="comment">//이미 방문했다는 것을 표시</span></span><br><span class="line">	e = v-&gt;adjacencyList; <span class="comment">//인접한 정점 리스트</span></span><br><span class="line">	<span class="keyword">while</span>(e != NULL) &#123; <span class="comment">// 현재 정점의 모든 인접정점에 대해 DFS를 재귀적으로 호출</span></span><br><span class="line">		<span class="keyword">if</span> (e-&gt;target != NULL &amp;&amp; e-&gt;target-&gt;Visited == NotVisited) &#123;</span><br><span class="line">			<span class="comment">//인접데이터가 방문하지 않았으면 재귀호출</span></span><br><span class="line">				DFS(e-&gt;target);</span><br><span class="line">		&#125;</span><br><span class="line">		e = e-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-너비-우선-탐색-Breadth-First-Search-BFS"><a href="#2-너비-우선-탐색-Breadth-First-Search-BFS" class="headerlink" title="2. 너비 우선 탐색 (Breadth First Search : BFS)"></a>2. 너비 우선 탐색 (Breadth First Search : BFS)</h3><ul>
<li>시작 정점부터 가까운 정점을 먼저 방문하고 멀리 떨어져 있는 정점을 나중에 방문하는 순회방법</li>
<li>너비 우선 탐색을 하기 위해서 방문한 정점들을 차례로 저장하고 꺼낼 수 있는 Queue가 필요</li>
<li>정점이 방문될 때마다 큐에 방문한 정점을 삽입하고 더이상 방문할 인접 정점이 없는 경우 큐 앞에서 정점을 꺼내어 그 정점과 인접한 정점들을 차례대로 방문</li>
</ul>
<h4 id="BFS-알고리즘"><a href="#BFS-알고리즘" class="headerlink" title="BFS 알고리즘"></a>BFS 알고리즘</h4><ol>
<li>시작 정점을 ‘방문했음’으로 표시 하고 큐에 삽입</li>
<li>큐로부터 정점을 제거(dequeue)하고 제거한 정점이 이웃하고 있는 인접 정점 중 아직 방문하지 않은 곳들을 ‘방문했음’으로 표시하고 큐에 삽입</li>
<li>큐가 비게 되면 탐색이 끝난 것이고 큐가 빌때까지 2를 반복</li>
</ol>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//u 방문하지 않은 정점</span></span><br><span class="line">breadth_first_search(v)</span><br><span class="line">	v를 방문되었다고 표시;</span><br><span class="line">	queue &lt;- v; <span class="comment">//큐에 정점 v 삽입</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="function">not <span class="keyword">is</span> <span class="title">empty</span>(<span class="params">queue</span>)) <span class="keyword">do</span></span></span><br><span class="line"><span class="function">		queue에서 정점 w를 삭제</span></span><br><span class="line"><span class="function">		<span class="keyword">for</span> 인접정점 탐색 <span class="keyword">do</span></span></span><br><span class="line"><span class="function">		 <span class="title">if</span> (<span class="params">아직 방문되지 않은 정점이 있다면</span>)</span></span><br><span class="line"><span class="function">		 	then u를 큐에 삽입</span></span><br><span class="line"><span class="function">		 	 		 방문되었다고 표시</span></span><br></pre></td></tr></table></figure>
<h4 id="BFS-소스-코드"><a href="#BFS-소스-코드" class="headerlink" title="BFS 소스 코드"></a>BFS 소스 코드</h4><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span>(<span class="params">Vertex* v, LinkedQueue* queue</span>)</span> &#123;</span><br><span class="line">	Edge* e = NULL;</span><br><span class="line">	printf(<span class="string">"%d "</span>,v-&gt;Data);</span><br><span class="line">	v-&gt;Visited = Visited; <span class="comment">//방문했음을 표시</span></span><br><span class="line">	LQ_Enqueue(&amp;queue, LQ_CreateNode(v)); <span class="comment">//시작정점에 큐 삽입</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(!LQ_isEmpty(queue)) &#123;</span><br><span class="line">		Node* popped = LQ_Dequeue(&amp;queue); <span class="comment">//큐 제거</span></span><br><span class="line">		v = popped-&gt;Data;</span><br><span class="line">		e = v-&gt;adjacencyList;</span><br><span class="line">		<span class="keyword">while</span>(e != NULL) &#123; <span class="comment">//인접한 정점 조사</span></span><br><span class="line">			v = E-&gt;target;</span><br><span class="line">			<span class="keyword">if</span> (v != NULL &amp;&amp; v-&gt;Visited == NotVisited) &#123; <span class="comment">//미방문 정점만 방문</span></span><br><span class="line">				printf(<span class="string">"%d "</span>, v-&gt;data);</span><br><span class="line">				v-&gt;Visited = Visited;</span><br><span class="line">				LQ_Enqueue(&amp;queue, LQ_CreateNode(v));</span><br><span class="line">			&#125;</span><br><span class="line">			e = e-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>그래프</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>6-2. 수식트리(Expression Tree)</title>
    <url>/2020/06/17/6-2-Expression-tree/</url>
    <content><![CDATA[<h1 id="ExpressionTree-수식트리"><a href="#ExpressionTree-수식트리" class="headerlink" title="ExpressionTree(수식트리)"></a>ExpressionTree(수식트리)</h1><p>하나의 연산자가 두 개의 피 연산자를 취한다는 가정아래 두 가지 규칙을 가짐</p>
<ol>
<li><p>피연산자는 Left Node</p>
</li>
<li><p>연산자는 root Node or Branch Node</p>
</li>
</ol>
<img src="/2020/06/17/6-2-Expression-tree/expTree.png" class="" title="&lt;그림1: Expression Tree&gt;">
<p><code>ex) 1 * 2 + (7-8)은 위와 같이 수식트리로 만들 수 있음(후위표기)</code></p>
<h2 id="알고리즘"><a href="#알고리즘" class="headerlink" title="알고리즘"></a>알고리즘</h2><ol>
<li>수식을 뒤에서부터 앞쪽으로 읽어옴</li>
<li>수식에서 제일 마지막에 있는 토큰은 루트노드가 된다.</li>
<li>후위표기식에서 가장 마지막에 있는 토큰은 항상 연산자이다.</li>
<li>수식에서 읽어낸 토큰이 연산자인 경우 가지노드가 되고, 이 토큰 다음에 따라오는 두 개의 토큰은 각각 오른쪽과 왼쪽 자식노드가 된다.</li>
<li>다음 토큰에도 연속해서 연산자인 경우 토큰으로부터 만들어지는 하위 트리가 완성된 이후에 읽어낸 토큰이 왼쪽 자식노드가 된다.</li>
<li>수식에서 읽어낸 토큰이 숫자이면 Left노드이다.</li>
</ol>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpTree</span> </span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> Object data;</span><br><span class="line">		<span class="keyword">private</span> Node left;</span><br><span class="line">		<span class="keyword">private</span> Node right;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			data = <span class="keyword">null</span>;</span><br><span class="line">			left = <span class="keyword">null</span>;</span><br><span class="line">			right = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.data = data;</span><br><span class="line">			left = <span class="keyword">null</span>;</span><br><span class="line">			right = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">expressionTree</span><span class="params">(StringBuilder postFixExp, Node node)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> len = postFixExp.length();</span><br><span class="line">		<span class="keyword">char</span> token = postFixExp.charAt(len - <span class="number">1</span>);</span><br><span class="line">		postFixExp = postFixExp.deleteCharAt(len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span> (token) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">			node = <span class="keyword">new</span> Node(token);</span><br><span class="line">			<span class="comment">// Operator</span></span><br><span class="line">			expressionTree(postFixExp, node.right);</span><br><span class="line">			expressionTree(postFixExp, node.left);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="comment">// Operand</span></span><br><span class="line">			node = <span class="keyword">new</span> Node(token);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">evaluate</span><span class="params">(Node tree)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> left = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">double</span> right = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (tree == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">char</span> data = (<span class="keyword">char</span>) tree.data;</span><br><span class="line">		System.out.println(<span class="string">"char data : "</span> + data);</span><br><span class="line">		<span class="keyword">switch</span> (data) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">			left = evaluate(tree.left);</span><br><span class="line">			right = evaluate(tree.right);</span><br><span class="line">			<span class="keyword">if</span> (data == <span class="string">'+'</span>) &#123;</span><br><span class="line">				result = left + right;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">'-'</span>) &#123;</span><br><span class="line">				result = left - right;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">'*'</span>) &#123;</span><br><span class="line">				result = left * right;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="string">'/'</span>) &#123;</span><br><span class="line">				result = <span class="keyword">new</span> BigDecimal(left).divide(<span class="keyword">new</span> BigDecimal(right)).doubleValue();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			result = <span class="keyword">new</span> BigDecimal((<span class="keyword">char</span>) tree.data).doubleValue();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderPrint</span><span class="params">(Node tree)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (tree == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		postOrderPrint(tree.left);</span><br><span class="line">		postOrderPrint(tree.right);</span><br><span class="line">		System.out.print(tree.data);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderPrint</span><span class="params">(Node tree)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (tree == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.print(<span class="string">"("</span>);</span><br><span class="line">		inOrderPrint(tree.left);</span><br><span class="line">		System.out.print(tree.data);</span><br><span class="line">		inOrderPrint(tree.right);</span><br><span class="line">    System.out.print(<span class="string">")"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>트리</tag>
        <tag>Tree</tag>
        <tag>이진트리</tag>
        <tag>Expression Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>6-1. 이진트리(Binary Tree)</title>
    <url>/2020/06/17/6-1-binary-tree/</url>
    <content><![CDATA[<h1 id="Binary-Tree-이진트리"><a href="#Binary-Tree-이진트리" class="headerlink" title="Binary Tree(이진트리)"></a>Binary Tree(이진트리)</h1><ul>
<li><p>모든 노드가 최대 2개의 자식노드를 가질 수 있는 트리로 루트 노드를 중심으로 둘로 나뉘는 두 개의 서브 트리도 이진트리어야 하고 하위 트리도 이진트리로 구성되어 있다.</p>
</li>
<li><p>최대 노드의 차수는 2이므로 자식 노드가 아예 없거나 하나 또는 둘 뿐이다.</p>
</li>
</ul>
<h2 id="이진트리의-종류"><a href="#이진트리의-종류" class="headerlink" title="이진트리의 종류"></a>이진트리의 종류</h2><img src="/2020/06/17/6-1-binary-tree/binaryTree.png" class="" title="&lt;그림1: Binary Tree&gt;">
<ul>
<li><p>포화 이진 트리(Full Binary Tree) : 모든 레벨별로 노드가 꽉 찬 이진 트리를 말한다.</p>
</li>
<li><p>완전 이진 트리(Complete Binart Tree) : 포화 이진 트리를 이루기 전 단계의 트리로, 잎 노드들이 왼쪽부터 차곡차곡 채워진 이진 트리이며, 모든 노드에 자식 노드가 하나도 없거나 아니면 2개의 자식 노드를 갖는 이진 트리이다.</p>
</li>
<li><p>높이 균형 트리(Height Balanced Tree) : 왼쪽 하위 트리와 오른쪽 하위 트리의 높이가 1 이상 차이나지 않는 트리</p>
</li>
<li><p>완전 높이 균형 트리(Completely Height Balanced Tree) : 왼쪽 하위 트리와 오른쪽 하위 트리의 높이가 같은 트리</p>
</li>
</ul>
<h2 id="이진트리의-순회"><a href="#이진트리의-순회" class="headerlink" title="이진트리의 순회"></a>이진트리의 순회</h2><ul>
<li>트리 내 노드들 사이를 돌아다니는 것</li>
</ul>
<h3 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h3><img src="/2020/06/17/6-1-binary-tree/tree1.png" class="" title="&lt;그림2. Tree&gt;">
<ul>
<li><h4 id="전위순회-Preorder-Traversal"><a href="#전위순회-Preorder-Traversal" class="headerlink" title="전위순회 (Preorder Traversal)"></a>전위순회 (Preorder Traversal)</h4><ol>
<li><p>방문순서 : root-&gt;left-&gt;right</p>
</li>
<li><p>root node 부터 시작하여 아래로 내려오며, 왼쪽 하위 트리의 방문이 끝나면, 오른쪽 하위트리를 방문 하는 방식</p>
</li>
<li><p>순서 : <code>1-&gt;2-&gt;4-&gt;8-&gt;5-&gt;3-&gt;6-&gt;7</code></p>
</li>
<li><p><code>( 1( 2(4(8),5), 3( 6, 4) ))</code></p>
</li>
</ol>
</li>
<li><h4 id="중위순회-Inorder-Traversal"><a href="#중위순회-Inorder-Traversal" class="headerlink" title="중위순회 (Inorder Traversal)"></a>중위순회 (Inorder Traversal)</h4><ol>
<li><p>방문순서 : left-&gt;root-&gt;right</p>
</li>
<li><p>왼쪽 하위 트리부터 시작해서, 루트를 거쳐, 오른쪽 하위 트리를 방문</p>
</li>
<li><p>순서 : <code>8-&gt;4-&gt;2-&gt;5-&gt;1-&gt;6-&gt;3-&gt;7</code></p>
</li>
</ol>
</li>
<li><h4 id="후위순회-Postorder-Traversal"><a href="#후위순회-Postorder-Traversal" class="headerlink" title="후위순회 (Postorder Traversal)"></a>후위순회 (Postorder Traversal)</h4><ol>
<li><p>방문순서 : left-&gt;right-&gt;root</p>
</li>
<li><p>왼쪽 하위 트리부터 시작해서, 오른쪽 하위트리를 거쳐서, 루트를 방문</p>
</li>
<li><p>순서 : 8-&gt;4-&gt;5-&gt;2-&gt;6-&gt;7-&gt;3-&gt;1</p>
</li>
</ol>
</li>
</ul>
<h2 id="이진트리-구현"><a href="#이진트리-구현" class="headerlink" title="이진트리 구현"></a>이진트리 구현</h2><p>BinaryTree.h</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#ifndef BINARYTREE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BINARYTREE_H</span></span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">char</span> Element;</span><br><span class="line">typedef <span class="keyword">struct</span> _Node &#123;</span><br><span class="line">    <span class="keyword">struct</span> _Node* left;</span><br><span class="line">    <span class="keyword">struct</span> _Node* right;</span><br><span class="line">    Element data;</span><br><span class="line">&#125;TreeNode;</span><br><span class="line"></span><br><span class="line">TreeNode* createNode(Element element);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrderTree</span>(<span class="params">TreeNode* node</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrderTree</span>(<span class="params">TreeNode* node</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrderTree</span>(<span class="params">TreeNode* node</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> //BINARYTREE_H</span></span><br></pre></td></tr></table></figure>
<p>BinaryTree.c</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paik Seung Cheol on 2017. 9. 11..</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#include "BinaryTree.h"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TreeNode* createNode(Element element) &#123;</span><br><span class="line">    TreeNode* newNode = (TreeNode*)malloc((<span class="keyword">sizeof</span>(TreeNode)));</span><br><span class="line">    newNode-&gt;data = element;</span><br><span class="line">    newNode-&gt;left = NULL;</span><br><span class="line">    newNode-&gt;right = NULL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * left-&gt;root-&gt;right;</span></span><br><span class="line"><span class="comment"> * @param node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrderTree</span>(<span class="params">TreeNode* node</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == NULL)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    inOrderTree(node-&gt;left);</span><br><span class="line">    printf(<span class="string">"%c "</span>);</span><br><span class="line">    inOrderTree(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * root-&gt;left-&gt;right;</span></span><br><span class="line"><span class="comment"> * @param node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrderTree</span>(<span class="params">TreeNode* node</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == NULL)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    printf(<span class="string">"%c "</span>);</span><br><span class="line">    preOrderTree(node-&gt;left);</span><br><span class="line">    preOrderTree(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * left-&gt;right-&gt;root;</span></span><br><span class="line"><span class="comment"> * @param node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrderTree</span>(<span class="params">TreeNode* node</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == NULL)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    postOrderTree(node-&gt;left);</span><br><span class="line">    inOrderTree(node-&gt;right);</span><br><span class="line">    printf(<span class="string">"%c "</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    TreeNode* rootNode = createNode(<span class="string">'A'</span>);</span><br><span class="line">    TreeNode* BNode = createNode(<span class="string">'B'</span>);</span><br><span class="line">    TreeNode* CNode = createNode(<span class="string">'C'</span>);</span><br><span class="line">    TreeNode* DNode = createNode(<span class="string">'D'</span>);</span><br><span class="line">    TreeNode* ENode = createNode(<span class="string">'E'</span>);</span><br><span class="line">    TreeNode* FNode = createNode(<span class="string">'F'</span>);</span><br><span class="line">    TreeNode* GNode = createNode(<span class="string">'G'</span>);</span><br><span class="line"></span><br><span class="line">    rootNode-&gt;left = BNode;</span><br><span class="line">    rootNode-&gt;right = CNode;</span><br><span class="line">    BNode-&gt;left = DNode;</span><br><span class="line">    BNode-&gt;right = ENode;</span><br><span class="line">    CNode-&gt;left = FNode;</span><br><span class="line">    CNode-&gt;right = GNode;</span><br><span class="line"></span><br><span class="line">    printf(<span class="string">"InOrder : "</span>);</span><br><span class="line">    inOrderTree(rootNode);</span><br><span class="line">    printf(<span class="string">"\n"</span>);</span><br><span class="line">    printf(<span class="string">"PreOrder : "</span>);</span><br><span class="line">    preOrderTree(rootNode);</span><br><span class="line">    printf(<span class="string">"\n"</span>);</span><br><span class="line">    printf(<span class="string">"PostOrder : "</span>);</span><br><span class="line">    postOrderTree(rootNode);</span><br><span class="line">    printf(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>트리</tag>
        <tag>Tree</tag>
        <tag>이진트리</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>6. 트리(Tree)</title>
    <url>/2020/06/17/6-Tree/</url>
    <content><![CDATA[<h1 id="Tree-트리"><a href="#Tree-트리" class="headerlink" title="Tree(트리)"></a>Tree(트리)</h1><ul>
<li><p>나무와 유사하게 비선형(데이터가 계층적 구조로 이루어짐) 구조로 이루어져 있는 자료구조</p>
</li>
<li><p>트리는 다른 자료구조보다 자료를 저장하거나 검색하는 방법이 간단하고 메모리를 효율적으로 사용할 수 있다.</p>
</li>
</ul>
<h2 id="구성"><a href="#구성" class="headerlink" title="구성"></a>구성</h2><ul>
<li><p>트리는 크게 Root(뿌리), Branch(가지),leaf(잎) 세 가지 요소로 이루어짐</p>
</li>
<li><p>Root : 트리 구조에서 최상위에 존재하는 노드이다.</p>
</li>
<li><p>Branch : Root Node or Sub Tree 와 leaf 사이에 있는 노드를 말한다(자식). </p>
</li>
<li><p>Leaf(Terminal Node) : Branch Node의 맨 끝에 달려있는 노드로, 밑으로 또 다른 노드가 연결되어 있지 않은 노드를 말한다(Terminal(단말)노드).</p>
</li>
<li><p>Node : 트리의 구성요소에 해당하는 요소를 말한다.</p>
</li>
<li><p>Edge : 노드와 노드를 연결하는 연결선이다.</p>
</li>
<li><p>Sub-Tree : 큰 트리(전체)에 속하는 작은 트리</p>
</li>
<li><p>Level(Depth) : 루트노드에서 해당 노드까지 경로의 길이로 트리에서 각 층별로 숫자를 매김</p>
</li>
<li><p>Height : 트리의 최고 레벨 (3)</p>
</li>
<li><p>Length : 출발 노드에서 목적 노드까지 거쳐야하는 노드의 개수</p>
</li>
<li><p>Degree(차수) : 해당 노드의 자식노드 개수를 말한다.</p>
</li>
</ul>
<h2 id="트리의-표현"><a href="#트리의-표현" class="headerlink" title="트리의 표현"></a>트리의 표현</h2><ol>
<li><p>중첩된 괄호(Nested Parenthesis) : 같은 레벨의 노드를 괄호로 묶어 표현</p>
</li>
<li><p>중첩된 집합(Nested Set) : 트리를 집합관계로 표현</p>
</li>
<li><p>들여쓰기(Indentation) : 들여쓰기로 표현된 트리</p>
</li>
</ol>
<h2 id="노드-표현"><a href="#노드-표현" class="headerlink" title="노드 표현"></a>노드 표현</h2><p>부모와 자식, 형제노드를 서로 연결짓는 방법</p>
<ol>
<li><p>N-Link(N-링크 표현법) : 노드의 차수가 N개라면 노드가 N개의 링크를 가지고 있어서 이 링크들이 각각 자식 노드를 가리키도록 노드를 구성하는 방법(단점, 차수가 노드마다 달라지는 트리에서는 적용하기 어렵고 복잡한 트리를 만들게됨)</p>
</li>
<li><p>Left Child-Right Sibling(왼쪽 자식, 오른쪽 형제 표현법) : N개의 차수를 가진 노드의 표현이 2개의 포인터(링크), 왼쪽-오른쪽 형제만 가진다.</p>
</li>
</ol>
<h2 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h2><ul>
<li>노드의 선언</li>
</ul>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">typedef <span class="keyword">struct</span> _Node &#123;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> _Node *left;</span><br><span class="line">    <span class="keyword">struct</span> _Node *right;</span><br><span class="line">&#125;TreeNode;</span><br></pre></td></tr></table></figure>
<ul>
<li>노드의 생성</li>
</ul>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">TreeNode* createNode(<span class="keyword">int</span> data) &#123;</span><br><span class="line">  TreeNode newNode = (TreeNode*)malloc(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line">  newNode-&gt;left = NULL;</span><br><span class="line">  newNode-&gt;right = NULL;</span><br><span class="line">  newNode-&gt;data = data;</span><br><span class="line">  <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>트리 연결</li>
</ul>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChildNode</span>(<span class="params">TreeNode* parent, TreeNode* child</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (parent-&gt;left == NULL) &#123;</span><br><span class="line">    parent-&gt;left = child;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    TreeNode* tmpNode = parent-&gt;left;</span><br><span class="line">    <span class="keyword">while</span>(tmpNode-&gt;right != <span class="literal">null</span>) &#123;</span><br><span class="line">      tmpNode = tmpNode-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    tmpNode-&gt;right = child;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>트리 출력</li>
</ul>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTree</span>(<span class="params">TreeNode* node, <span class="keyword">int</span> depth</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;depth; i++) &#123;</span><br><span class="line">    printf(<span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  printf(<span class="string">"%d\n"</span>, node-&gt;data);</span><br><span class="line">  <span class="keyword">if</span> (node-&gt;left != NULL) &#123;</span><br><span class="line">    printTree(node-&gt;left, depth+<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (node-&gt;right != NULL) &#123;</span><br><span class="line">    printTree(node-&gt;right, depth+<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>트리</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>[BeakJoon 2309] 일곱 난쟁이</title>
    <url>/2020/06/10/BeakJoon-2309-dwarfOf7/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>왕비를 피해 일곱 난쟁이들과 함께 평화롭게 생활하고 있던 백설공주에게 위기가 찾아왔다. 일과를 마치고 돌아온 난쟁이가 일곱 명이 아닌 아홉 명이었던 것이다.</p>
<p>아홉 명의 난쟁이는 모두 자신이 “백설 공주와 일곱 난쟁이”의 주인공이라고 주장했다. 뛰어난 수학적 직관력을 가지고 있던 백설공주는, 다행스럽게도 일곱 난쟁이의 키의 합이 100이 됨을 기억해 냈다.</p>
<p>아홉 난쟁이의 키가 주어졌을 때, 백설공주를 도와 일곱 난쟁이를 찾는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>아홉 개의 줄에 걸쳐 난쟁이들의 키가 주어진다. 주어지는 키는 100을 넘지 않는 자연수이며, 아홉 난쟁이의 키는 모두 다르며, 가능한 정답이 여러 가지인 경우에는 아무거나 출력한다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>일곱 난쟁이의 키를 오름차순으로 출력한다. 일곱 난쟁이를 찾을 수 없는 경우는 없다.</p>
<h3 id="예제-입력"><a href="#예제-입력" class="headerlink" title="예제 입력"></a>예제 입력</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20</span><br><span class="line">7</span><br><span class="line">23</span><br><span class="line">19</span><br><span class="line">10</span><br><span class="line">15</span><br><span class="line">25</span><br><span class="line">8</span><br><span class="line">13</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력"><a href="#예제-출력" class="headerlink" title="예제 출력"></a>예제 출력</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">8</span><br><span class="line">10</span><br><span class="line">13</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">23</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>7 난쟁이 키의 합이 100이므로</p>
<p>9명의 난쟁이 합을 구하여 2명의 키 값을 뺀 값이 100이면 두 난쟁이를 -1로 처리</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            a[i] = scan.nextInt();</span><br><span class="line">            sum += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] result = dwarfOf7(a, sum);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(result);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> ;i &lt;result.length; i++) &#123;</span><br><span class="line">            System.out.println(result[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] dwarfOf7(<span class="keyword">int</span> a[], <span class="keyword">int</span> sum) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span> ; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sum - (a[i] + a[j]) == <span class="number">100</span>) &#123;</span><br><span class="line">                    a[i] = a[j] = -<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>부르트포스</tag>
        <tag>Brute Force</tag>
      </tags>
  </entry>
  <entry>
    <title>[BeakJoon 1912] 연속합</title>
    <url>/2020/06/10/BeakJoon-1912-continuitySum/</url>
    <content><![CDATA[<h1 id="연속합"><a href="#연속합" class="headerlink" title="연속합"></a>연속합</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>n개의 정수로 이루어진 임의의 수열이 주어진다. 우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다. 단, 수는 한 개 이상 선택해야 한다.</p>
<p>예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자. 여기서 정답은 12+21인 33이 정답이 된다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 정수 n(1 ≤ n ≤ 100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다. 수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 답을 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">10 -4 3 1 5 6 -35 12 21 -1</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">33</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">2 1 -4 3 4 -4 6 5 -5 1</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-3"><a href="#예제-입력-3" class="headerlink" title="예제 입력 3"></a>예제 입력 3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">-1 -2 -3 -4 -5</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-3"><a href="#예제-출력-3" class="headerlink" title="예제 출력 3"></a>예제 출력 3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> t = Integer.parseInt(in.readLine());</span><br><span class="line">        </span><br><span class="line">        String[] split = in.readLine().split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[t];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">            a[i] = Integer.parseInt(split[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="string">""</span> + continuitySum(a));</span><br><span class="line">        out.flush();</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">continuitySum</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span>[] dp = <span class="keyword">new</span> <span class="keyword">long</span>[a.length];</span><br><span class="line">        <span class="keyword">long</span> result = dp[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>] + a[i], a[i]);</span><br><span class="line">            <span class="keyword">if</span> (result &lt; dp[i]) &#123;</span><br><span class="line">                result = dp[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>다이나믹프로그래밍</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-15990] 1,2,3 더하기 5</title>
    <url>/2020/06/10/BeakJoon-15990-123plus5/</url>
    <content><![CDATA[<h1 id="1-2-3-더하기-5"><a href="#1-2-3-더하기-5" class="headerlink" title="1,2,3 더하기 5"></a>1,2,3 더하기 5</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>정수 4를 1, 2, 3의 합으로 나타내는 방법은 총 3가지가 있다. 합을 나타낼 때는 수를 1개 이상 사용해야 한다. 단, 같은 수를 두 번 이상 연속해서 사용하면 안 된다.</p>
<ul>
<li>1+2+1</li>
<li>1+3</li>
<li>3+1</li>
</ul>
<p>정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, 정수 n이 주어진다. n은 양수이며 100,000보다 작거나 같다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>각 테스트 케이스마다, n을 1, 2, 3의 합으로 나타내는 방법의 수를 1,000,000,009로 나눈 나머지를 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">9</span><br><span class="line">27</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MOD = <span class="number">1000000009L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LENGTH = <span class="number">100000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> t = Integer.parseInt(in.readLine());</span><br><span class="line">        <span class="keyword">long</span>[][] dp = plus123_5();</span><br><span class="line">        <span class="keyword">while</span> (t-- != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = Integer.parseInt(in.readLine());</span><br><span class="line">            out.write(<span class="string">""</span> + (dp[n][<span class="number">1</span>] + dp[n][<span class="number">2</span>] + dp[n][<span class="number">3</span>]) % MOD);</span><br><span class="line">            out.write(<span class="string">"\n"</span>);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span>[][] plus123_5() &#123;</span><br><span class="line">        <span class="keyword">long</span>[][] dp = <span class="keyword">new</span> <span class="keyword">long</span>[LENGTH + <span class="number">1</span>][<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= LENGTH; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = (i == <span class="number">1</span>) ? <span class="number">1</span> : (dp[i-<span class="number">1</span>][<span class="number">2</span>] + dp[i-<span class="number">1</span>][<span class="number">3</span>]) % MOD;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">2</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][<span class="number">2</span>] = (i == <span class="number">2</span>) ? <span class="number">1</span> : (dp[i-<span class="number">2</span>][<span class="number">1</span>] + dp[i-<span class="number">2</span>][<span class="number">3</span>]) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">3</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][<span class="number">3</span>] = (i == <span class="number">3</span>) ? <span class="number">1</span> : (dp[i-<span class="number">3</span>][<span class="number">1</span>] + dp[i-<span class="number">3</span>][<span class="number">2</span>]) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>다이나믹프로그래밍</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>[Baekjoon-10844] 쉬운 계단 수</title>
    <url>/2020/05/01/Baekjoon-10844-easyStairNumber/</url>
    <content><![CDATA[<h1 id="쉬운-계단-수"><a href="#쉬운-계단-수" class="headerlink" title="쉬운 계단 수"></a>쉬운 계단 수</h1><h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><p>45656이란 수를 보자.</p>
<p>이 수는 인접한 모든 자리수의 차이가 1이 난다. 이런 수를 계단 수라고 한다.</p>
<p>세준이는 수의 길이가 N인 계단 수가 몇 개 있는지 궁금해졌다.</p>
<p>N이 주어질 때, 길이가 N인 계단 수가 총 몇 개 있는지 구하는 프로그램을 작성하시오. (0으로 시작하는 수는 없다.)</p>
<h1 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h1><p>첫째 줄에 N이 주어진다. N은 1보다 크거나 같고, 100보다 작거나 같은 자연수이다.</p>
<h1 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h1><p>첫째 줄에 정답을 1,000,000,000으로 나눈 나머지를 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">17</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><ul>
<li>인접 한 자리의 차이 1 이 나는 걸 계단 수라고 함</li>
<li>45656</li>
<li>길이가 N인 계단 수를 개수를 구하는 문제</li>
</ul>
<p>Dp[N][L]의 길이가 N인 계단 수</p>
<p>마지막 수 L 는 <code>L + 1</code> or <code>L - 1</code></p>
<p>즉 DP[i][j] 는 길이가 i이인 마지막 수가 j인 계단수의 개수</p>
<ul>
<li><code>Dp[i][j] = Dp[i-1][j-1] + Dp[i-1][j+1]</code></li>
</ul>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(in.readLine());</span><br><span class="line">        out.write(<span class="string">""</span> + easyStair(n));</span><br><span class="line">        out.write(<span class="string">"\n"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">easyStair</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> mod = <span class="number">1000000000L</span>;</span><br><span class="line">        <span class="keyword">long</span>[][] dp = <span class="keyword">new</span> <span class="keyword">long</span>[n + <span class="number">1</span>][<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; j++) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] += dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">                    dp[i][j] += dp[i - <span class="number">1</span>][j + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j] %= mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> solv = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=<span class="number">9</span>; i++) &#123;</span><br><span class="line">            solv += dp[n][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> solv %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>다이나믹프로그래밍</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-11052] 카드 구매하기</title>
    <url>/2020/05/01/BaekJoon-11052-buyOfcard/</url>
    <content><![CDATA[<h1 id="카드-구매하기"><a href="#카드-구매하기" class="headerlink" title="카드 구매하기"></a>카드 구매하기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>요즘 민규네 동네에서는 스타트링크에서 만든 PS카드를 모으는 것이 유행이다.</p>
<p>PS카드는 PS(Problem Solving)분야에서 유명한 사람들의 아이디와 얼굴이 적혀있는 카드이다. 각각의 카드에는 등급을 나타내는 색이 칠해져 있고, 다음과 같이 8가지가 있다.</p>
<p>전설카드<br>레드카드<br>오렌지카드<br>퍼플카드<br>블루카드<br>청록카드<br>그린카드<br>그레이카드  </p>
<p>카드는 카드팩의 형태로만 구매할 수 있고, 카드팩의 종류는 카드 1개가 포함된 카드팩, 카드 2개가 포함된 카드팩, … 카드 N개가 포함된 카드팩과 같이 총 N가지가 존재한다.</p>
<p>민규는 카드의 개수가 적은 팩이더라도 가격이 비싸면 높은 등급의 카드가 많이 들어있을 것이라는 미신을 믿고 있다. 따라서, 민규는 돈을 최대한 많이 지불해서 카드 N개 구매하려고 한다. 카드가 i개 포함된 카드팩의 가격은 Pi원이다.</p>
<p>예를 들어, 카드팩이 총 4가지 종류가 있고, P1 = 1, P2 = 5, P3 = 6, P4 = 7인 경우에 민규가 카드 4개를 갖기 위해 지불해야 하는 금액의 최댓값은 10원이다. 2개 들어있는 카드팩을 2번 사면 된다.</p>
<p>P1 = 5, P2 = 2, P3 = 8, P4 = 10인 경우에는 카드가 1개 들어있는 카드팩을 4번 사면 20원이고, 이 경우가 민규가 지불해야 하는 금액의 최댓값이다.</p>
<p>마지막으로, P1 = 3, P2 = 5, P3 = 15, P4 = 16인 경우에는 3개 들어있는 카드팩과 1개 들어있는 카드팩을 구매해 18원을 지불하는 것이 최댓값이다.</p>
<p>카드 팩의 가격이 주어졌을 때, N개의 카드를 구매하기 위해 민규가 지불해야 하는 금액의 최댓값을 구하는 프로그램을 작성하시오. N개보다 많은 개수의 카드를 산 다음, 나머지 카드를 버려서 N개를 만드는 것은 불가능하다. 즉, 구매한 카드팩에 포함되어 있는 카드 개수의 합은 N과 같아야 한다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 민규가 구매하려고 하는 카드의 개수 N이 주어진다. (1 ≤ N ≤ 1,000)</p>
<p>둘째 줄에는 Pi가 P1부터 PN까지 순서대로 주어진다. (1 ≤ Pi ≤ 10,000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 민규가 카드 N개를 갖기 위해 지불해야 하는 금액의 최댓값을 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 5 6 7</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">10 9 8 7 6</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">50</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-3"><a href="#예제-입력-3" class="headerlink" title="예제 입력 3"></a>예제 입력 3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">1 1 2 3 5 8 13 21 34 55</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-3"><a href="#예제-출력-3" class="headerlink" title="예제 출력 3"></a>예제 출력 3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">55</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-4"><a href="#예제-입력-4" class="headerlink" title="예제 입력 4"></a>예제 입력 4</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">5 10 11 12 13 30 35 40 45 47</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-4"><a href="#예제-출력-4" class="headerlink" title="예제 출력 4"></a>예제 출력 4</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">50</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-5"><a href="#예제-입력-5" class="headerlink" title="예제 입력 5"></a>예제 입력 5</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">5 2 8 10</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-5"><a href="#예제-출력-5" class="headerlink" title="예제 출력 5"></a>예제 출력 5</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-6"><a href="#예제-입력-6" class="headerlink" title="예제 입력 6"></a>예제 입력 6</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">3 5 15 16</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-6"><a href="#예제-출력-6" class="headerlink" title="예제 출력 6"></a>예제 출력 6</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(in.readLine());</span><br><span class="line">        String[] ar = in.readLine().split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">int</span>[] p = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            p[i] = Integer.parseInt(ar[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="string">""</span> + cardBuy(p, n));</span><br><span class="line">        out.write(<span class="string">"\n"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cardBuy</span><span class="params">(<span class="keyword">int</span>[] p, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                dp[i] = Math.max(dp[i], dp[i - j] + p[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 카드구매하기 2</span></span><br><span class="line">    <span class="comment">//https://www.acmicpc.net/problem/16194</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cardBuy2</span><span class="params">(<span class="keyword">int</span>[] p, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[i] == -<span class="number">1</span> || dp[i] &gt; dp[i-j] + p[j]) &#123;</span><br><span class="line">                    dp[i] = dp[i-j] + p[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>다이나믹프로그래밍</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-9095]-123 더하기</title>
    <url>/2020/05/01/BaekJoon-9095-123plus/</url>
    <content><![CDATA[<h1 id="1-2-3-더하기"><a href="#1-2-3-더하기" class="headerlink" title="1,2,3 더하기"></a>1,2,3 더하기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>정수 4를 1,2,3의 조합으로 나타내는 방법은 총 7가지가 있다.</p>
<ul>
<li>1+1+1+1</li>
<li>1+1+2</li>
<li>1+2+1</li>
<li>2+1+1</li>
<li>2+2</li>
<li>1+3</li>
<li>3+1</li>
</ul>
<p>정수 N이 주어졌을 때, N을, 1,2,3합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫쨰 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, 정수 n이 주어진다. n은 양수이며 11보다 작다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>각 테스트 케이스마다, n을 1,2,3의 합으로 나타내는 방법의 수를 출력한다.</p>
<h3 id="예제입력"><a href="#예제입력" class="headerlink" title="예제입력"></a>예제입력</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3  </span><br><span class="line">4  </span><br><span class="line">7  </span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<h3 id="예제출력"><a href="#예제출력" class="headerlink" title="예제출력"></a>예제출력</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7  </span><br><span class="line">44  </span><br><span class="line">274</span><br></pre></td></tr></table></figure>
<p>점화식</p>
<p>1의 조합일 때</p>
<p><code>N-1 + 1 = N</code></p>
<p>2의 조합일 때</p>
<p><code>N-2 + 2 = N</code></p>
<p>3의 조합일 때</p>
<p><code>N-3 + 3 = N</code></p>
<p><code>D[N] = D[n-1] + D[n-2] + D[n-3]</code></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> t = Integer.parseInt(in.readLine());</span><br><span class="line">        <span class="keyword">while</span>(t-- != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = Integer.parseInt(in.readLine());</span><br><span class="line">            out.write(<span class="string">""</span> + plus123(n));</span><br><span class="line">            out.write(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">plus123</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span> &amp;&amp; i - j &gt;= <span class="number">0</span>; j++) &#123;</span><br><span class="line">                    dp[i] += dp[i - j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>다이나믹프로그래밍</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-11727]-2xN 타일링 2</title>
    <url>/2020/04/28/BaekJoon-11727-tileOf2xN2/</url>
    <content><![CDATA[<h1 id="2xn-타일링-2"><a href="#2xn-타일링-2" class="headerlink" title="2xn 타일링 2"></a>2xn 타일링 2</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>2×n 직사각형을 2×1과 2×2 타일로 채우는 방법의 수를 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 n이 주어진다. (1 ≤ n ≤ 1,000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 2×n 크기의 직사각형을 채우는 방법의 수를 10,007로 나눈 나머지를 출력한다.</p>
<h3 id="입력-2-gt-출력-3"><a href="#입력-2-gt-출력-3" class="headerlink" title="입력 2 -&gt; 출력 3"></a>입력 2 -&gt; 출력 3</h3><h3 id="입력-8-gt-출력-171"><a href="#입력-8-gt-출력-171" class="headerlink" title="입력 8 -&gt; 출력 171"></a>입력 8 -&gt; 출력 171</h3><h3 id="입력-12-gt-출력-2731"><a href="#입력-12-gt-출력-2731" class="headerlink" title="입력 12 -&gt; 출력 2731"></a>입력 12 -&gt; 출력 2731</h3><h2 id="점화식"><a href="#점화식" class="headerlink" title="점화식"></a>점화식</h2><ul>
<li>2xn 직사각형을 1x2, 2x2, 2x1 타일로 채우는 방법의 수</li>
</ul>
<p>d[i] = 2x i직사각형을 채워야함</p>
<p>조건 1</p>
<p>2 x 1인 블록을 N 번재 위치에 놓으면</p>
<p>2 X (n-1) 만큼 나머지를 채워야함</p>
<p>조건 2</p>
<p>2 x 2 블록을 N 번째 위치에 놓으면</p>
<p>2 X (n-2) 만큼 나머지를 채워야함</p>
<p>조건 3</p>
<p>1 x 2 블록을 N 번째 위치에 놓으면</p>
<p>2 X (n-2) 만큼 나머지를 채워야함</p>
<p>그래서 점화식</p>
<p>Dp[N] = Dp[n-1] + (2 * Dp[N-2])</p>
<p>이된다.</p>
<p>코드</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(in.readLine());</span><br><span class="line">        out.write(<span class="string">""</span> + tileOf2xn2(n));</span><br><span class="line">        out.write(<span class="string">"\n"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tileOf2xn2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = (dp[i-<span class="number">1</span>] + (<span class="number">2</span>*dp[i-<span class="number">2</span>])) % <span class="number">10007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-11726]-2xN 타일링</title>
    <url>/2020/04/28/BaekJoon-11726-tileOf2xN/</url>
    <content><![CDATA[<h1 id="2xN-타일링"><a href="#2xN-타일링" class="headerlink" title="2xN 타일링"></a>2xN 타일링</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>2xn 크기의 직사각형을 1x2, 2x1 타일로 채우는 방법의 수를 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 n이 주어진다 ( 1&lt;= n &lt;= 1000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 2xn 크기의 직사각형을 채우는 방법의 수를 10007로 나눈 나머지를 출력</p>
<h2 id="점화식"><a href="#점화식" class="headerlink" title="점화식"></a>점화식</h2><p>조건 1 : N 번째 위치에 2x1타일이 들어가면</p>
<p>N번째 위치에 2x1 타일 한 개를 넣을 수 있으므로</p>
<p><strong>Dp(N-1)</strong></p>
<p>조건 2 : N 번째 위치에 1x2 타일이 들어가면</p>
<p>끝에 1x2 를 두개 넣을 수 있으므로</p>
<p><strong>Dp(N-2)</strong></p>
<p><code>Dp(N) = Dp[N-1] + Dp[N-2]</code></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(in.readLine());</span><br><span class="line">        out.write(<span class="string">""</span> + tileOf2xn(n));</span><br><span class="line">        out.write(<span class="string">"\n"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tileOf2xn</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = (dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>]) % <span class="number">10007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-1463] 1로 만들기</title>
    <url>/2020/04/28/BaekJoon-1463-makeinone/</url>
    <content><![CDATA[<h1 id="1로-만들기"><a href="#1로-만들기" class="headerlink" title="1로 만들기"></a>1로 만들기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.</p>
<p>X가 3으로 나누어 떨어지면, 3으로 나눈다.<br>X가 2로 나누어 떨어지면, 2로 나눈다.<br>1을 뺀다.<br>정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 1보다 크거나 같고, 106보다 작거나 같은 정수 N이 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<h2 id="힌트"><a href="#힌트" class="headerlink" title="힌트"></a>힌트</h2><p>10의 경우에 10 -&gt; 9 -&gt; 3 -&gt; 1 로 3번 만에 만들 수 있다.</p>
<h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p><strong>Table[i] = i 로 만드는데 최소 횟수</strong></p>
<ul>
<li><p>i가 3으로 나누어 떨어질경우 : <code>Table[i / 3] + 1</code></p>
</li>
<li><p>i가 2으로 나누어 떨어질경우 : <code>Table[i / 2] + 1</code></p>
</li>
<li>i가 1을 뺄 경우 : <code>Table[i - 1] + 1</code></li>
</ul>
<p>최솟값을 구하는 것으로</p>
<p><code>table[i] = Min(Table[i/3], Table[i/2], Table[i-1])+1</code></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(in.readLine());</span><br><span class="line">        out.write(<span class="string">""</span> + makeItOne(n));</span><br><span class="line">        out.write(<span class="string">"\n"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeItOne</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] table = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        table[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            table[i] = table[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; table[i] &gt; table[i / <span class="number">2</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">                table[i] = table[n / <span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; table[i] &gt; table[i / <span class="number">3</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">                table[i] = table[n / <span class="number">3</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> table[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//짧은 코드</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeItOne2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = Math.min(dp[i / <span class="number">2</span>] + (i % <span class="number">2</span>), dp[i / <span class="number">3</span>] + (i % <span class="number">3</span>)) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>다이나믹프로그래밍</tag>
        <tag>Dynamic Programming</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>5. 다이나믹 프로그래밍(Dynamic Programming)</title>
    <url>/2020/04/28/5-Dynamic-Programming/</url>
    <content><![CDATA[<h1 id="Dynamic-Programming-동적계획법"><a href="#Dynamic-Programming-동적계획법" class="headerlink" title="Dynamic Programming(동적계획법)"></a>Dynamic Programming(동적계획법)</h1><ul>
<li>풀고자하는 문제가 여러단계의 반복되는 부분문제로 이루어졌을 때 각 단계 있는 부분 문제의 답을 기반으로 전체 문제의 답을 구하는 방법</li>
<li>문제를 부분 문제로 단계적으로 나누고, 가장 작은 부분 문제의 답부터 구해 올라오면서 전체 문제의 해를 구하는 것. 즉, 큰 문제를 작은문제로 나눠서 푸는 것</li>
<li>계획법(Programming)이란 용어는 코딩(cooding)이 아니라 테이블을 채운다는 문자적 의미(선형 계획법과 유사)</li>
</ul>
<h2 id="동적계획법-전략"><a href="#동적계획법-전략" class="headerlink" title="동적계획법 전략"></a>동적계획법 전략</h2><ul>
<li>동적 계획법과 메모하기는 함께 동작</li>
<li>메모하기(이미 푼부속문제들의 테이블)를 이용하는 방법으로 많은 문제에서 지수적 복잡도를 다항적 복잡도로 감소시킬 수 있다.</li>
</ul>
<h2 id="주요-요소"><a href="#주요-요소" class="headerlink" title="주요 요소"></a>주요 요소</h2><ul>
<li>재귀 : 부속 문제들을 재귀적으로 푼다.</li>
<li>메모하기 : 이미 계산된 값들을 테이블에 저장(메모하기는 Cashing(캐싱)을 뜻함)</li>
<li>동적계획법 = 재귀 + 메모하기</li>
</ul>
<h2 id="분할정복과-동적계획법-차이"><a href="#분할정복과-동적계획법-차이" class="headerlink" title="분할정복과 동적계획법 차이"></a>분할정복과 동적계획법 차이</h2><div class="table-container">
<table>
<thead>
<tr>
<th>분할정복</th>
<th>동적계획법</th>
</tr>
</thead>
<tbody>
<tr>
<td>분할정복은 위에서 아래로 쪼갬(Top-down)</td>
<td>제일 작은 부분 문제부터 상위에 있는 문제로 풀어올라감(Bottom Up)</td>
</tr>
<tr>
<td>분할 정복으로 쪼갠 각 부분 문제는 완전히 새로운 하나의 문제로 다룸(부분문제들이 독립적)</td>
<td>문제의 각 단계에 있는 부분 문제들은 그 이전 단계에 있는 문제들의 답에 의존(부속 문제들이 겹침)</td>
</tr>
<tr>
<td>한번 푼적이 있는 부분문제의 답은 다시 품</td>
<td>한번 푼적이 있는 부분문제의 답은 다시푸는 일이 없도록 테이블등에 저장</td>
</tr>
</tbody>
</table>
</div>
<h2 id="전략속성"><a href="#전략속성" class="headerlink" title="전략속성"></a>전략속성</h2><h3 id="최적-부속-구조-Optimal-Substructure-문제의-정답을-작은-문제의-정답에서-구할-수-있다-ex-서울에서-부산까지-가는-가장-빠른-길이-대전과-대구를-순서대로-거쳐야-한다면-대전에서-부산을-가는-가장-빠른-길은-대구를-거쳐야한다"><a href="#최적-부속-구조-Optimal-Substructure-문제의-정답을-작은-문제의-정답에서-구할-수-있다-ex-서울에서-부산까지-가는-가장-빠른-길이-대전과-대구를-순서대로-거쳐야-한다면-대전에서-부산을-가는-가장-빠른-길은-대구를-거쳐야한다" class="headerlink" title="최적 부속 구조(Optimal Substructure): 문제의 정답을 작은 문제의 정답에서 구할 수 있다. ex) 서울에서 부산까지 가는 가장 빠른 길이 대전과 대구를 순서대로 거쳐야 한다면 대전에서 부산을 가는 가장 빠른 길은 대구를 거쳐야한다."></a><strong>최적 부속 구조(Optimal Substructure)</strong>: 문제의 정답을 작은 문제의 정답에서 구할 수 있다. ex) 서울에서 부산까지 가는 가장 빠른 길이 대전과 대구를 순서대로 거쳐야 한다면 대전에서 부산을 가는 가장 빠른 길은 대구를 거쳐야한다.</h3><h3 id="겹치는-부속-문제-Overlapping-Subproblems-여러-번-반복되는-몇-가지-부속문제들을-포함하는-재귀적-해법"><a href="#겹치는-부속-문제-Overlapping-Subproblems-여러-번-반복되는-몇-가지-부속문제들을-포함하는-재귀적-해법" class="headerlink" title="겹치는 부속 문제(Overlapping Subproblems) : 여러 번 반복되는 몇 가지 부속문제들을 포함하는 재귀적 해법."></a><strong>겹치는 부속 문제(Overlapping Subproblems)</strong> : 여러 번 반복되는 몇 가지 부속문제들을 포함하는 재귀적 해법.</h3><pre><code>-    큰 문제와 작은 문제를 같은 방법으로 풀 수 있다.
-    문제를 작은 문제로 쪼갤 수 있다.
</code></pre><h2 id="동작-방식"><a href="#동작-방식" class="headerlink" title="동작 방식"></a>동작 방식</h2><ol>
<li>문제를 부분문제로 나눔</li>
<li>가장 작은 부분문제로부터 해를 구한 뒤 테이블에 저장</li>
<li>테이블에 저장되어 있는 부분문제의 해를 이용하여 점차적으로 상위 부분 문제의 최적해를 구한다.</li>
</ol>
<h2 id="동적-계획법으로-설계된-피보니치-수"><a href="#동적-계획법으로-설계된-피보니치-수" class="headerlink" title="동적 계획법으로 설계된 피보니치 수"></a>동적 계획법으로 설계된 피보니치 수</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">fibonacci2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">long</span>[] table = <span class="keyword">new</span> <span class="keyword">long</span>[n + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br><span class="line">  table[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  table[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    table[i] = table[i - <span class="number">1</span>] + table[i - <span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  result = table[n];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="최장-공통-부분-순서-Longer-Common-SubSequence-LCS"><a href="#최장-공통-부분-순서-Longer-Common-SubSequence-LCS" class="headerlink" title="최장 공통 부분 순서(Longer Common SubSequence : LCS)"></a>최장 공통 부분 순서(Longer Common SubSequence : LCS)</h2><ul>
<li><p>두 수열의 가장 긴 공통 부분 수열을 찾아내는 문제.</p>
<ol>
<li><p>X, Y 두 수열 마지막이 공통 부분 수열인 경우</p>
<ul>
<li>LCS(Xi-1, Yj-1) + 1, Xi = Yj</li>
<li>X와 Y의 문자가 같다(X[i] == Y[j])</li>
<li>X와 Y의 LCS의 길이는 마지막 문자를 하나 줄인 수열 X와 마지막을 하나 줄인 수열 Y간의 LCS에 공통 문자의 길이 1을 추가한 것과 같다.</li>
<li>일반화 하면, 마지막 index가 각각 i, j일 경우 X[i] == Y[j]이면 LCS[i][j] = LCS[i-1][j-1] + 1이다.</li>
</ul>
</li>
<li><p>수열 X 마지막이 공통 부분 수열에 속하지 않는 경우</p>
<ul>
<li>LCS(Xi-1,Yj) &gt; LCS(Xi, Yj-1)</li>
<li>X와 Y의 문자가 다르다(X[i] != Y[j])</li>
<li>X와 Y의 LCS는 마지막 문자를 하나 줄인 수열 X와 수열 Y간의 LCS와 동일하다.</li>
<li>일반화 : LCS[i][j] = LCS[i-1][j]이다.</li>
</ul>
</li>
<li><p>수열 Y 마지막이 공통 부분 수열에 속하지 않는 경우</p>
<ul>
<li>LCS(Xi-1, Yj) &lt; LCS(Xi,Yj-1)</li>
<li>X와 Y의 문자가 다르다(X[i] != Y[j])</li>
<li>X와 Y의 LCS는 수열 X와 마지막 문자를 하나 줄인 수열 Y간의 LCS와 동일하다.</li>
<li>일반화 : LCS[i][j] = LCS[i][j-1]이다.</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><ol>
<li>문제를 부분문제로 나눈다.</li>
<li>가장 작은 부분문제부터 해를 구하고 뒤 테이블에 저장</li>
<li>테이블에 저장되어 있는 부분문제의 해를 이용하여 점차적으로 상위 부분 문제의 최적해를 구한다.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">LCS</span><span class="params">(String X, String Y, <span class="keyword">int</span>[][] table)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; X.length(); i++) &#123;</span><br><span class="line">    table[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Y.length(); j++) &#123;</span><br><span class="line">    table[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= X.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= Y.length(); j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (X.charAt(i-<span class="number">1</span>) == Y.charAt(j-<span class="number">1</span>)) &#123;</span><br><span class="line">          table[i][j] = table[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          table[i][j] = table[i-<span class="number">1</span>][j] &gt;  table[i][j-<span class="number">1</span>] ? table[i-<span class="number">1</span>][j] : table[i][j-<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> table[X.length()-<span class="number">1</span>][Y.length()-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LCS_TraceBack</span><span class="params">(String x, String y,<span class="keyword">int</span> i, <span class="keyword">int</span> j,  <span class="keyword">int</span>[][] table, String lcs)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">0</span>  || j == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (table[i][j] &gt; table[i][j-<span class="number">1</span>] &amp;&amp; table[i][j] &gt; table[i-<span class="number">1</span>][j] &amp;&amp; table[i][j] &gt; table[i-<span class="number">1</span>][j-<span class="number">1</span>]) &#123;</span><br><span class="line">    String tmp = lcs;</span><br><span class="line">    lcs = String.format(<span class="string">"%c%s "</span>, x.charAt(i-<span class="number">1</span>), tmp);</span><br><span class="line">    System.out.println(lcs);</span><br><span class="line">    LCS_TraceBack(x,y, i-<span class="number">1</span> ,j-<span class="number">1</span>, table, lcs);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (table[i][j] &gt; table[i-<span class="number">1</span>][j] &amp;&amp; table[i][j] == table[i][j-<span class="number">1</span>]) &#123;</span><br><span class="line">    LCS_TraceBack(x,y,i, j-<span class="number">1</span>, table, lcs);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    LCS_TraceBack(x,y, i-<span class="number">1</span>, j, table, lcs);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>다이나믹프로그래밍</tag>
        <tag>동적계획법</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-17087] 숨바꼭질 6</title>
    <url>/2020/04/02/BaekJoon-17087-hid-and-seek/</url>
    <content><![CDATA[<h1 id="BaekJoon-17087-숨바꼭질-6"><a href="#BaekJoon-17087-숨바꼭질-6" class="headerlink" title="[BaekJoon-17087] 숨바꼭질 6"></a>[BaekJoon-17087] 숨바꼭질 6</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>수빈이는 동생 N명과 숨바꼭질을 하고 있다. 수빈이는 현재 점 S에 있고, 동생은 A1, A2, …, AN에 있다.</p>
<p>수빈이는 걸어서 이동을 할 수 있다. 수빈이의 위치가 X일때 걷는다면 1초 후에 X+D나 X-D로 이동할 수 있다. 수빈이의 위치가 동생이 있는 위치와 같으면, 동생을 찾았다고 한다.</p>
<p>모든 동생을 찾기위해 D의 값을 정하려고 한다. 가능한 D의 최댓값을 구해보자.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 N(1 ≤ N ≤ 105)과 S(1 ≤ S ≤ 109)가 주어진다. 둘째 줄에 동생의 위치 Ai(1 ≤ Ai ≤ 109)가 주어진다. 동생의 위치는 모두 다르며, 수빈이의 위치와 같지 않다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>가능한 D값의 최댓값을 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 7 11</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 81</span><br><span class="line">33 105 57</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">24</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-3"><a href="#예제-입력-3" class="headerlink" title="예제 입력 3"></a>예제 입력 3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 1</span><br><span class="line">1000000000</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-3"><a href="#예제-출력-3" class="headerlink" title="예제 출력 3"></a>예제 출력 3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">999999999</span><br></pre></td></tr></table></figure>
<h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>수빈이는 S 동생은 $A_1 … A_N$ 에 있다고 하면 수빈이는 x-&gt; X+D나 X - D 로 이동할 수 있다고 하고, D의 최댓값을 구하는 문제</p>
<p>A 에서 B 로 이동 하는 경우(A &lt; B) : X -&gt; X + D나 X - D 로만 이동하려면 B - X가 D의 배수가 되어야 한다.</p>
<p>A 에서 B C 로 이동하는 경우(A &lt; B, A &lt; C) : X-&gt; X + D나 X - D로만 이동하려면 D-X가 D의 배수가 되어야하고, C-X가 의 배수가 되어야한다.</p>
<p>예를들어 시작점 S 가 2이고 도착지가 26이면 둘 사이 차이나는 거리 D = 24 이다. </p>
<p>그래서 여기서 공통된 약수의 합을 구하면 되므로 </p>
<p>$|A_1 - X|,|A_2 - X|,|A_3 - X|…|A_n - X|$ 의 최대공약수를 구하면된다.</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.BufferedWriter;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        g2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void g2() throws Exception &#123;</span><br><span class="line">        BufferedWriter out &#x3D; new BufferedWriter(new OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in &#x3D; new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line">        String str &#x3D; in.readLine();</span><br><span class="line">        String[] split &#x3D; str.split(&quot; &quot;);</span><br><span class="line">        int n &#x3D; Integer.parseInt(split[0]);</span><br><span class="line">        int s &#x3D; Integer.parseInt(split[1]);</span><br><span class="line"></span><br><span class="line">        String str2 &#x3D; in.readLine();</span><br><span class="line">        String[] split2 &#x3D; str2.split(&quot; &quot;);</span><br><span class="line">        int[] a &#x3D; new int[n];</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">            int x &#x3D; Integer.parseInt(split2[i]);</span><br><span class="line">            a[i] &#x3D; Math.abs(x-s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int result &#x3D; a[0];</span><br><span class="line">        for (int i &#x3D; 1; i &lt; n; i++) &#123;</span><br><span class="line">            result &#x3D; gcd(result, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.write(result + &quot;\n&quot;);</span><br><span class="line">        out.flush();;</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int gcd(int a, int b) &#123;</span><br><span class="line">        while (b !&#x3D; 0) &#123;</span><br><span class="line">            int r &#x3D; a % b;</span><br><span class="line">            a &#x3D; b;</span><br><span class="line">            b &#x3D; r;</span><br><span class="line">        &#125;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/17087" target="_blank" rel="noopener">https://www.acmicpc.net/problem/17087</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-9613] GCD 합</title>
    <url>/2020/04/02/BaekJoon-9613-gcd-sum/</url>
    <content><![CDATA[<h1 id="BaekJoon-9613-GCD-합"><a href="#BaekJoon-9613-GCD-합" class="headerlink" title="[BaekJoon-9613] GCD 합"></a>[BaekJoon-9613] GCD 합</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>양의 정수 n개가 주어졌을 때, 가능한 모든 쌍의 GCD의 합을 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 테스트 케이스의 개수 t (1 ≤ t ≤ 100)이 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있다. 각 테스트 케이스는 수의 개수 n (1 &lt; n ≤ 100)가 주어지고, 다음에는 n개의 수가 주어진다. 입력으로 주어지는 수는 1,000,000을 넘지 않는다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>각 테스트 케이스마다 가능한 모든 쌍의 GCD의 합을 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4 10 20 30 40</span><br><span class="line">3 7 5 12</span><br><span class="line">3 125 15 25</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">70</span><br><span class="line">3</span><br><span class="line">35</span><br></pre></td></tr></table></figure>
<h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>최대공약수는 유클리드 호재법을 이용했다.<br>여기서 최대공약수의 합이라고 되어있는데 가능한 모든 쌍이라는 것이 </p>
<p>10 20 30 40</p>
<p>이 있다면<br>10, 20, 30, 40 의 최대굉약수 합</p>
<p>20, 30, 40 의 최대공약수 합</p>
<p>30, 40 의 최대공약수 합</p>
<p>이 된다.</p>
<p>그래서 루프를 두 번 돌려야하며 i 는 <code>i to n - 1</code>번 만큼 루프를 (왜냐하면 마지막 값은 하나 뿐이니..)<br>j 는 <code>i + 1 to n</code>번 만큼 루프를 돌린다.</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        sumOfGCD();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sumOfGCD</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> t = Integer.parseInt(in.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (t-- != <span class="number">0</span>) &#123;</span><br><span class="line">            String s = in.readLine();</span><br><span class="line">            String[] split = s.split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> n = Integer.parseInt(split[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                    sum += gcd(Integer.parseInt(split[i]), Integer.parseInt(split[j]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(sum + <span class="string">"\n"</span>);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = a % b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/9613" target="_blank" rel="noopener">https://www.acmicpc.net/problem/9613</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>stack</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-6588] 골드바흐의 추측</title>
    <url>/2020/04/01/BaekJoon-6588-Goldbachconjecture/</url>
    <content><![CDATA[<h1 id="BaekJoon-6588-골드바흐의-추측"><a href="#BaekJoon-6588-골드바흐의-추측" class="headerlink" title="[BaekJoon-6588] 골드바흐의 추측"></a>[BaekJoon-6588] 골드바흐의 추측</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>1742년, 독일의 아마추어 수학가 크리스티안 골드바흐는 레온하르트 오일러에게 다음과 같은 추측을 제안하는 편지를 보냈다.</p>
<p>4보다 큰 모든 짝수는 두 홀수 소수의 합으로 나타낼 수 있다.<br>예를 들어 8은 3 + 5로 나타낼 수 있고, 3과 5는 모두 홀수인 소수이다. 또, 20 = 3 + 17 = 7 + 13, 42 = 5 + 37 = 11 + 31 = 13 + 29 = 19 + 23 이다.</p>
<p>이 추측은 아직도 해결되지 않은 문제이다.</p>
<p>백만 이하의 모든 짝수에 대해서, 이 추측을 검증하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>입력은 하나 또는 그 이상의 테스트 케이스로 이루어져 있다. 테스트 케이스의 개수는 100,000개를 넘지 않는다.</p>
<p>각 테스트 케이스는 짝수 정수 n 하나로 이루어져 있다. (6 ≤ n ≤ 1000000)</p>
<p>입력의 마지막 줄에는 0이 하나 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>각 테스트 케이스에 대해서, n = a + b 형태로 출력한다. 이때, a와 b는 홀수 소수이다. 숫자와 연산자는 공백 하나로 구분되어져 있다. 만약, n을 만들 수 있는 방법이 여러 가지라면, b-a가 가장 큰 것을 출력한다. 또, 두 홀수 소수의 합으로 n을 나타낼 수 없는 경우에는 “Goldbach’s conjecture is wrong.”을 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">20</span><br><span class="line">42</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8 &#x3D; 3 + 5</span><br><span class="line">20 &#x3D; 3 + 17</span><br><span class="line">42 &#x3D; 5 + 37</span><br></pre></td></tr></table></figure>
<h2 id="풀이방법"><a href="#풀이방법" class="headerlink" title="풀이방법"></a>풀이방법</h2><p>에라토스테네스의 체를 가지고 소수 배열을 만들어놓고 소수배열이면서 n-1번 째 배열이 소수이면 두 소수의 합을 구할 수 있다.</p>
<p>에라토스테네스의 체에서 소수가 아닌 것은 <code>true</code> 고 <strong>소수</strong>는 <code>false</code>로 되어 있다.</p>
<p><code>i 번째 소수 eq i 번째 소수 eq (n - i) 번째 소수</code></p>
<p>즉<br><code>if (!check[i] &amp;&amp; (!check[i] &amp;&amp; !check[n - i]))</code> </p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        goldbachsConjecture();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">goldbachsConjecture</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">1000000</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] check = <span class="keyword">new</span> <span class="keyword">boolean</span>[length + <span class="number">1</span>];</span><br><span class="line">        check[<span class="number">0</span>] = check[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!check[i])</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt;= length; j += i) check[j] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">boolean</span> flags;</span><br><span class="line">        <span class="keyword">while</span> ((n = Integer.parseInt(in.readLine())) != <span class="number">0</span>) &#123;</span><br><span class="line">            a = <span class="number">2</span>;</span><br><span class="line">            flags = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = a; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!check[i] &amp;&amp; (!check[i] &amp;&amp; !check[n - i])) &#123;</span><br><span class="line">                    out.write(n + <span class="string">" = "</span> + i + <span class="string">" + "</span> + (n - i) + <span class="string">"\n"</span>);</span><br><span class="line">                    flags = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!flags) out.write(<span class="string">"Goldbach's conjecture is wrong."</span>);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/6588" target="_blank" rel="noopener">https://www.acmicpc.net/problem/6588</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-1929] 소수구하기</title>
    <url>/2020/04/01/BaekJoon-1929-primeNumber/</url>
    <content><![CDATA[<h1 id="BaekJoon-1929-소수구하기"><a href="#BaekJoon-1929-소수구하기" class="headerlink" title="[BaekJoon-1929] 소수구하기"></a>[BaekJoon-1929] 소수구하기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>M이상 N이하의 소수를 모두 출력하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 자연수 M과 N이 빈 칸을 사이에 두고 주어진다. (1 ≤ M ≤ N ≤ 1,000,000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>한 줄에 하나씩, 증가하는 순서대로 소수를 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 16</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">11</span><br><span class="line">13</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>일반 소수구하기로 하면 시간초과난다.</p>
<p>그래서 에라토스테네스의 체를 이용하여 문제를 해결할 수 있다.</p>
<p>고대 그리스의 수학자 에라토스테네스가 만들어 낸 소수를 찾는 방법. 이 방법은 마치 체로 치듯이 수를 걸러낸다고 하여 ‘에라토스테네스의 체’라고 부른다. 따지고 보면 $f(x)=x1_P(x)$ 의 수열 중 0이 아닌 것을 표로 시각화한 것이라고 볼 수 있다. 참조 : <a href="https://namu.wiki/w/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98%20%EC%B2%B4" target="_blank" rel="noopener">나무위키</a></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        prime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prime</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String str = in.readLine();</span><br><span class="line">        String[] split = str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(split[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(split[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">boolean</span>[] check = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            num[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        check[<span class="number">0</span>] = check[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;=n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!check[i])</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt;= n; j+=i) check[j] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt;=n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!check[i])</span><br><span class="line">                out.write(num[i] + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/6588" target="_blank" rel="noopener">https://www.acmicpc.net/problem/6588</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-2609] 최대공약수와 최소공배수</title>
    <url>/2020/03/31/BaekJoon-2609-gcd-lcm/</url>
    <content><![CDATA[<h1 id="BaekJoon-2609-최대공약수와-최소공배수"><a href="#BaekJoon-2609-최대공약수와-최소공배수" class="headerlink" title="[BaekJoon-2609] 최대공약수와 최소공배수"></a>[BaekJoon-2609] 최대공약수와 최소공배수</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>두 개의 자연수를 입력받아 최대 공약수와 최소 공배수를 출력하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에는 두 개의 자연수가 주어진다. 이 둘은 10,000이하의 자연수이며 사이에 한 칸의 공백이 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에는 입력으로 주어진 두 수의 최대공약수를, 둘째 줄에는 입력으로 주어진 두 수의 최소 공배수를 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">24 18</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">72</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>최대공약수 : gcd(a, a%b) 유클리드 호재법을 통해 최대공약수를 구할 수 있다.</p>
<blockquote>
<p>호제법 : 두 수가 서로 상대방 수를 나누어서 결국 원하는 수를 얻는 알고리즘.</p>
</blockquote>
<p><code>a</code> 를 <code>b</code>로 나눈 나머지를 <code>r</code> 이라고 했을 때 <code>GCD(a,b) = GCD(b,r)</code>과 같다.<br>여기서 <code>r</code>이 <code>0</code> 이면 <code>b</code>가 최대공약수가 된다.</p>
<p>$GCD(24,16)=GCD(16,8)=GCD(8,0)=8,13$</p>
<p>최소공배수 : $L = lcm(a, b)$ 은 $L= lcm(a, b)= a * b / gcd(a, b)$이 성립</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String str = in.readLine();</span><br><span class="line">        String[] split = str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">int</span> a = Integer.parseInt(split[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> b = Integer.parseInt(split[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> gcd = gcd(a, b);</span><br><span class="line">        out.write(gcd + <span class="string">"\n"</span>);</span><br><span class="line">        out.write(lcm(a, b, gcd) + <span class="string">"\n"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        ;</span><br><span class="line">        in.close();</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = a % b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//재귀를 이용한 gcd</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">gcd2</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> b != <span class="number">0</span> ? gcd(b, a % b) : a;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> gcd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a * b) / gcd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/6588" target="_blank" rel="noopener">https://www.acmicpc.net/problem/6588</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-11656] 접미사 배열</title>
    <url>/2020/03/30/BaekJoon-11656-suffix-array/</url>
    <content><![CDATA[<h1 id="BaekJoon-11656-접미사배열"><a href="#BaekJoon-11656-접미사배열" class="headerlink" title="[BaekJoon-11656] 접미사배열"></a>[BaekJoon-11656] 접미사배열</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>접미사 배열은 문자열 S의 모든 접미사를 사전순으로 정렬해 놓은 배열이다.</p>
<p>baekjoon의 접미사는 baekjoon, aekjoon, ekjoon, kjoon, joon, oon, on, n 으로 총 8가지가 있고, 이를 사전순으로 정렬하면, aekjoon, baekjoon, ekjoon, joon, kjoon, n, on, oon이 된다.</p>
<p>문자열 S가 주어졌을 때, 모든 접미사를 사전순으로 정렬한 다음 출력하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 문자열 S가 주어진다. S는 알파벳 소문자로만 이루어져 있고, 길이는 1,000보다 작거나 같다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄부터 S의 접미사를 사전순으로 한 줄에 하나씩 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">baekjoon</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aekjoon</span><br><span class="line">baekjoon</span><br><span class="line">ekjoon</span><br><span class="line">joon</span><br><span class="line">kjoon</span><br><span class="line">n</span><br><span class="line">on</span><br><span class="line">oon</span><br></pre></td></tr></table></figure>
<h2 id="해결방버"><a href="#해결방버" class="headerlink" title="해결방버"></a>해결방버</h2><p>자바 문자열 함수 중 <code>substring()</code> 을 이용하면 문자열을 분리하고 sort() 를 통해 정렬한다.</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        suffixOfArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">suffixOfArray</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String str = in.readLine();</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[str.length()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;str.length(); i++) &#123;</span><br><span class="line">            arr[i] = str.substring(i);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">for</span> (String s : arr) &#123;</span><br><span class="line">            out.write(s+<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/11656" target="_blank" rel="noopener">https://www.acmicpc.net/problem/11656</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-10824] 네 수</title>
    <url>/2020/03/30/BaekJoon-10824-four-Number/</url>
    <content><![CDATA[<h1 id="BaekJoon-10824-네-수"><a href="#BaekJoon-10824-네-수" class="headerlink" title="[BaekJoon-10824] 네 수"></a>[BaekJoon-10824] 네 수</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>네 자연수 A, B, C, D가 주어진다. 이때, A와 B를 붙인 수와 C와 D를 붙인 수의 합을 구하는 프로그램을 작성하시오.</p>
<p>두 수 A와 B를 합치는 것은 A의 뒤에 B를 붙이는 것을 의미한다. 즉, 20과 30을 붙이면 2030이 된다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 네 자연수 A, B, C, D가 주어진다. (1 ≤ A, B, C, D ≤ 1,000,000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>A와 B를 붙인 수와 C와 D를 붙인 수의 합을 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><p>10 20 30 40</p>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><p>4060</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String str = in.readLine();</span><br><span class="line">        String[] split = str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">long</span> num1 = Long.parseLong(split[<span class="number">0</span>] + split[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">long</span> num2 = Long.parseLong(split[<span class="number">2</span>] + split[<span class="number">3</span>]);</span><br><span class="line">        out.write(num1+num2+<span class="string">"\n"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>parseLong를 직접 만들어서..</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        solve2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String str = in.readLine();</span><br><span class="line">        String[] split = str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">long</span> num1 = parseLong(split[<span class="number">0</span>] + split[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">long</span> num2 = parseLong(split[<span class="number">2</span>] + split[<span class="number">3</span>]);</span><br><span class="line">        out.write(num1+num2+<span class="string">"\n"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">parseLong</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[]  chs = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> length = chs.length;</span><br><span class="line">        <span class="keyword">long</span> exp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = length -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">            result += (chs[i--] - <span class="string">'0'</span>) * exp;</span><br><span class="line">            exp *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/10824" target="_blank" rel="noopener">https://www.acmicpc.net/problem/10824</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-11655] ROT13</title>
    <url>/2020/03/30/BaekJoon-11655-rot13/</url>
    <content><![CDATA[<h1 id="ROT13"><a href="#ROT13" class="headerlink" title="ROT13"></a>ROT13</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>ROT13은 카이사르 암호의 일종으로 영어 알파벳을 13글자씩 밀어서 만든다.</p>
<p>예를 들어, “Baekjoon Online Judge”를 ROT13으로 암호화하면 “Onrxwbba Bayvar Whqtr”가 된다. ROT13으로 암호화한 내용을 원래 내용으로 바꾸려면 암호화한 문자열을 다시 ROT13하면 된다. 앞에서 암호화한 문자열 “Onrxwbba Bayvar Whqtr”에 다시 ROT13을 적용하면 “Baekjoon Online Judge”가 된다.</p>
<p>ROT13은 알파벳 대문자와 소문자에만 적용할 수 있다. 알파벳이 아닌 글자는 원래 글자 그대로 남아 있어야 한다. 예를 들어, “One is 1”을 ROT13으로 암호화하면 “Bar vf 1”이 된다.</p>
<p>문자열이 주어졌을 때, “ROT13”으로 암호화한 다음 출력하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 알파벳 대문자, 소문자, 공백, 숫자로만 이루어진 문자열 S가 주어진다. S의 길이는 100을 넘지 않는다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 S를 ROT13으로 암호화한 내용을 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Baekjoon Online Judge</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Onrxwbba Bayvar Whqtr</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">One is 1</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Bar vf 1</span><br></pre></td></tr></table></figure>
<h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>시저암호의 알고리즘은 secret key가 주어지면 문자를 secret key만큼 shift 하는 것으로</p>
<p><strong>$f(x) = (x + key) mod 26 $</strong> 이다.</p>
<p>대문자 소문자 구분은 Ascii 코드를 이용하여 대소문자를 구별할 수 있으며 문제는 <code>N</code> 이후로는 13번 shift를 하면 <code>A</code> 로 넘어가버린다.</p>
<p>이 문제를 해결하기 위해 key가 13 이니까 N은 <code>N - A = 13</code> 이므로 $26 mod 26 = 0$ 이 되므로 </p>
<p>$(fx) = (x + (idx + key) modf 26$ 라는 수식을 얻을 수 있다.</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        rot13();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rot13</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String str = in.readLine();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : str.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">                out.write(rot(<span class="string">'a'</span>, ch, <span class="number">13</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">                out.write(rot(<span class="string">'A'</span>, ch, <span class="number">13</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                out.write(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">rot</span><span class="params">(<span class="keyword">char</span> ascii, <span class="keyword">char</span> ch, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">char</span>) (ascii + ((ch - ascii) + key) % <span class="number">26</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/11655" target="_blank" rel="noopener">https://www.acmicpc.net/problem/11655</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-10809] 알파벳 찾기</title>
    <url>/2020/03/30/BaekJoon-10809-find-of-alphabet/</url>
    <content><![CDATA[<h1 id="BaekJoon-10809-알파벳-찾기"><a href="#BaekJoon-10809-알파벳-찾기" class="headerlink" title="[BaekJoon-10809] 알파벳 찾기"></a>[BaekJoon-10809] 알파벳 찾기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>알파벳 소문자로만 이루어진 단어 S가 주어진다. 각각의 알파벳에 대해서, 단어에 포함되어 있는 경우에는 처음 등장하는 위치를, 포함되어 있지 않은 경우에는 -1을 출력하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 단어 S가 주어진다. 단어의 길이는 100을 넘지 않으며, 알파벳 소문자로만 이루어져 있다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>각각의 알파벳에 대해서, a가 처음 등장하는 위치, b가 처음 등장하는 위치, … z가 처음 등장하는 위치를 공백으로 구분해서 출력한다.</p>
<p>만약, 어떤 알파벳이 단어에 포함되어 있지 않다면 -1을 출력한다. 단어의 첫 번째 글자는 0번째 위치이고, 두 번째 글자는 1번째 위치이다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">baekjoon</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 0 -1 -1 2 -1 -1 -1 -1 4 3 -1 -1 7 5 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        alphabetFound();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">alphabetFound</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String str = in.readLine();</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">26</span>];</span><br><span class="line">        Arrays.fill(result, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = chars[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (result[idx] == -<span class="number">1</span>)</span><br><span class="line">                result[idx] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : result) &#123;</span><br><span class="line">            out.write(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/10809" target="_blank" rel="noopener">https://www.acmicpc.net/problem/10809</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-10808] 알파벳 개수</title>
    <url>/2020/03/30/BaekJoon-10808-alphabetCount/</url>
    <content><![CDATA[<h1 id="알파벳-개수"><a href="#알파벳-개수" class="headerlink" title="알파벳 개수"></a>알파벳 개수</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p> 알파벳 소문자로만 이루어진 단어 S가 주어진다. 각 알파벳이 단어에 몇 개가 포함되어 있는지 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 단어 S가 주어진다. 단어의 길이는 100을 넘지 않으며, 알파벳 소문자로만 이루어져 있다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>단어에 포함되어 있는 a의 개수, b의 개수, …, z의 개수를 공백으로 구분해서 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">baekjoon</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 1 0 0 1 0 0 0 0 1 1 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0</span><br></pre></td></tr></table></figure>
<h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>아스키코드를 이용하여 쉽게 풀 수 있다.</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        countOfAlphabet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countOfAlphabet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String str = in.readLine();</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : str.toCharArray()) &#123;</span><br><span class="line">            result[ch - <span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : result) &#123;</span><br><span class="line">            out.write(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/10808" target="_blank" rel="noopener">https://www.acmicpc.net/problem/10808</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>템플릿 리터럴(Template Literals)</title>
    <url>/2020/03/28/es6-Template-Literals2/</url>
    <content><![CDATA[<h1 id="템플릿-리터럴-Template-Literals"><a href="#템플릿-리터럴-Template-Literals" class="headerlink" title="템플릿 리터럴(Template Literals)"></a>템플릿 리터럴(Template Literals)</h1><p>ES6는 템플릿 리터럴(Template Literals)은 일반 문자열과 비슷해보이지만 <code>&#39;</code> 또는 <code>&quot;</code> 같은 통상적인 따옴표 문자 대신 백틱(Backtick) (<strong>`</strong>) 문자를 사용한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="string">`템플릿 리터럴은 '작은따옴표(single quotes)'과 "큰따옴표(double quotes)"를 혼용할 수 있다.`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(template);</span><br></pre></td></tr></table></figure>
<h2 id="방법1"><a href="#방법1" class="headerlink" title="방법1"></a>방법1</h2><p>일반적인 문자열에서 줄바꿈은 허용되지 않고 공백(white-spce)를 표현하기 위해 백슬래시(\)로 시작하는 이스케이프 시퀀스(Escape Sequence)를 사용해야한다. 템플릿 리터럴은 일반적인 문자열과 다르게 여러 줄에 걸쳐 문자열을 작성할 수 있으며 템플릿 리터럴 내의 모든 white-space는 있는 그대로 적용된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;a href="#home"&gt;Home&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;a href="#news"&gt;News&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;a href="#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;a href="#about"&gt;About&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(template);</span><br></pre></td></tr></table></figure>
<p>[결과]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#home&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#news&quot;&gt;News&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#contact&quot;&gt;Contact&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#about&quot;&gt;About&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>
<h2 id="방법2"><a href="#방법2" class="headerlink" title="방법2"></a>방법2</h2><p>템플릿 리터럴은 + 연산자를 사용하지 않고 간단한 방법으로 문자열을 삽입할 수 있는데 이를 문자열 인터폴레이션(String Interpolation)이라고 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> first = <span class="string">'GildDong'</span>;</span><br><span class="line"><span class="keyword">const</span> last = <span class="string">'Hong'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5 String</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'My name is '</span> + first + <span class="string">' '</span> + last + <span class="string">'.'</span>);</span><br><span class="line"><span class="comment">//문자열 인터폴레이션(String Interpolation)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>.`</span>);</span><br></pre></td></tr></table></figure>
<p>문자열 인터폴레이션(String Interpolation)은 <code>${...}</code> 으로 표현식을 감싸고 인터폴레이션 내의 표현식은 문자열로 강제 타입 변환된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`2 * 9 = <span class="subst">$&#123;<span class="number">2</span> * <span class="number">9</span>&#125;</span>`</span>); <span class="comment">//18</span></span><br></pre></td></tr></table></figure>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><p><a href="https://poiemaweb.com/es6-template-literals" target="_blank" rel="noopener">https://poiemaweb.com/es6-template-literals</a></p>
<p><a href="https://jsdev.kr/t/es6/2944" target="_blank" rel="noopener">https://jsdev.kr/t/es6/2944</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>JavaScript</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ECMASeript6</tag>
        <tag>Javascript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>2. OAuth 2.0</title>
    <url>/2020/03/28/2-OAuth-2-0-info/</url>
    <content><![CDATA[<h1 id="OAuth-2-0"><a href="#OAuth-2-0" class="headerlink" title="OAuth 2.0"></a>OAuth 2.0</h1><p>OAuth 2.0은 OAuth 1.0의 단점을 개선한 것으로, OAuth 1.0은 웹 애플리케이션이 아닌 애플리케이션에서는 사용하기 곤란하다는 단점이 있다. 그리고 절차가 복잡하여 OAuth 구현 라이브러리를 제작하기 어렵고, 복잡한 절차 때문에 Service Provider에게도 연산 부담이 발생한다.</p>
<h2 id="OAuth-1-0과-OAuth2-0의-차이"><a href="#OAuth-1-0과-OAuth2-0의-차이" class="headerlink" title="OAuth 1.0과 OAuth2.0의 차이"></a>OAuth 1.0과 OAuth2.0의 차이</h2><ul>
<li>인증절차의 간소화로 인해 개발자가 구현하기 쉬워짐</li>
<li>기존에 사용하던 용어도 바뀌면서 Authorization Server와 Resource서버의 분리가 명시적으로 되었다.</li>
<li>다양한 인증방식을 지원</li>
</ul>
<h2 id="OAuth-2-0의-특징"><a href="#OAuth-2-0의-특징" class="headerlink" title="OAuth 2.0의 특징"></a>OAuth 2.0의 특징</h2><ol>
<li><strong>인증절차 간소화</strong><ul>
<li>기능을 단순화했으며 기능과 규모의 확장성 등을 지원한다.<ul>
<li>OAuth 1.0은 디지털 서명 기반이지만 OAuth 2.0의 암호화는 HTTPS에 맡김으로 복잡한 디지털 서명에 관한 로직을 요구하지 않으므로 개발이 쉬움 쉽게말해 암호화가 필요 없으며 HTTPS를 사용하고 HMAC을 사용하지 않는다.</li>
</ul>
</li>
</ul>
</li>
<li><strong>용어변경</strong><ul>
<li>Resource Owner : 사용자 (1,0 User해당)</li>
<li>Resource Server : 자원을 호스팅 하는 서버[REST API Server(1.0 Protected Resource)]</li>
<li>Authorization Server : 사용자의 동의를 받아 권한을 부여하는 인증서버.(API 서버와 같을 수 있다. 1.0 Service Provider) 일반적으로 Resource Server와 같은 URL 하위에 있는 경우가 많다.</li>
<li>Client : Resource Server에서 제공하는 자원을 사용하는 애플리케이션[ Third Party Application(1.0 Service Provider해당)]</li>
</ul>
</li>
<li><strong>Resource Server와 Authorization Server의 분리</strong><ul>
<li>커다란 서비스는 인증 서버로 분리하거나 다중화 할 수 있어야한다.</li>
<li>Authorization Server의 역할을 명확히 한다.</li>
</ul>
</li>
<li><p><strong>다양한 인증방식(grant_type)</strong></p>
<ul>
<li>Authorization Code Grant</li>
<li>Implicit Grant</li>
<li>Resource Owner Pasword Credentials Grant</li>
<li>Client Credentials Grant</li>
<li>Device Code Grant</li>
<li>Refresh Token Grant</li>
</ul>
</li>
<li><p><strong>웹 애플리케이션이 아닌 데스크탑, 앱 애플리케이션 지원강화</strong></p>
</li>
<li><p><strong>그외</strong></p>
<ul>
<li>Signature의 단순화 정렬과 URL 인코딩이 필요 없다.</li>
<li>Access Token 갱신 Ouath 1.0에서 Access Token을 받으면 Access Token을 계속 사용할 수 있다. OAuth2.0에서는 보안 강화를 위해 Access Token의 Life-time을 지정할 수 있도록 했다.</li>
</ul>
</li>
</ol>
<h2 id="인증-종류"><a href="#인증-종류" class="headerlink" title="인증 종류"></a>인증 종류</h2><p><strong>OAuth 2.0은 6가지의 인증종류가 있다.</strong></p>
<h3 id="Authorization-Code-Grant"><a href="#Authorization-Code-Grant" class="headerlink" title="Authorization Code Grant"></a>Authorization Code Grant</h3><p>Authorization Code Grant는 일반적인 웹사이트에서 소셜로그인과 같은 인증을 받을 때 가장 많이 쓰는 방식으로 기본적으로 지원하고 있는 방식이다.</p>
<img src="/2020/03/28/2-OAuth-2-0-info/oauth2_guide.jpg" class="" title="[그림1. 페이코 OAuth2.0 인증과정]">
<img src="/2020/03/28/2-OAuth-2-0-info/oauth2_flow1.png" class="" title="[그림2. Authorization Code Grant type 으로 Access Token을 얻어오는 시퀀스 다이어그램]">
<ul>
<li><code>1</code> Authorization Request : 클라이언트가 Redirect URL을 포함하여 Authorization server 인증 요청을 한다.</li>
<li><code>2</code> User Login &amp; Consent : Authorization Server는 유저에게 로그인창을 제공하여 유저를 인증하게 된다.</li>
<li><code>3</code> Authorization Code Response : Authorization Server는 Authorization code를 클라이언트에게 제공해준다.</li>
<li><code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>, <code>9</code> :Client는 코드를 Authorization server에 Access Token을 요청한다. 그리고 Authorization 서버는 클라이언트에게 Access token을 발급해준다.</li>
<li><code>10</code>, <code>11</code> : 그 Access token을 이용하여 Resource server에 자원을 접근할 수 있게 되고, 그 이후에 토큰이 만료된다면 Refresh token을 이용하여 토큰을 재발급 받을 수 있다.</li>
</ul>
<h3 id="Implicit-Grant"><a href="#Implicit-Grant" class="headerlink" title="Implicit Grant"></a>Implicit Grant</h3><p>Public Client인 브라우저 기반의 애플리케이션(Javascript application)이나 모바일 애플리케이션에서 바로 Resource Server에 접근하여 사용할 수 있는 방식이다.</p>
<img src="/2020/03/28/2-OAuth-2-0-info/oauth2_flow2.png" class="" title="[그림3. Implicit Grant 시퀀스 다이어그램]">
<ul>
<li><code>1</code> : 클라이언트는 Authorization server에 인증을 요청한다.</li>
<li><code>2</code> : 유저는 Authorization server를 통해 인증한다.</li>
<li><code>3</code> : Authorization server는 Access token을 포함하여 클라이언트의 Redirect URL을 호출한다.</li>
<li><code>4</code> : 클라이언트는 해당 Access token이 유효한지 Authorization server에 인증요청한다.</li>
<li><code>5</code> : 인증서버는 그 토큰이 유효하다면 토큰의 만기시간과함께 리턴해준다.</li>
<li><code>6</code>, <code>7</code> : 클라이언트는 Resource server에 접근할 수 있게된다.</li>
</ul>
<h3 id="Resource-Owner-Pasword-Credentials-Grant"><a href="#Resource-Owner-Pasword-Credentials-Grant" class="headerlink" title="Resource Owner Pasword Credentials Grant"></a>Resource Owner Pasword Credentials Grant</h3><p>Client에 아이디/패스워드를 받아 아이디/패스워드로 직접 access token을 받아오는 방식이다. Client가 신용이 없을 때에는 사용하기에 위험하다는 단점이 있다. 클라이언트가 확실한 신용이 보장될 때 사용할 수 있는 방식이다.</p>
<img src="/2020/03/28/2-OAuth-2-0-info/oauth2_flow3.png" class="" title="[그림2. Resource Owner Pasword Credentials Grant 시퀀스 다이어그램]">
<ul>
<li><code>1</code> : User가 Id와 Password를 입력한다</li>
<li><code>1.1</code> : 클라이언트는 유저의 id와 password와 클라이언트 정보를 넘긴다.</li>
<li><code>1.2</code> : Authorization sever는 Access token을 넘긴다.</li>
</ul>
<h3 id="Client-Credentials-Grant"><a href="#Client-Credentials-Grant" class="headerlink" title="Client Credentials Grant"></a>Client Credentials Grant</h3><p>애플리케이션이 Confidential Client일 때 id와 secret을 가지고 인증하는 방식이다.</p>
<img src="/2020/03/28/2-OAuth-2-0-info/oauth2_flow4.png" class="" title="[그림2. Client Credentials Grant 시퀀스 다이어그램]">
<ul>
<li><code>1</code> : 클라이언트 정보를 Authorization server에 넘긴다.</li>
<li><code>2</code> : Access Token을 Client에 전달한다.</li>
</ul>
<h3 id="Device-Code-Grant"><a href="#Device-Code-Grant" class="headerlink" title="Device Code Grant"></a>Device Code Grant</h3><p>장치 코드 부여 유형은 브라우저가 없거나 입력이 제한된 장치에서 사용됩니다.</p>
<h3 id="Refresh-Token-Grant"><a href="#Refresh-Token-Grant" class="headerlink" title="Refresh Token Grant"></a>Refresh Token Grant</h3><p>기존에 저장해둔 리프러시 토큰이 존재할 때 엑세스토큰 재발급 받을 필요가 있을 때 사용한다. 그리고 기존 액세스는 토큰이 만료된다.</p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><p><a href="https://developers.payco.com/guide/development/start" target="_blank" rel="noopener">https://developers.payco.com/guide/development/start</a><br><a href="https://d2.naver.com/helloworld/24942" target="_blank" rel="noopener">https://d2.naver.com/helloworld/24942</a><br><a href="https://minwan1.github.io/2018/02/24/2018-02-24-OAuth/" target="_blank" rel="noopener">https://minwan1.github.io/2018/02/24/2018-02-24-OAuth/</a><br><a href="https://www.oauth.com/OAuth2-servers/differences-between-OAuth-1-2/" target="_blank" rel="noopener">https://www.oauth.com/OAuth2-servers/differences-between-OAuth-1-2/</a><br><a href="https://developer.accela.com/docs/construct-authCodeFlow.html" target="_blank" rel="noopener">https://developer.accela.com/docs/construct-authCodeFlow.html</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Security</category>
        <category>Authentication</category>
        <category>OAuth</category>
      </categories>
      <tags>
        <tag>OAuth</tag>
        <tag>Authentication</tag>
        <tag>인증</tag>
        <tag>보안</tag>
        <tag>OAuth2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>템플릿 리터럴(Template Literals)</title>
    <url>/2020/03/28/es6-Template-Literals/</url>
    <content><![CDATA[<h1 id="템플릿-리터럴-Template-Literals"><a href="#템플릿-리터럴-Template-Literals" class="headerlink" title="템플릿 리터럴(Template Literals)"></a>템플릿 리터럴(Template Literals)</h1><p>ES6는 템플릿 리터럴(Template Literals)은 일반 문자열과 비슷해보이지만 <code>&#39;</code> 또는 <code>&quot;</code> 같은 통상적인 따옴표 문자 대신 백틱(Backtick) (<strong>`</strong>) 문자를 사용한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="string">`템플릿 리터럴은 '작은따옴표(single quotes)'과 "큰따옴표(double quotes)"를 혼용할 수 있다.`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(template);</span><br></pre></td></tr></table></figure>
<h2 id="방법1"><a href="#방법1" class="headerlink" title="방법1"></a>방법1</h2><p>일반적인 문자열에서 줄바꿈은 허용되지 않고 공백(white-spce)를 표현하기 위해 백슬래시(\)로 시작하는 이스케이프 시퀀스(Escape Sequence)를 사용해야한다. 템플릿 리터럴은 일반적인 문자열과 다르게 여러 줄에 걸쳐 문자열을 작성할 수 있으며 템플릿 리터럴 내의 모든 white-space는 있는 그대로 적용된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;a href="#home"&gt;Home&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;a href="#news"&gt;News&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;a href="#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;a href="#about"&gt;About&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(template);</span><br></pre></td></tr></table></figure>
<p>[결과]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#home&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#news&quot;&gt;News&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#contact&quot;&gt;Contact&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#about&quot;&gt;About&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>
<h2 id="방법2"><a href="#방법2" class="headerlink" title="방법2"></a>방법2</h2><p>템플릿 리터럴은 + 연산자를 사용하지 않고 간단한 방법으로 문자열을 삽입할 수 있는데 이를 문자열 인터폴레이션(String Interpolation)이라고 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> first = <span class="string">'GildDong'</span>;</span><br><span class="line"><span class="keyword">const</span> last = <span class="string">'Hong'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5 String</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'My name is '</span> + first + <span class="string">' '</span> + last + <span class="string">'.'</span>);</span><br><span class="line"><span class="comment">//문자열 인터폴레이션(String Interpolation)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>.`</span>);</span><br></pre></td></tr></table></figure>
<p>문자열 인터폴레이션(String Interpolation)은 <code>${...}</code> 으로 표현식을 감싸고 인터폴레이션 내의 표현식은 문자열로 강제 타입 변환된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`2 * 9 = <span class="subst">$&#123;<span class="number">2</span> * <span class="number">9</span>&#125;</span>`</span>); <span class="comment">//18</span></span><br></pre></td></tr></table></figure>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><p><a href="https://poiemaweb.com/es6-template-literals" target="_blank" rel="noopener">https://poiemaweb.com/es6-template-literals</a></p>
<p><a href="https://jsdev.kr/t/es6/2944" target="_blank" rel="noopener">https://jsdev.kr/t/es6/2944</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>JavaScript</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ECMASeript6</tag>
        <tag>Javascript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-1918] 후위 표기식</title>
    <url>/2020/03/27/BaekJoon-1918-postfix-noataion/</url>
    <content><![CDATA[<h1 id="후위-표기식"><a href="#후위-표기식" class="headerlink" title="후위 표기식"></a>후위 표기식</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>수식은 일반적으로 3가지 표기법으로 표현할 수 있다. 연산자가 피연산자 가운데 위치하는 중위 표기법(일반적으로 우리가 쓰는 방법이다), 연산자가 피연산자 앞에 위치하는 전위 표기법(prefix notation), 연산자가 피연산자 뒤에 위치하는 후위 표기법(postfix notation)이 그것이다. 예를 들어 중위 표기법으로 표현된 a+b는 전위 표기법으로는 +ab이고, 후위 표기법으로는 ab+가 된다.</p>
<p>이 문제에서 우리가 다룰 표기법은 후위 표기법이다. 후위 표기법은 위에서 말한 법과 같이 연산자가 피연산자 뒤에 위치하는 방법이다. 이 방법의 장점은 다음과 같다. 우리가 흔히 쓰는 중위 표기식 같은 경우에는 덧셈과 곱셈의 우선순위에 차이가 있어 왼쪽부터 차례로 계산할 수 없지만 후위 표기식을 사용하면 순서를 적절히 조절하여 순서를 정해줄 수 있다. 또한 같은 방법으로 괄호 등도 필요 없게 된다. 예를 들어 a+b<em>c를 후위 표기식으로 바꾸면 abc</em>+가 된다.</p>
<p>중위 표기식을 후위 표기식으로 바꾸는 방법을 간단히 설명하면 이렇다. 우선 주어진 중위 표기식을 연산자의 우선순위에 따라 괄호로 묶어준다. 그런 다음에 괄호 안의 연산자를 괄호의 오른쪽으로 옮겨주면 된다.</p>
<p>예를 들어 a+b<em>c는 (a+(b</em>c))의 식과 같게 된다. 그 다음에 안에 있는 괄호의 연산자 <em>를 괄호 밖으로 꺼내게 되면 (a+bc</em>)가 된다. 마지막으로 또 +를 괄호의 오른쪽으로 고치면 abc*+가 되게 된다.</p>
<p>다른 예를 들어 그림으로 표현하면 A+B*C-D/E를 완전하게 괄호로 묶고 연산자를 이동시킬 장소를 표시하면 다음과 같이 된다.</p>
<img src="/2020/03/27/BaekJoon-1918-postfix-noataion/4.png" class="">
<p>이러한 사실을 알고 중위 표기식이 주어졌을 때 후위 표기식으로 고치는 프로그램을 작성하시오</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 중위 표기식이 주어진다. 단 이 수식의 피연산자는 A~Z의 문자로 이루어지며 수식에서 한 번씩만 등장한다. 그리고 -A+B와 같이 -가 가장 앞에 오거나 AB와 같이 <em>가 생략되는 등의 수식은 주어지지 않는다. 표기식은 알파벳 대문자와 +, -, </em>, /, (, )로만 이루어져 있으며, 길이는 100을 넘지 않는다. </p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 후위 표기식으로 바뀐 식을 출력하시오</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A*(B+C)</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ABC+*</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>스택을 이용해서 문제를 해결할 수 있다.<br>이 문제는 괄호가 있거나 연산자의 우선순위가 높을경우 라는 경우의 수가 있다.</p>
<p>아래 코드를 통해서 연산자 우선순위를 지정해준다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">prec</span><span class="params">(<span class="keyword">char</span> op)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'('</span>: <span class="keyword">case</span> <span class="string">')'</span>: <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>: <span class="keyword">case</span> <span class="string">'-'</span>: <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>: <span class="keyword">case</span> <span class="string">'/'</span>: <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>그리고 여는괄호<code>(</code> 를 만나면 스택에 push하고 닫는 괄호 <code>)</code>를 만나면 여는 괄호를 만날 때까지 pop 해준다.</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        convertToPostfix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convertToPostfix</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String infix = in.readLine();</span><br><span class="line"></span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : infix.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'+'</span>:<span class="keyword">case</span> <span class="string">'-'</span>:<span class="keyword">case</span> <span class="string">'*'</span>:<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                    <span class="comment">//스택에 있는 연산자가 우선순위가 더 크거나 같으면 출력</span></span><br><span class="line">                    <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; prec(stack.peek()) &gt;= prec(ch))</span><br><span class="line">                        out.write(stack.pop());</span><br><span class="line">                    stack.push(ch);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                    stack.push(ch);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                    <span class="keyword">char</span> op = stack.pop();</span><br><span class="line">                    <span class="comment">//왼쪽괄호를 만날 때까지 계속 출력</span></span><br><span class="line">                    <span class="keyword">while</span> (op != <span class="string">'('</span>) &#123;</span><br><span class="line">                        out.write(op);</span><br><span class="line">                        op = stack.pop();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: <span class="comment">//A~Z</span></span><br><span class="line">                    out.write(ch);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">            out.write(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">prec</span><span class="params">(<span class="keyword">char</span> op)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'('</span>: <span class="keyword">case</span> <span class="string">')'</span>: <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>: <span class="keyword">case</span> <span class="string">'-'</span>: <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>: <span class="keyword">case</span> <span class="string">'/'</span>: <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/6588" target="_blank" rel="noopener">https://www.acmicpc.net/problem/6588</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>stack</tag>
        <tag>코딩테스트</tag>
        <tag>스택</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-1935] 후위표기식2</title>
    <url>/2020/03/27/BaekJoon-1935-postfix-notation2/</url>
    <content><![CDATA[<h1 id="BaekJoon-1935-후위표기식2"><a href="#BaekJoon-1935-후위표기식2" class="headerlink" title="[BaekJoon-1935] 후위표기식2"></a>[BaekJoon-1935] 후위표기식2</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>후위 표기식과 각 피연산자에 대응하는 값들이 주어져 있을 때, 그 식을 계산하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 피연산자의 개수(1 ≤ N ≤ 26) 가 주어진다. 그리고 둘째 줄에는 후위 표기식이 주어진다. (여기서 피연산자는 A~Z의 영대문자이며, A부터 순서대로 N개의 영대문자만이 사용되며, 길이는 100을 넘지 않는다) 그리고 셋째 줄부터 N+2번째 줄까지는 각 피연산자에 대응하는 값이 주어진다. (3번째 줄에는 A에 해당하는 값, 4번째 줄에는 B에 해당하는값 , 5번째 줄에는 C …이 주어진다, 그리고 피연산자에 대응 하는 값은 정수이다)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>계산 결과를 소숫점 둘째 자리까지 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">ABC*+DE&#x2F;-</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6.20</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">AA+A+</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.00</span><br></pre></td></tr></table></figure>
<h2 id="문제해결"><a href="#문제해결" class="headerlink" title="문제해결"></a>문제해결</h2><p>스택을 이용하여 문제를 해결해나간다.</p>
<p>피연산자일 경우 스택에 Push하고 연산자를 만나면 두 수를 pop()하여 연산을 하고 연산결과를 다시 Push를 한다</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        postfixNotation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postfixNotation</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(in.readLine());</span><br><span class="line">        String postfix = in.readLine();</span><br><span class="line">        <span class="keyword">double</span>[] numbers = <span class="keyword">new</span> <span class="keyword">double</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            numbers[i] = Double.parseDouble(in.readLine());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Double&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : postfix.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">                stack.push(numbers[(ch - <span class="string">'A'</span>)]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">double</span> n2 = stack.pop();</span><br><span class="line">                <span class="keyword">double</span> n1 = stack.pop();</span><br><span class="line">                <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                        stack.push(n1 + n2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                        stack.push(n1 - n2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                        stack.push(n1 * n2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                        stack.push(n1 / n2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(String.format(<span class="string">"%.2f\n"</span>, stack.pop()));</span><br><span class="line">        out.flush();</span><br><span class="line">        ;</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/1935" target="_blank" rel="noopener">https://www.acmicpc.net/problem/1935</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>stack</tag>
        <tag>코딩테스트</tag>
        <tag>스택</tag>
      </tags>
  </entry>
  <entry>
    <title>1. OAuth 란?</title>
    <url>/2020/03/27/1-OAuth-Info/</url>
    <content><![CDATA[<h1 id="1-OAuth란"><a href="#1-OAuth란" class="headerlink" title="1. OAuth란?"></a>1. OAuth란?</h1><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>OAuth는 Open Authorization or Open Authentication이란 뜻으로 인터넷 사용자들이 비밀번호를 제공하지 않고 다른 웹 사이트 상의 자신들의 정보에 대해 웹 사이트나, 애플리케이션의 접근 권한을 부여할 수 있는 공통적인 수단으로 사용되는 접근 위임을 위한 개방형 표준이다. 구글, 페이스북, 트위터, 카카오, 네이버 등의 기업들이 타사 애플리케이션이나 웹 사이트의 계정을 공유할 수 있게 허용해준다.</p>
<blockquote>
<p>애플리케이션 서비스 공급자들이(Service Provider) 유저의 비밀번호를 Third Party앱에 제공 없이 인증, 인가를 할 수 있는 표준 프로토콜이며, OAuth 인증을 하면 애플리케이션 API를 접근할 수 있는 권한을 얻을 수 있다.</p>
</blockquote>
<p>과거에는 인증방식의 표준이 없기에 아이디와 비밀번호를 사용했고 이것은 보안상 취약한 구조를 가지고 있었다. 유저의 비밀번호가 노출될 가능성이 크기 때문이다. 이 문제를 해결하기 위해 OAuth의 인증이 등장했고 API를 제공하는 서버에서 인증을 진행하고 유저가 인증되었으면 Access Token을 발급하였다. 발급이 완료된 Access Token은 Third Party(Consumer) 애플리케이션에서 서비스 공급자(Service Provider)의 API를 안전하고 쉽게 사용할 수 있게 되었다.</p>
<h2 id="용어"><a href="#용어" class="headerlink" title="용어"></a>용어</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">용어</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">사용자(User)</td>
<td>Service Provider에 계정을 가지고 있으면서, Consumer 앱을 사용하려는 사용자</td>
</tr>
<tr>
<td style="text-align:center">서비스 공급자(Service Provider)</td>
<td>OAuth를 통해 접근을 지원하는 웹 애플리케이션(Open API를 제공하는 서비스. ex) kakao, naver, facebook, google, etc.)</td>
</tr>
<tr>
<td style="text-align:center">보호 자원(Protected Resource)</td>
<td>서비스 공급자(Service Provider)로부터 제공되어지는 API 자원들</td>
</tr>
<tr>
<td style="text-align:center">소비자(Consumer)</td>
<td>Open API를 이용하여 개발된 OAuth를 사용하여 서비스 공급자의 기능을 사용하는 웹 사이트 또는 애플리케이션</td>
</tr>
<tr>
<td style="text-align:center">소비자 키(Consumer Key)</td>
<td>소비자(Consumer)가 서비스 제공자(Service Provider)에게 자신임을 식별하는데 사용하기 위한 키</td>
</tr>
<tr>
<td style="text-align:center">소비자 비밀번호(Consumer Secret)</td>
<td>소비자(Consumer)가 소유권을 인정하기 위해 소비자(Consumer)가 사용하는 Secret</td>
</tr>
<tr>
<td style="text-align:center">요청 토큰(Request Token)</td>
<td>소비자가 사용자에게 접근권한을 인증받기 위해 필요한 정보가 담겨 있으며 후에 접근 토큰(Access token)으로 변환</td>
</tr>
<tr>
<td style="text-align:center">접근 토큰(Access Token)</td>
<td>인증 후 사용자가 서비스 제공자가 아닌 소비자를 통해서 보호된 자원에 접근하기 위한 키를 포함한 값</td>
</tr>
<tr>
<td style="text-align:center">토큰 암호(Token Secret)</td>
<td>주어진 토큰의 소유권을 인증하기 위해 소비자가 사용하는 Secret</td>
</tr>
</tbody>
</table>
</div>
<h2 id="OAuth-1-0의-WorkFlow"><a href="#OAuth-1-0의-WorkFlow" class="headerlink" title="OAuth 1.0의 WorkFlow"></a>OAuth 1.0의 WorkFlow</h2><img src="/2020/03/27/1-OAuth-Info/oauth1workflow.png" class="" title="[그림1. OAuth 1.0의 WorkFlow]">
<p>사전에 소비자(Consumer)는 서비스 공급자(Service Provider)로부터 Client Key와 Secret을 발급 받아야한다. 이것은 서비스 공급자(Service Provider)의 API를 사용할 것을 등록하는 것과 동시에 서비스 공급자(Service Provider)가 소비자(Consumer)을 식별할 수 있게 한다.</p>
<h3 id="처리과정"><a href="#처리과정" class="headerlink" title="처리과정"></a>처리과정</h3><ol>
<li><p>Consumer는 Request Token을 받기위해 Consumer 정보, Signature 정보를 <code>A</code> 처럼 Service Provider에 보내어 Request Token을 요청하고 Service Provider는 Request Token을 발급하여 <code>B</code> 처럼 Consumer에게 결과를 보낸다.</p>
</li>
<li><p>Request Token을 받은 Consumer는 <code>C</code> 처럼 Service Provider의 인증 사이트로 이동하여 유저는 그곳에서 Service Provider의 유저임을 인증한다.</p>
</li>
<li>그러면 Service Provider는 <code>D</code>처럼 유저 인증이되면 Consumer에게 OAuth_token과 OAuth_verifier를 넘겨준다. </li>
<li>Consumer는 OAuth_token과 OAuth_verifier를 받고 <code>E</code>의 흐름처럼 다시 서명을 하여 Service Provider는 Access Token을 생성을 한다.</li>
<li>그리고 <code>F</code>처럼 다시 Consumer에게 Access Token을 전송하고 Accsss Token을 가진 Consumer는 Access Token 및 서명정보를 통해 <code>G</code> cjfja Service Progider의 Protected Resource에 접근할 수 있다.</li>
</ol>
<h3 id="Request-Token-요청-매개변수"><a href="#Request-Token-요청-매개변수" class="headerlink" title="Request Token 요청 매개변수"></a>Request Token 요청 매개변수</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">매개변수</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">oauth_callback</td>
<td>Service Provider가 인증을 완료한 후 리다이렉트할 Consumer의 웹 주소. 만약 Consumer가 웹 애플리케이션이 아니라 리다이렉트할 주소가 없다면 소문자로 ‘oob’(Out Of Band라는 뜻)를 값으로 사용한다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_consumer_key</td>
<td>Consumer를 구별하는 키 값. Service Provider는 이 키 값으로 Consumer를 구분한다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_nonce</td>
<td>Consumer에서 임시로 생성한 임의의 문자열. oauth_timestamp의 값이 같은 요청에서는 유일한 값이어야 한다. 이는 악의적인 목적으로 계속 요청을 보내는 것을 막기 위해서이다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_signature</td>
<td>OAuth 인증 정보를 암호화하고 인코딩하여 서명 값. OAuth 인증 정보는 매개변수 중에서 oauth_signature를 제외한 나머지 매개변수와 HTTP 요청 방식을 문자열로 조합한 값이다. 암화 방식은 oauth_signature_method에 정의된다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_signature_method</td>
<td>oauth_signature를 암호화하는 방법. HMAC-SHA1, HMAC-MD5 등을 사용할 수 있다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_timestamp</td>
<td>요청을 생성한 시점의 타임스탬프. 1970년1월 1일 00시 00분 00초 이후의 시간을 초로 환산한 초 단위의 누적 시간이다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_version</td>
<td>OAuth 사용버전. 1.0a는 1.0이라고 명시하면 된다.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="oauth-signature-만들기"><a href="#oauth-signature-만들기" class="headerlink" title="oauth_signature 만들기"></a>oauth_signature 만들기</h3><p>OAuth 1.0에서는 Service Provider에게 요청을 하려면 매번 oauth_signature 생성해야 한다. Consumer와 Service Provider가 같은 암호화(signing) 알고리즘을 이용하여 oauth_signature 만들어야 한다.</p>
<p>oauth_signature 다음과 같이 <code>네 단계</code>를 거쳐 만든다.</p>
<ol>
<li><p>요청 매개변수를 모두 모은다.<br>oauth<em>signature를 제외하고 ‘oauth</em>‘로 시작하는 OAuth 관련 매개변수를 모은다. POST body에서 매개변수를 사용하고 있다면 이 매개변수도 모아야 한다.</p>
</li>
<li><p>매개변수를 정규화(Normalize)한다.<br>모든 매개변수를 사전순으로 정렬하고 각각의 키(key)와 값(value)에 URL 인코딩(rfc3986)을 적용한다. URL 인코딩을 실시한 결과를 = 형태로 나열하고 각 쌍 사이에는 &amp;을 넣는다. 이렇게 나온 결과 전체에 또 URL 인코딩을 적용한다.</p>
</li>
<li><p>Signature Base String을 만든다.<br>HTTP method 명(GET 또는 POST), Consumer가 호출한 HTTP URL 주소(매개변수 제외), 정규화한 매개변수를 ‘&amp;’를 사용해 결합한다. 즉 ‘[GET|POST] + &amp; + [URL 문자열로 매개변수는 제외] + &amp; + [정규화한 매개변수]’ 형태가 된다. 이 예제에서는 ‘<a href="http://nid.naver.com/naver.oauth" target="_blank" rel="noopener">http://nid.naver.com/naver.oauth</a>‘ 을 URL로 사용하고, 이 URL에 URL 인코딩을 적용한 값을 사용했다.</p>
</li>
<li><p>키 생성<br>3번 과정까지 거쳐 생성한 문자열을 암호화한다. 암호화할 때 Consumer Secret Key를 사용한다. Consumer Secret Key는 Consumer가 Service Provider에 사용 등록을 할 때 발급받은 값이다. HMAC-SHA1 등의 암호화 방법을 이용하여 최종적인 oauth_signature를 생성한다.</p>
</li>
</ol>
<h3 id="Access-Token-생성-요청"><a href="#Access-Token-생성-요청" class="headerlink" title="Access Token 생성 요청"></a>Access Token 생성 요청</h3><p>Access Token을 요청하는 방법은 Request Token을 요청하는 방법과 거의 같지만, 사용하는 매개변수의 종류가 약간 다르고 oauth_signature를 생성할 때 사용하는 키가 다르다. </p>
<ul>
<li>Access Token 을 요청할 때에는 매개변수 oauth_callback는 없고, oauth_token와 oauth_verifer가 있다.</li>
<li>Request Token 발급을 요청할 때에는 Consumer Secret Key를 사용해 oauth_token_secret를 생성했다.</li>
<li>Access Token 발급을 요청할 때에는 Consumer Secret Key에 oauth_token_secret을 결합한 값(Consumer Secret Key + &amp; + oauth_token_secret)을 사용해 oauth_token_secret를 생성한다. 암호화 키를 변경하여 보안을 더 강화하는 것이다.</li>
</ul>
<p><strong>Access Token발급 요청 매개변수</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">매개변수</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">oauth_consumer_key</td>
<td>Consumer를 구별하는 키 값. Service Provider는 이 키 값으로 Consumer를 구분한다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_nonce</td>
<td>Consumer에서 임시로 생성한 임의의 문자열. oauth_timestamp의 값이 같은 요청에서는 유일한 값이어야 한다. 이는 악의적인 목적으로 계속 요청을 보내는 것을 막기 위해서이다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_signature</td>
<td>OAuth 인증 정보를 암호화하고 인코딩하여 서명 값. OAuth 인증 정보는 매개변수 중에서 oauth_signature를 제외한 나머지 매개변수와 HTTP 요청 방식을 문자열로 조합한 값이다. 암화 방식은 oauth_signature_method에 정의된다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_signature_method</td>
<td>oauth_signature를 암호화하는 방법. HMAC-SHA1, HMAC-MD5 등을 사용할 수 있다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_timestamp</td>
<td>요청을 생성한 시점의 타임스탬프. 1970년1월 1일 00시 00분 00초 이후의 시간을 초로 환산한 초 단위의 누적 시간이다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_version</td>
<td>OAuth 사용 버전</td>
</tr>
<tr>
<td style="text-align:center">oauth_verifier</td>
<td>Request Token 요청 시 oauth_callback으로 전달받은 oauth_verifier 값</td>
</tr>
<tr>
<td style="text-align:center">oauth_token</td>
<td>Request Token 요청 시 oauth_callback으로 전달받은 oauth_token 값</td>
</tr>
</tbody>
</table>
</div>
<p>위의 표에 정의한 매개변수를 상황에 맞게 정의한 다음 Access Token을 요청하면 oauth_token과 oauth_token_secret을 전달받게 된다. Service Provider에 따라 사용자의 아이디나 프로필 정보 같은 것들이 반환되기도 한다.</p>
<h3 id="Acess-Token-사용"><a href="#Acess-Token-사용" class="headerlink" title="Acess Token 사용"></a>Acess Token 사용</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">매개변수</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">oauth_consumer_key</td>
<td>Consumer를 구별하는 키 값. Service Provider는 이 키 값으로 Consumer를 구분한다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_nonce</td>
<td>Consumer에서 임시로 생성한 임의의 문자열. oauth_timestamp의 값이 같은 요청에서는 유일한 값이어야 한다. 이는 악의적인 목적으로 계속 요청을 보내는 것을 막기 위해서이다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_signature</td>
<td>OAuth 인증 정보를 암호화하고 인코딩하여 서명 값. OAuth 인증 정보는 매개변수 중에서 oauth_signature를 제외한 나머지 매개변수와 HTTP 요청 방식을 문자열로 조합한 값이다. 암화 방식은 oauth_signature_method에 정의된다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_signature_method</td>
<td>oauth_signature를 암호화하는 방법. HMAC-SHA1, HMAC-MD5 등을 사용할 수 있다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_timestamp</td>
<td>요청을 생성한 시점의 타임스탬프. 1970년1월 1일 00시 00분 00초 이후의 시간을 초로 환산한 초 단위의 누적 시간이다.</td>
</tr>
<tr>
<td style="text-align:center">oauth_version</td>
<td>OAuth 버전</td>
</tr>
<tr>
<td style="text-align:center">oauth_token</td>
<td>oauth_callback으로 전달받은 oauth_token</td>
</tr>
</tbody>
</table>
</div>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><p><a href="https://ko.wikipedia.org/wiki/OAuth" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/OAuth</a><br><a href="https://oauth.net/core/1.0/" target="_blank" rel="noopener">https://oauth.net/core/1.0/</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Security</category>
        <category>Authentication</category>
        <category>OAuth</category>
      </categories>
      <tags>
        <tag>OAuth</tag>
        <tag>Authentication</tag>
        <tag>인증</tag>
        <tag>보안</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-17298] 오큰수</title>
    <url>/2020/03/26/BaekJoon-17298-%E1%84%8B%E1%85%A9%E1%84%8F%E1%85%B3%E1%86%AB%E1%84%89%E1%85%AE/</url>
    <content><![CDATA[<h1 id="오큰수"><a href="#오큰수" class="headerlink" title="오큰수"></a>오큰수</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>크기가 N인 수열 A = A1, A2, …, AN이 있다. 수열의 각 원소 Ai에 대해서 오큰수 NGE(i)를 구하려고 한다. Ai의 오큰수는 오른쪽에 있으면서 Ai보다 큰 수 중에서 가장 왼쪽에 있는 수를 의미한다. 그러한 수가 없는 경우에 오큰수는 -1이다.</p>
<p>예를 들어, A = [3, 5, 2, 7]인 경우 NGE(1) = 5, NGE(2) = 7, NGE(3) = 7, NGE(4) = -1이다. A = [9, 5, 4, 8]인 경우에는 NGE(1) = -1, NGE(2) = 8, NGE(3) = 8, NGE(4) = -1이다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000,000)이 주어진다. 둘째에 수열 A의 원소 A1, A2, …, AN (1 ≤ Ai ≤ 1,000,000)이 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>총 N개의 수 NGE(1), NGE(2), …, NGE(N)을 공백으로 구분해 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">3 5 2 7</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 7 7 -1</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">9 5 4 8</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1 8 8 -1</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>스택을 이용하여 문제를 해결한다.</p>
<ul>
<li>오큰수를 찾지 못하면 해당 위치를 스택에 넣는다.</li>
<li>스택 가장 위에 있는 위치의 <code>A</code> 와 현재 <code>B</code> 라는 수와 비교하여 <code>B</code> 가 클 경우, 스택에 있는 <code>A</code>의 위치를 <code>pop</code> 하고 <code>A</code> 위치에 <code>B</code> 라는 수를 넣는다.</li>
<li>마지막에 스택에 남은 위치에는 큰 수가 없으므로 <code>-1</code>를 채운다.</li>
</ul>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        bigNumber();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bigNumber</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(in.readLine());</span><br><span class="line"></span><br><span class="line">        String s = in.readLine();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String[] A = s.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span> (n != A.length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] NGE = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        stack.push(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(A[i]);</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; Integer.parseInt(A[stack.peek()]) &lt; a) &#123;</span><br><span class="line">                NGE[stack.pop()] = a;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">                NGE[stack.pop()] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ans :  NGE) &#123;</span><br><span class="line">            out.write(ans + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="string">"\n"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/17298" target="_blank" rel="noopener">https://www.acmicpc.net/problem/17298</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>stack</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-10799] 쇠막대기</title>
    <url>/2020/03/26/BaekJoon-10799-ironbar/</url>
    <content><![CDATA[<h1 id="쇠막대기"><a href="#쇠막대기" class="headerlink" title="쇠막대기"></a>쇠막대기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>여러 개의 쇠막대기를 레이저로 절단하려고 한다. 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자른다. 쇠막대기와 레이저의 배치는 다음 조건을 만족한다.</p>
<p>쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있다. - 쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓는다.<br>각 쇠막대기를 자르는 레이저는 적어도 하나 존재한다.<br>레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않는다.<br>아래 그림은 위 조건을 만족하는 예를 보여준다. 수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치, 수직으로 그려진 점선 화살표는 레이저의 발사 방향이다.</p>
<p>이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있다.</p>
<p>레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 ‘( ) ’ 으로 표현된다. 또한, 모든 ‘( ) ’는 반드시 레이저를 표현한다.<br>쇠막대기의 왼쪽 끝은 여는 괄호 ‘ ( ’ 로, 오른쪽 끝은 닫힌 괄호 ‘) ’ 로 표현된다.<br>위 예의 괄호 표현은 그림 위에 주어져 있다.</p>
<p>쇠막대기는 레이저에 의해 몇 개의 조각으로 잘려지는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘려지고, 이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘려진다. </p>
<p>쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 주어졌을 때, 잘려진 쇠막대기 조각의 총 개수를 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>한 줄에 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 공백없이 주어진다. 괄호 문자의 개수는 최대 100,000이다. </p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>잘려진 조각의 총 개수를 나타내는 정수를 한 줄에 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">()(((()())(())()))(())</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">17</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(((()(()()))(())()))(()())</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">24</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>스택을 이용하여 문제를 해결할 수 있다. <code>()</code> 은 레이저이고, <code>(</code> 의 시작하여  <code>)</code> 끝은 쇠막대기를 열고 닫는 괄호이며, 쇠막대기 사이에는 <code>()</code> 들이 있다.</p>
<p>ex) (((()())(())()))</p>
<ol>
<li><code>(</code> 가 열릴 때마다 스택에 담는다</li>
<li><code>)</code> 가 닫히면 제일 가까이 있는 <code>(</code>를 꺼낸다.</li>
<li>만약 이전 괄호가 <code>)</code> 일 경우 1개만 증가하고(쇠막대기 1개를 레이저가 3번 자르면 쇠막대기는 4조각으로 나눠지기 때문에…) 그렇지않으면 스택의 사이즈 만큼 증가한다 <code>result += (before == &#39;)&#39;) ? 1 :stack.size();</code></li>
<li>이를 계속 반복.</li>
</ol>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ironBar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ironBar</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        String s = in.readLine();</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> before = <span class="string">' '</span>;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                    stack.push(ch);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                    stack.pop();</span><br><span class="line">                    result += (before == <span class="string">')'</span>) ? <span class="number">1</span> :stack.size();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            before = ch;</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(result + <span class="string">"\n"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/10799" target="_blank" rel="noopener">https://www.acmicpc.net/problem/10799</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>stack</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-17413] 단어뒤집기2(Word Flipping2)</title>
    <url>/2020/03/26/BaekJoon-17413-WordFlipping/</url>
    <content><![CDATA[<h1 id="단어뒤집기-2-Word-Flipping-2"><a href="#단어뒤집기-2-Word-Flipping-2" class="headerlink" title="단어뒤집기 2(Word Flipping 2)"></a>단어뒤집기 2(Word Flipping 2)</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>문자열 S가 주어졌을 때, 이 문자열에서 단어만 뒤집으려고 한다.</p>
<p>먼저, 문자열 S는 아래와과 같은 규칙을 지킨다.</p>
<p>알파벳 소문자(‘a’-‘z’), 숫자(‘0’-‘9’), 공백(‘ ‘), 특수 문자(‘&lt;’, ‘&gt;’)로만 이루어져 있다.<br>문자열의 시작과 끝은 공백이 아니다.<br>‘&lt;’와 ‘&gt;’가 문자열에 있는 경우 번갈아가면서 등장하며, ‘&lt;’이 먼저 등장한다. 또, 두 문자의 개수는 같다.<br>태그는 ‘&lt;’로 시작해서 ‘&gt;’로 끝나는 길이가 3 이상인 부분 문자열이고, ‘&lt;’와 ‘&gt;’ 사이에는 알파벳 소문자와 공백만 있다. 단어는 알파벳 소문자와 숫자로 이루어진 부분 문자열이고, 연속하는 두 단어는 공백 하나로 구분한다. 태그는 단어가 아니며, 태그와 단어 사이에는 공백이 없다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 문자열 S가 주어진다. S의 길이는 100,000 이하이다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 문자열 S의 단어를 뒤집어서 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">baekjoon online judge</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">noojkeab enilno egduj</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;open&gt;tag&lt;close&gt;</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;open&gt;gat&lt;close&gt;</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-3"><a href="#예제-입력-3" class="headerlink" title="예제 입력 3"></a>예제 입력 3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ab cd&gt;ef gh&lt;ij kl&gt;</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-3"><a href="#예제-출력-3" class="headerlink" title="예제 출력 3"></a>예제 출력 3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ab cd&gt;fe hg&lt;ij kl&gt;</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-4"><a href="#예제-입력-4" class="headerlink" title="예제 입력 4"></a>예제 입력 4</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">one1 two2 three3 4fourr 5five 6six</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-4"><a href="#예제-출력-4" class="headerlink" title="예제 출력 4"></a>예제 출력 4</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1eno 2owt 3eerht rruof4 evif5 xis6</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-5"><a href="#예제-입력-5" class="headerlink" title="예제 입력 5"></a>예제 입력 5</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;int&gt;&lt;max&gt;2147483647&lt;long long&gt;&lt;max&gt;9223372036854775807</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-5"><a href="#예제-출력-5" class="headerlink" title="예제 출력 5"></a>예제 출력 5</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;int&gt;&lt;max&gt;7463847412&lt;long long&gt;&lt;max&gt;7085774586302733229</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-6"><a href="#예제-입력-6" class="headerlink" title="예제 입력 6"></a>예제 입력 6</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;problem&gt;17413&lt;is hardest&gt;problem ever&lt;end&gt;</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-6"><a href="#예제-출력-6" class="headerlink" title="예제 출력 6"></a>예제 출력 6</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;problem&gt;31471&lt;is hardest&gt;melborp reve&lt;end&gt;</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-7"><a href="#예제-입력-7" class="headerlink" title="예제 입력 7"></a>예제 입력 7</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;   space   &gt;space space space&lt;    spa   c e&gt;</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-7"><a href="#예제-출력-7" class="headerlink" title="예제 출력 7"></a>예제 출력 7</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;   space   &gt;ecaps ecaps ecaps&lt;    spa   c e&gt;</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><ol>
<li>스택을이용하여 문제를 해결해 나갈 수 있다.</li>
<li>괄호를 처리하기위해 <code>tag</code>를 스위칭 하여 true이면 스택에 담지않고 출력하고 false 이면 스택에 문자열을 쌓는다.</li>
</ol>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        replace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">replace</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        String s = in.readLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> tag = <span class="keyword">false</span>;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">                    print(out, stack);</span><br><span class="line">                    out.write(ch);</span><br><span class="line">                    tag = <span class="keyword">true</span>; <span class="comment">// 괄호시작</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">                    out.write(ch);</span><br><span class="line">                    tag = <span class="keyword">false</span>; <span class="comment">//괄호 종료</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">if</span> (tag) &#123;</span><br><span class="line">                        out.write(ch);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">' '</span>) &#123;</span><br><span class="line">                        print(out, stack);</span><br><span class="line">                        out.write(ch);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        stack.push(ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        print(out, stack);</span><br><span class="line">        out.write(<span class="string">'\n'</span>);</span><br><span class="line">        out.flush();;</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(BufferedWriter out, Stack&lt;Character&gt; stack)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">            out.write(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/17413" target="_blank" rel="noopener">https://www.acmicpc.net/problem/17413</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>stack</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[ES6] 클래스(class)</title>
    <url>/2020/03/24/es6-classes/</url>
    <content><![CDATA[<h1 id="클래스-Class"><a href="#클래스-Class" class="headerlink" title="클래스(Class)"></a>클래스(Class)</h1><p>클래스는 프로토타입 기반 객체 지향 패턴을 더 쉽게 사용할 수 있게 할 수 있는 대체제로 클래스 패턴 생성을 더 쉽고 간단하게 생성할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//클래스 선언</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor 생성자</span></span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Hello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello! '</span> + <span class="keyword">this</span>._name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person(<span class="string">"Paik"</span>);</span><br><span class="line"><span class="keyword">const</span> friends = <span class="keyword">new</span> Person(<span class="string">"Lee"</span>);</span><br><span class="line">me.Hello();</span><br><span class="line">friends.Hello();</span><br></pre></td></tr></table></figure>
<h2 id="인스턴스-생성"><a href="#인스턴스-생성" class="headerlink" title="인스턴스 생성"></a>인스턴스 생성</h2><p>new 연산자를 이용하여 클래스 인스턴트를 생성한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo(); <span class="comment">//Foo는 Constructor</span></span><br></pre></td></tr></table></figure>
<p>만약 new 를 사용하지 않고 Foo() 만 입력할 경우 TypeError가 발생한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo() <span class="comment">// Uncaught TypeError: Class constructor Foo cannot be invoked without 'new'</span></span><br></pre></td></tr></table></figure>
<h2 id="constructor-생성자"><a href="#constructor-생성자" class="headerlink" title="constructor(생성자)"></a>constructor(생성자)</h2><p>constructor는 인스턴트스를 생성하고 클래스 필드를 초기화 할 수 있는 메소드이다. </p>
<ul>
<li>constructor는 클래스 내에 한 개만 존재할 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//클래스 선언</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//생성자</span></span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="comment">//this는 클래스가 생성할 인스턴스를 가리킴</span></span><br><span class="line">        <span class="comment">//_name은 클래스 필드</span></span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person(<span class="string">'Paik'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(me);</span><br></pre></td></tr></table></figure>
<p>constructor는 생략할 수 있고 <code>class Foo {}</code>와 같이 표현한 것과 동일하게 동작하고 빈 객체를 생성한다. 인스턴스에 프로퍼티를 추가하려면 인스턴스를 생성 한 후 프로퍼티를 동적으로 추가해야 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// Foo &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//동적 프로퍼티 할당 및 초기화</span></span><br><span class="line"></span><br><span class="line">foo.num = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//Foo &#123;num: 1&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="클래스-필드"><a href="#클래스-필드" class="headerlink" title="클래스 필드"></a>클래스 필드</h2><p>Class Body에는 메서드만 선언 할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    name = <span class="string">''</span>; <span class="comment">//SyntaxError</span></span><br><span class="line">    <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>필드 선언과 초기화는 constructor 안에서 선언한 클래스 필드를 생성할 인스턴스를 가리키는 this에 바인딩한다. 그러면 클래스 필드는 클래스가 생성할 때 인스턴스의 프로퍼티가 되고, 인스턴스를 통해 클래스 외부에서 언제나 참조가 가능한다. 언제나 <code>public</code></p>
<blockquote>
<p>ES6는 private, public protected 키워드를 지원하지 않는다.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name = '') &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="comment">//public class field</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo(<span class="string">'Paik'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(foo.name); <span class="comment">//field는 클래스 외부에서 참조 할 수 있음</span></span><br></pre></td></tr></table></figure>
<h2 id="Class-Field-declarations-proposal"><a href="#Class-Field-declarations-proposal" class="headerlink" title="Class Field declarations proposal"></a>Class Field declarations proposal</h2><ul>
<li>Field declarations</li>
<li>Private field</li>
<li>Static public fields</li>
</ul>
<p>이 코드는 최신브라우저(Chrome 72 이상), Node.js (버전 12 이상)에서 항상 작동<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    age = <span class="number">1</span>;           <span class="comment">// Field declaration</span></span><br><span class="line">    #height = 0;        // Private field</span><br><span class="line">    <span class="keyword">static</span> y = <span class="number">20</span>;      <span class="comment">// Static field;</span></span><br><span class="line">    static #sp = 30;    // Static private field</span><br><span class="line"></span><br><span class="line">    change() &#123;</span><br><span class="line">        this.#height = 10; //private 필드 참조</span><br><span class="line">        return this.#height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(me); <span class="comment">// &#123;age:10, #height: 0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(me.age);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(me.y); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(me.change());</span><br></pre></td></tr></table></figure></p>
<h2 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter, setter"></a>getter, setter</h2><h3 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h3><p>getter는 클래스 필드에 접근할 때 클래스 필드의 값을 가져온다. <code>get</code> 키워드를 사용할 수 있고 메서드 이름은 클래스 필드 이름처럼 사용할 수 있다. 즉</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//생성자</span></span><br><span class="line">    <span class="keyword">constructor</span>(arr = []) &#123;</span><br><span class="line">        <span class="keyword">this</span>._arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> firstElem() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._arr.length ? <span class="keyword">this</span>._arr[<span class="number">0</span>] : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.firstElem); <span class="comment">//get 키워드를 사용한 메서드를 불러올 때 필드명을 가져올 때처럼 사용</span></span><br></pre></td></tr></table></figure>
<h3 id="setter"><a href="#setter" class="headerlink" title="setter"></a>setter</h3><p>setter는 클래스 필드에 해당 값을 할당 할 때 사용하고 <code>set</code>키워드를 사용한다. setter도 메서드 이름을 클래스 필드처럼 사용된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//생성자</span></span><br><span class="line">    <span class="keyword">constructor</span>(arr = []) &#123;</span><br><span class="line">        <span class="keyword">this</span>._arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> firstElem() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._arr.length ? <span class="keyword">this</span>._arr[<span class="number">0</span>] : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> firstElem(elem) &#123;</span><br><span class="line">        <span class="keyword">this</span>._arr = [elem, ...this._arr]; <span class="comment">//... this._arr은 this._arr을 개별 요소로 분리</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">foo.firstElem = <span class="number">100</span>; <span class="comment">//set 키워드를 사용한 메서드로 데이터를 할당 할 때 필드명을 사용.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.firstElem); <span class="comment">//get 키워드를 사용한 메서드를 불러올 때 필드명을 가져올 때처럼 사용</span></span><br></pre></td></tr></table></figure>
<h2 id="정적-메서드-static-method"><a href="#정적-메서드-static-method" class="headerlink" title="정적 메서드 (static method)"></a>정적 메서드 (static method)</h2><p>정적 메서드를 정의 하려면 <code>static</code> 키워드를 사용하면 된다. 정적 메서드는 클래스의 인스턴스가 아닌 클래스 이름으로 호출한다. 그래서 클래스의 인스턴스를 생성하지 않아도 호출할 수 있다.</p>
<ul>
<li>정적 메서드는 <code>this</code>를 사용할 수 없으며, 정적 메서드 내부에서 클래스 인스턴스를 가리키는 것이 아니라 자기 자신을 기리킨다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age) &#123;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> staticMethod() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            정적 메서드는 this를 사용할 수 없으며, 정적 메서드 내부에서 클래스 인스턴스를 가리키는 것이 아니라 자기 자신을 기리킨다.</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'staticMethod age: '</span> + <span class="keyword">this</span>._age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    prototypeMethod() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//정적 메서드는 클래스 이름을 호출</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.staticMethod());  <span class="comment">//staticMethod age: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person(<span class="number">34</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//정적 메서드는 인스턴스로 호출할 수 없다.</span></span><br><span class="line"><span class="built_in">console</span>.log(me.staticMethod()); <span class="comment">//Uncaught TypeError: me.staticMethod is not a function</span></span><br></pre></td></tr></table></figure>
<p><strong>클래스도 function이고 기존 prototype 기반 패턴의 Syntatic suger일 뿐이다.</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person); <span class="comment">//function</span></span><br></pre></td></tr></table></figure>
<p>[ES5로 표현]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.staticMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'staticMethod age: '</span> + <span class="keyword">this</span>._age;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Person.prototype.prototypeMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Person;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person(<span class="number">34</span>);</span><br><span class="line"><span class="built_in">console</span>.log(me.prototypeMethod()); <span class="comment">//34</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.staticMethod()); <span class="comment">//staticMethod age: undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(me.staticMethod());<span class="comment">//Uncaught TypeError: me.staticMethod is not a function</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype === me.__proto__); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor === Person); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h2 id="클래스-상속-Class-Inheritance"><a href="#클래스-상속-Class-Inheritance" class="headerlink" title="클래스 상속(Class Inheritance)"></a>클래스 상속(Class Inheritance)</h2><p>클래스 상속은 새롭게 정의할 클래스가 기존 클래스와 유사할 경우 상속을 통해 그대로 사용하고 다른 점만 구현할 수 있다. 즉 하위 클래스에서 상속받아 상위 클래스의 정보를 다시 재사용할 수 있는 것이다. 코드의 재사용할 경우 개발 비용을 줄일 수 있다.</p>
<h3 id="extends-키워드"><a href="#extends-키워드" class="headerlink" title="extends 키워드"></a>extends 키워드</h3><p>extends는 부모 클래스를 상속받는 자식클래스를 정의 할 때 사용한다</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//부모클래스 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parents</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> setName(name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//자식 클래스  부모 클래스를 상속 받는다.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parents</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name); <span class="comment">//부모클래스 생성자</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> getAge() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> setAge(age) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    getInfo() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'My name is '</span> + <span class="keyword">this</span>.name + <span class="string">'and age is '</span> + <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Child(<span class="string">'hello'</span>, <span class="number">33</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child.getInfo()); <span class="comment">//My name is helloand age is 33</span></span><br><span class="line">child.setAge = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(child.getAge); <span class="number">20</span></span><br><span class="line"><span class="built_in">console</span>.log(child.getInfo()); <span class="comment">//My name is helloand age is 20</span></span><br><span class="line">child.setName = <span class="string">'World'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(child.getName); <span class="comment">//World</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child <span class="keyword">instanceof</span> Child); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(child <span class="keyword">instanceof</span> Parents); <span class="comment">//trye</span></span><br></pre></td></tr></table></figure>
<h3 id="super-키워드"><a href="#super-키워드" class="headerlink" title="super 키워드"></a>super 키워드</h3><p>super 는 부모클래스를 참조하거나 생성자를 호출할 때 사용한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parents</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> setName(name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//자식 클래스  부모 클래스를 상속 받는다.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parents</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name); <span class="comment">//부모클래스 생성자</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> getAge() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> setAge(age) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    getInfo() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'My name is '</span> + <span class="keyword">super</span>.getName + <span class="string">' and age is '</span> + <span class="keyword">this</span>.age; <span class="comment">//super를 통해 getName 참조</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Child(<span class="string">'hello'</span>, <span class="number">33</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child.getInfo()); <span class="comment">//My name is hello and age is 33</span></span><br><span class="line">child.setAge = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(child.getAge); <span class="number">20</span></span><br><span class="line"><span class="built_in">console</span>.log(child.getInfo()); <span class="comment">//My name is hello and age is 20</span></span><br><span class="line">child.setName = <span class="string">'World'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(child.getName); <span class="comment">//World</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child <span class="keyword">instanceof</span> Child); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(child <span class="keyword">instanceof</span> Parents); <span class="comment">//trye</span></span><br></pre></td></tr></table></figure>
<p>super 메서드는 자식 클래스의 생성자 내부에서 부모 클래스 생성자(슈퍼클래스)를 호출한다. 즉 부모 클래스의 인스턴스를 생성한다. 그래서 자식 클래스의 생성자에서 <code>super()</code>를 호출하지 않으면 this에 대한 참조 에러(ReferenceError)가 발생한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parents</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parents</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Child(); <span class="comment">//Uncaught ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor</span></span><br></pre></td></tr></table></figure>
<p>자식 클래스의 생성자에 <code>super()</code>를 추가해야한다. </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parents</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parents</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Child();</span><br></pre></td></tr></table></figure>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><p><strong><a href="https://poiemaweb.com/es6-class" target="_blank" rel="noopener">https://poiemaweb.com/es6-class</a></strong></p>
<p><strong><a href="https://jsdev.kr/t/es6/2944" target="_blank" rel="noopener">https://jsdev.kr/t/es6/2944</a></strong></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>JavaScript</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ECMASeript6</tag>
        <tag>Javascript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>[ES6]-Arrows</title>
    <url>/2020/03/24/es6-Arrows/</url>
    <content><![CDATA[<h1 id="Arrows"><a href="#Arrows" class="headerlink" title="Arrows"></a>Arrows</h1><p>Arrows 함수는 function 키워드 대신 화살표(‘=&gt;’) 를 사용하여 함수를 선언하는 축약형 함수이다. Arrows는 표현식 본문(Expression Bodies)와 상태 블럭 본문(Statement block bodies)를 지원한다. </p>
<ul>
<li>콜백 함수에서 사용하면 간결하게 표현이 가능.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//매개변수 지정 방법</span></span><br><span class="line">() =&gt; &#123;...&#125; <span class="comment">// 매개변수가 없는 경우</span></span><br><span class="line">x =&gt; &#123;...&#125; <span class="comment">// 매개변수가 한 개인 경우, 소괄호를 생략할 수 있다.</span></span><br><span class="line">(x,y) =&gt; &#123;...&#125; <span class="comment">//매개변수가 여러 개의 경우, 소괄호를 생략할 수 없다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//함수 몸체의 지정 방법</span></span><br><span class="line">x =&gt; &#123; <span class="keyword">return</span> x * x&#125; <span class="comment">//signle line block</span></span><br><span class="line">x =&gt; x * x <span class="comment">//함수의 몸체가 한줄구문이라면 중괄호를 생략할 수 있고 암묵적인 리턴이 된다.</span></span><br><span class="line"> </span><br><span class="line">() =&gt; &#123; <span class="keyword">return</span> &#123; <span class="attr">a</span>:<span class="number">1</span> &#125;; &#125;</span><br><span class="line">() -&gt; (&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;) <span class="comment">//위 표현과 동일하고 객체 반환시 소괄호를 사용한다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Multi line Block</span></span><br><span class="line">() =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>화살표 함수는 익명함수로만 사용할 수 있다. 화살표를 호출 하기 위해서는 함수 호출 식을 사용한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> pow = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x * x &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(pow(<span class="number">10</span>)); <span class="comment">//100;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">const</span> pow = <span class="function"><span class="params">x</span> =&gt;</span> x * x;</span><br><span class="line"><span class="built_in">console</span>.log(pow(<span class="number">10</span>)); <span class="comment">//100;</span></span><br></pre></td></tr></table></figure>
<p>콜백함수로도 사용할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> pow = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(pow); <span class="comment">//[1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> pow2 arr2.map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"><span class="built_in">console</span>.log(pow2); <span class="comment">//[1, 4, 9]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> evens = [<span class="number">2</span>, <span class="number">4</span> ,<span class="number">6</span> ,<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Expression Bodies(표현식의 결과가 반환됨)</span></span><br><span class="line"><span class="keyword">var</span> odds = evens.map(<span class="function"><span class="params">v</span> =&gt;</span> v + <span class="number">1</span>); <span class="comment">//[3, 5, 7, 9]</span></span><br><span class="line"><span class="keyword">var</span> nums = evens.map(<span class="function">(<span class="params">v, i</span>) =&gt;</span> v + i);  <span class="comment">//[2, 5, 8, 11]</span></span><br><span class="line"><span class="keyword">var</span> pairs = evens.map(<span class="function"><span class="params">v</span> =&gt;</span> (&#123;<span class="attr">even</span>: v, <span class="attr">odd</span>: v +  <span class="number">1</span> &#125;)); <span class="comment">// &#123;even: 2, odd: 3&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="일반함수의-this"><a href="#일반함수의-this" class="headerlink" title="일반함수의 this"></a>일반함수의 this</h3><p>function 키워드로 생성한 일반함수와 화살표 함수의 가장 큰 차이는 <code>this</code>이다.</p>
<p>자바스크립트는 함추 호출 방식에 의해 this를 바인딩할 어떤 객체가 동적으로 결정된다. 즉 함수를 호출할 때 함수가 어떻게 호출되었는지에 따라 this에 바인딩할 객체가 동적으로 결정</p>
<h3 id="화살표-함수의-this"><a href="#화살표-함수의-this" class="headerlink" title="화살표 함수의 this"></a>화살표 함수의 this</h3><p>화살표 함수는 함수를 선언 할 때 this에 바인딩할 객체가 정적으로 결정된다. 즉, 언제나 상위 스코프의 this를 가리킨다. 이를 <code>Lexical this</code>라고 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Prefixer</span>(<span class="params">prefix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Prefixer.prototype.prefixArray = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//this는 상위 스코프인 prefixArray 메소드 내의 this를 가리킨다.</span></span><br><span class="line">    <span class="keyword">return</span> arr.map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.prefix&#125;</span> <span class="subst">$&#123;x&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pre = <span class="keyword">new</span> Prefixer(<span class="string">'Hello'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pre.prefixArray([<span class="string">'Hong'</span>,<span class="string">'Paik'</span>]));</span><br></pre></td></tr></table></figure>
<p>화살표 함수는 call, apply, bind메소드를 사용하여 this를 변경할 수 없다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> normal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arrow = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(normal.call(&#123;<span class="attr">x</span>: <span class="number">10</span>&#125;)); <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(arrow.call(&#123;<span class="attr">x</span>: <span class="number">10</span>&#125;)); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Statement bodies(내부 블럭을 실행만 함, 반환을 위해선 return을 명시)</span></span><br><span class="line">nums.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (v % <span class="number">5</span> === <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Loxical this</span></span><br><span class="line"><span class="comment">//출력결과 : Bob knows John, Brian</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bob = &#123;</span><br><span class="line">    _name: <span class="string">"Bob"</span>,</span><br><span class="line">    _friends: [<span class="string">"John"</span>, <span class="string">"Brian"</span>],</span><br><span class="line">    printFriends() &#123;</span><br><span class="line">        <span class="keyword">this</span>._friends.forEach(<span class="function"><span class="params">f</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>._name + <span class="string">" knows "</span> + f));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bob.printFriends();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> materials = [</span><br><span class="line">    <span class="string">'Hydrogen'</span>,</span><br><span class="line">    <span class="string">'Helium'</span>,</span><br><span class="line">    <span class="string">'Lithium'</span>,</span><br><span class="line">    <span class="string">'Beryllium'</span></span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.log(materials.map(<span class="function"><span class="params">m</span> =&gt;</span> m.length));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pow = <span class="function">(<span class="params">x</span>) =&gt;</span> x * x;</span><br><span class="line"><span class="built_in">console</span>.log(pow(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<h2 id="화살표-함수를-사용해서-안되는-경우"><a href="#화살표-함수를-사용해서-안되는-경우" class="headerlink" title="화살표 함수를 사용해서 안되는 경우"></a>화살표 함수를 사용해서 안되는 경우</h2><h3 id="메서드"><a href="#메서드" class="headerlink" title="메서드"></a>메서드</h3><p>화살표 함수로 메소드를 정의하는 것은 피해야 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Bad Code</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">'Paik'</span>,</span><br><span class="line">    sayHello: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>); <span class="comment">// 상위 컨텍스트 전역객체인 window를 가리킴</span></span><br><span class="line">&#125;</span><br><span class="line">person.sayHello(); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Good </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">'Paik'</span>,</span><br><span class="line">    sayHello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.sayHello(); <span class="comment">//Hello Paik</span></span><br></pre></td></tr></table></figure>
<h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>화살표로 정의된 메소드를 prototype에 할당할 경우 일반함수를 할당한다.</p>
<h3 id="생성자-함수"><a href="#생성자-함수" class="headerlink" title="생성자 함수"></a>생성자 함수</h3><p>생성자 함수는 prototype 프로퍼티를 가지며 prototype 프로퍼티가 가리키는 프로토타입 객체의 constructor를 사용한다. 그러나 화살표 함수는 prototype 프로퍼티를 가지고 있지 않다.</p>
<h3 id="addEventListener-함수의-콜백-함수"><a href="#addEventListener-함수의-콜백-함수" class="headerlink" title="addEventListener 함수의 콜백 함수"></a>addEventListener 함수의 콜백 함수</h3><p>addEventListener 함수의 콜백함수를 화살표로 정의 하면 this가 상위 컨택스트인 전역객체 window를 가리킨다. 그래서 function 키워드로 정의한 일반함수를 사용해야 하며, 이런 일반함수로 정의된 addEventListener 함수의 콜백 내부 this는 이벤트 리스너의 바인딩 요소를 가리킨다.</p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><p><a href="https://poiemaweb.com/es6-arrow-function" target="_blank" rel="noopener">https://poiemaweb.com/es6-arrow-function</a></p>
<p><a href="https://jsdev.kr/t/es6/2944" target="_blank" rel="noopener">https://jsdev.kr/t/es6/2944</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>JavaScript</category>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ECMASeript6</tag>
        <tag>Javascript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-1158] 요세푸스 문제(Josephus problem)</title>
    <url>/2020/03/23/BaekJoon-1158-Josephus/</url>
    <content><![CDATA[<h1 id="BaekJoon-1158-요세푸스-문제-Josephus-of-problem"><a href="#BaekJoon-1158-요세푸스-문제-Josephus-of-problem" class="headerlink" title="[BaekJoon-1158] 요세푸스 문제(Josephus of problem)"></a>[BaekJoon-1158] 요세푸스 문제(Josephus of problem)</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>요세푸스 문제는 다음과 같다.</p>
<p>1번부터 N번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다. 이제 순서대로 K번째 사람을 제거한다. 한 사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다. 이 과정은 N명의 사람이 모두 제거될 때까지 계속된다. 원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열이라고 한다. 예를 들어 (7, 3)-요세푸스 순열은 <3, 6, 2, 7, 5, 1, 4>이다.</p>
<p>N과 K가 주어지면 (N, K)-요세푸스 순열을 구하는 프로그램을 작성하시오.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 N과 K가 빈 칸을 사이에 두고 순서대로 주어진다. (1 ≤ K ≤ N ≤ 5,000)</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>예제와 같이 요세푸스 순열을 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 3</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;3, 6, 2, 7, 5, 1, 4&gt;</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>큐를 이용하여 문제를 해결 할 수 있다.</p>
<p><strong>N 이 7 이고 K 가 3 일 경우</strong></p>
<ol>
<li>K번 째가 되기 전 까지 맨 앞 데이터를 꺼내어(poll) 다시 queue에 맨 뒤에 삽입(offer) 한다.</li>
<li>K 번째가 되었을 때 맨 앞 데이터를 꺼내어(poll) list에 담거나, 문자열에 담는다.</li>
</ol>
<p>끝.</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        josephus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">josephus</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line"></span><br><span class="line">        String[] input = in.readLine().split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(input[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> k = Integer.parseInt(input[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; i++) &#123;</span><br><span class="line">            queue.offer(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"&lt;"</span>);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k == cnt) &#123;</span><br><span class="line">                cnt = <span class="number">1</span>;</span><br><span class="line">                sb.append(queue.poll());</span><br><span class="line">                <span class="keyword">if</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                    sb.append(<span class="string">", "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                queue.offer(queue.poll());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">"&gt;"</span>);</span><br><span class="line">        out.write(<span class="string">""</span>+ sb.toString());</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/1158" target="_blank" rel="noopener">https://www.acmicpc.net/problem/1158</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>코딩테스트</tag>
        <tag>queue</tag>
        <tag>큐</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-1406] 에디터(Editor)</title>
    <url>/2020/03/23/BaekJoon-1406-editor/</url>
    <content><![CDATA[<h1 id="BaekJoon-1406-에디터-Editor"><a href="#BaekJoon-1406-에디터-Editor" class="headerlink" title="[BaekJoon-1406] 에디터(Editor)"></a>[BaekJoon-1406] 에디터(Editor)</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>한 줄로 된 간단한 에디터를 구현하려고 한다. 이 편집기는 영어 소문자만을 기록할 수 있는 편집기로, 최대 600,000글자까지 입력할 수 있다.</p>
<p>이 편집기에는 ‘커서’라는 것이 있는데, 커서는 문장의 맨 앞(첫 번째 문자의 왼쪽), 문장의 맨 뒤(마지막 문자의 오른쪽), 또는 문장 중간 임의의 곳(모든 연속된 두 문자 사이)에 위치할 수 있다. 즉 길이가 L인 문자열이 현재 편집기에 입력되어 있으면, 커서가 위치할 수 있는 곳은 L+1가지 경우가 있다.</p>
<p>이 편집기가 지원하는 명령어는 다음과 같다.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">L</td>
<td>커서를 왼쪽으로 한 칸 옮김 (커서가 문장의 맨 앞이면 무시됨)</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td>커서를 오른쪽으로 한 칸 옮김 (커서가 문장의 맨 뒤이면 무시됨)</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td>커서 왼쪽에 있는 문자를 삭제함 (커서가 문장의 맨 앞이면 무시됨) 삭제로 인해 커서는 한 칸 왼쪽으로 이동한 것처럼 나타나지만, 실제로 커서의 오른쪽에 있던 문자는 그대로임</td>
</tr>
<tr>
<td style="text-align:center">P $</td>
<td>$라는 문자를 커서 왼쪽에 추가함</td>
</tr>
</tbody>
</table>
</div>
<p>초기에 편집기에 입력되어 있는 문자열이 주어지고, 그 이후 입력한 명령어가 차례로 주어졌을 때, 모든 명령어를 수행하고 난 후 편집기에 입력되어 있는 문자열을 구하는 프로그램을 작성하시오. 단, 명령어가 수행되기 전에 커서는 문장의 맨 뒤에 위치하고 있다고 한다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에는 초기에 편집기에 입력되어 있는 문자열이 주어진다. 이 문자열은 길이가 N이고, 영어 소문자로만 이루어져 있으며, 길이는 100,000을 넘지 않는다. 둘째 줄에는 입력할 명령어의 개수를 나타내는 정수 M(1 ≤ M ≤ 500,000)이 주어진다. 셋째 줄부터 M개의 줄에 걸쳐 입력할 명령어가 순서대로 주어진다. 명령어는 위의 네 가지 중 하나의 형태로만 주어진다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>첫째 줄에 모든 명령어를 수행하고 난 후 편집기에 입력되어 있는 문자열을 출력한다.</p>
<h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abcd</span><br><span class="line">3</span><br><span class="line">P x</span><br><span class="line">L</span><br><span class="line">P y</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abcdyx</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc</span><br><span class="line">9</span><br><span class="line">L</span><br><span class="line">L</span><br><span class="line">L</span><br><span class="line">L</span><br><span class="line">L</span><br><span class="line">P x</span><br><span class="line">L</span><br><span class="line">B</span><br><span class="line">P y</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yxabc</span><br></pre></td></tr></table></figure>
<h3 id="예제-입력-3"><a href="#예제-입력-3" class="headerlink" title="예제 입력 3"></a>예제 입력 3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dmih</span><br><span class="line">11</span><br><span class="line">B</span><br><span class="line">B</span><br><span class="line">P x</span><br><span class="line">L</span><br><span class="line">B</span><br><span class="line">B</span><br><span class="line">B</span><br><span class="line">P y</span><br><span class="line">D</span><br><span class="line">D</span><br><span class="line">P z</span><br></pre></td></tr></table></figure>
<h3 id="예제-출력-3"><a href="#예제-출력-3" class="headerlink" title="예제 출력 3"></a>예제 출력 3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yxz</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p><strong>커서(cursor : |)를 기준으로 왼쪽 스택(left) 오른쪽 스택(right)로 나누어서 문제를 해결할 수 있다.</strong></p>
<p>스택을 2개 만들고 문자열을 left에 초기화로 넣고 문제를 해결해 나가면 된다.</p>
<ol>
<li>L 일 경우 왼쪽 스택 데이터를 Pop 하여 오른쪽 스택으로 Push 한다.</li>
<li>D 일 경우 오른족 스택 데이터를 Pop 하여 왼쪽으로 움긴다.</li>
<li>B 일 경우 왼쪽에 있는 스택 데이터를 하나 삭제(Pop)한다.</li>
<li>P $ 일 경우 $를 스택 왼쪽에 추가(Push) 하면된다. </li>
</ol>
<p><strong>알고리즘 분류를 보면 연결리스트라고 되어 있는데 연결리스트를 통해 문제를 풀면 시간초과로 Fail이 되버린다. </strong></p>
<p>&lt;연결리스트 소스코드 시간초과&gt;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        editorLinkedList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">editorLinkedList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String read = in.readLine();</span><br><span class="line">        <span class="keyword">if</span> (read.length() &gt; <span class="number">100000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(in.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m &lt; <span class="number">1</span> || m &gt; <span class="number">500000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Character&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : read.toCharArray())</span><br><span class="line">            list.add(ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> idx = list.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            String input = in.readLine();</span><br><span class="line">            <span class="keyword">char</span>[] chs = input.toCharArray();</span><br><span class="line">            <span class="keyword">switch</span> (chs[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">                    idx = (idx == <span class="number">0</span>) ? <span class="number">0</span> : --idx;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                    idx = (idx == list.size()) ? idx : ++idx;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">                    <span class="keyword">if</span> (idx != <span class="number">0</span>)</span><br><span class="line">                        list.remove(idx- <span class="number">1</span>);</span><br><span class="line">                    idx = (idx == <span class="number">0</span>) ? <span class="number">0</span> : --idx;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'P'</span>:</span><br><span class="line">                    list.add(idx++, chs[<span class="number">2</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : list) &#123;</span><br><span class="line">            out.write(ch + <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.flush();</span><br><span class="line"></span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="최종-소스코드"><a href="#최종-소스코드" class="headerlink" title="최종 소스코드"></a>최종 소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        editor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">editor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String read = in.readLine();</span><br><span class="line">        <span class="keyword">if</span> (read.length() &gt; <span class="number">100000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(in.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m &lt; <span class="number">1</span> || m &gt; <span class="number">500000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Character&gt; left = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Character&gt; right = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : read.toCharArray())</span><br><span class="line">            left.push(ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            String input = in.readLine();</span><br><span class="line">            <span class="keyword">switch</span> (input.charAt(<span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">                    <span class="keyword">if</span> (!left.isEmpty())</span><br><span class="line">                        right.push(left.pop());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                    <span class="keyword">if</span> (!right.isEmpty())</span><br><span class="line">                        left.push(right.pop());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">                    <span class="keyword">if</span> (!left.isEmpty())</span><br><span class="line">                        left.pop();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'P'</span>:</span><br><span class="line">                    left.push(input.charAt(<span class="number">2</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!left.isEmpty()) &#123;</span><br><span class="line">            right.push(left.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!right.isEmpty()) &#123;</span><br><span class="line">            out.write(<span class="string">""</span> + right.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        out.flush();</span><br><span class="line"></span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/1406" target="_blank" rel="noopener">https://www.acmicpc.net/problem/1406</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>stack</tag>
        <tag>코딩테스트</tag>
        <tag>스택</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-1874] 스택수열(Stack Sequence)</title>
    <url>/2020/03/23/BaekJoon-1874-StackSequence/</url>
    <content><![CDATA[<h1 id="BaekJoon-1874-스택수열-Stack-Sequence"><a href="#BaekJoon-1874-스택수열-Stack-Sequence" class="headerlink" title="[BaekJoon-1874] 스택수열(Stack Sequence)"></a>[BaekJoon-1874] 스택수열(Stack Sequence)</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>스택 (stack)은 기본적인 자료구조 중 하나로, 컴퓨터 프로그램을 작성할 때 자주 이용되는 개념이다. 스택은 자료를 넣는 (push) 입구와 자료를 뽑는 (pop) 입구가 같아 제일 나중에 들어간 자료가 제일 먼저 나오는 (LIFO, Last in First out) 특성을 가지고 있다.</p>
<p>1부터 n까지의 수를 스택에 넣었다가 뽑아 늘어놓음으로써, 하나의 수열을 만들 수 있다. 이때, 스택에 push하는 순서는 반드시 오름차순을 지키도록 한다고 하자. 임의의 수열이 주어졌을 때 스택을 이용해 그 수열을 만들 수 있는지 없는지, 있다면 어떤 순서로 push와 pop 연산을 수행해야 하는지를 알아낼 수 있다. 이를 계산하는 프로그램을 작성하라.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫 줄에 n (1 ≤ n ≤ 100,000)이 주어진다. 둘째 줄부터 n개의 줄에는 수열을 이루는 1이상 n이하의 정수가 하나씩 순서대로 주어진다. 물론 같은 정수가 두 번 나오는 일은 없다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>입력된 수열을 만들기 위해 필요한 연산을 한 줄에 한 개씩 출력한다. push연산은 +로, pop 연산은 -로 표현하도록 한다. 불가능한 경우 NO를 출력한다.</p>
<h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">+</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">-</span><br><span class="line">-</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">-</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">-</span><br><span class="line">-</span><br><span class="line">-</span><br><span class="line">-</span><br><span class="line">-</span><br></pre></td></tr></table></figure>
<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NO</span><br></pre></td></tr></table></figure>
<h2 id="힌트"><a href="#힌트" class="headerlink" title="힌트"></a>힌트</h2><p>1부터 n까지에 수에 대해 차례로 [push, push, push, push, pop, pop, push, push, pop, push, push, pop, pop, pop, pop, pop] 연산을 수행하면 수열 [4, 3, 6, 8, 7, 5, 2, 1]을 얻을 수 있다.</p>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><ul>
<li>1부터 N까지의 수를 스택에 넣었다가 뽑음으로 하나의 수열을 만듬</li>
<li>push 순서 오르차순</li>
<li>임의 수열이 주어졌을 때 풀 수 있는지 없는지 있을 경우 Push (+) pop(-) // 풀수없을 경우 NO 출력</li>
</ul>
<p>예제입력 seq = [4, 3, 6, 8, 7, 5, 2, 1] 가 주어 졌을 때<br>출력 + + + + - - + + - + + - - - - - 이 된다.</p>
<ol>
<li>일단 1부터 N까지의 순차적으로 루프를 돌며 seq[i] 번째 데이터와 일치할 때 가지 루프를 돌며 스택에 데이터를 push한다.</li>
<li>seq[i] 번째 값이 스택에 있으면 pop해 나간다.</li>
</ol>
<img src="/2020/03/23/BaekJoon-1874-StackSequence/stacksequence1.png" class="" title="&lt;그림1. 처리순서&gt;">
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        stackSequence();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stackSequence</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(in.readLine());</span><br><span class="line">        <span class="keyword">int</span>[] seq = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            seq[i] = Integer.parseInt(in.readLine());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> data : seq) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m &lt; data) &#123;</span><br><span class="line">                <span class="keyword">while</span> (m &lt; data) &#123;</span><br><span class="line">                    stack.push(++m);</span><br><span class="line">                    sb.append(<span class="string">"+\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                stack.pop();</span><br><span class="line">                sb.append(<span class="string">"-\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.peek() != data) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"NO"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.pop();</span><br><span class="line">                sb.append(<span class="string">"-\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.write(sb.toString());</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/1874" target="_blank" rel="noopener">https://www.acmicpc.net/problem/1874</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>stack</tag>
        <tag>코딩테스트</tag>
        <tag>스택</tag>
      </tags>
  </entry>
  <entry>
    <title>4. 큐(Queue)</title>
    <url>/2020/03/21/4-queue/</url>
    <content><![CDATA[<h1 id="큐-Queue"><a href="#큐-Queue" class="headerlink" title="큐(Queue)"></a>큐(Queue)</h1><h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>한쪽 끝에서 자료를 넣으면 다른 한쪽 끝에서 자료를 뺄 수 있는구조로 쉽게 말해서 먼저들어온 데이터가 먼저 나오는 구조라고해서 FIFO(First In First Out)라고 부른다.</p>
<img src="/2020/03/21/4-queue/queue1.png" class="" title="&lt;그림1. 큐&gt;">
<h2 id="큐의-연산"><a href="#큐의-연산" class="headerlink" title="큐의 연산"></a>큐의 연산</h2><ul>
<li>enqueue : 데이터를 큐에 삽입</li>
<li>dequeue : 제일 첫 번째 들어온 데이터를 제거</li>
<li>큐의 전단은 front, 후단은 rear로 이루어짐</li>
<li>새로운 데이터가 들어오면 rear가 하나씩 증가</li>
<li>데이터를 빼내면 front가 다음 queue에 저장되어 있는 데이터를 가리킴</li>
</ul>
<h3 id="enqueue"><a href="#enqueue" class="headerlink" title="enqueue"></a>enqueue</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Object[] queue, <span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">  queue[rear++] = data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue"></a>dequeue</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Object <span class="title">dequeue</span><span class="params">(Object[] queue)</span> </span>&#123;</span><br><span class="line">  queue[front++] = data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="배열에서-단순-큐의-문제점"><a href="#배열에서-단순-큐의-문제점" class="headerlink" title="배열에서 단순 큐의 문제점"></a>배열에서 단순 큐의 문제점</h2><ul>
<li>배열에서 큐가 차면 데이터를 빼내야 하고, front 앞의 배열에는 공백이 생긴다(가용용량이 줄어들어버림). 또 다른경우 데이터를 빼낼 때 기존 데이터를 배열의 첫 번 째 위치로 이동해야하는 연산이 생길 수 있다.</li>
<li>이런 문제를 해결하기 위해 Circular Queue 를 활용한다.</li>
</ul>
<h1 id="원형-큐-Circular-Queue"><a href="#원형-큐-Circular-Queue" class="headerlink" title="원형 큐(Circular Queue)"></a>원형 큐(Circular Queue)</h1><ul>
<li>배열의 끝(rear)과 시작(front)부분을 이어 순환시키도록 하는 것.</li>
<li>배열의 rear에 데이터를 삽입하면서 rear의 다음이 front와 만나면 배열이 꽉차게 됨.</li>
</ul>
<img src="/2020/03/21/4-queue/queue2.png" class="" title="&lt;그림2. 원형 큐(Circular Qeueue) &gt;">
<p>CircularQueue.c</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include "CircularQueue.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createQueue</span>(<span class="params">Queue **queue, <span class="keyword">int</span> capacity</span>)</span> &#123;</span><br><span class="line">    (*queue) = (Queue*)malloc(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    (*queue)-&gt;capacity = capacity;</span><br><span class="line">    (*queue)-&gt;front = <span class="number">0</span>;</span><br><span class="line">    (*queue)-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    (*queue)-&gt;nodes = (Node*)malloc(<span class="keyword">sizeof</span>(Node)* (capacity+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span>(<span class="params">Queue *queue, element data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> rear = (queue-&gt;rear) % queue-&gt;capacity;</span><br><span class="line">    queue-&gt;nodes[rear].data = data;</span><br><span class="line">    queue-&gt;rear = rear + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dequeue</span>(<span class="params">Queue *queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> front = (queue-&gt;front) % queue-&gt;capacity;</span><br><span class="line">    queue-&gt;nodes[front].data;</span><br><span class="line">    queue-&gt;front = front+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span>(<span class="params">Queue *queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (queue-&gt;front == queue-&gt;rear) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isFull</span>(<span class="params">Queue *queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (queue-&gt;rear % queue-&gt;capacity == queue-&gt;front) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (queue-&gt;front == (queue-&gt;rear+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CircularQueue.h</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#ifndef CIRCULARQUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CIRCULARQUEUE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">int</span> element;</span><br><span class="line">typedef <span class="keyword">struct</span> _Node &#123;</span><br><span class="line">    element data;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">struct</span> _Queue &#123;</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    Node* nodes;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createQueue</span>(<span class="params">Queue **queue, <span class="keyword">int</span> capacity</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span>(<span class="params">Queue *queue, element data</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dequeue</span>(<span class="params">Queue *queue</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span>(<span class="params">Queue *queue</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isFull</span>(<span class="params">Queue *queue</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> //CIRCULARQUEUE_H</span></span><br></pre></td></tr></table></figure>
<h2 id="ArrayList-Queue-java-version"><a href="#ArrayList-Queue-java-version" class="headerlink" title="ArrayList Queue java version"></a>ArrayList Queue java version</h2><p>Queue.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T t)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ArrayQueue.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Object[] queue;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.capacity = DEFAULT_CAPACITY;</span><br><span class="line">		<span class="keyword">this</span>.front = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.rear = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.length  = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.queue = <span class="keyword">new</span> Object[capacity];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">		<span class="keyword">this</span>.front = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.rear = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.queue = <span class="keyword">new</span> Object[capacity];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"queue is Full..."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> rear = (<span class="keyword">this</span>.rear) % <span class="keyword">this</span>.capacity;</span><br><span class="line">		queue[rear] = data;</span><br><span class="line">		<span class="keyword">this</span>.rear = rear+ <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">this</span>.length++;</span><br><span class="line">		System.out.println(<span class="string">"enqueue : rear : "</span>+  rear +<span class="string">" front : "</span>+ front);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"queue is empty..."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> front = ((<span class="keyword">this</span>.front) % <span class="keyword">this</span>.capacity);</span><br><span class="line">		Object data = queue[front];</span><br><span class="line">		queue[front] = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">this</span>.front  = front + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">this</span>.length--;</span><br><span class="line">		System.out.println(<span class="string">"dequeue : rear : "</span>+  rear +<span class="string">" front : "</span>+ front);</span><br><span class="line">		<span class="keyword">return</span> (T)data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (length == capacity) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ( length == <span class="number">0</span> || front == rear) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[ ]"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;length; i++) &#123;</span><br><span class="line">				sb.append(queue[i]);</span><br><span class="line">				<span class="keyword">if</span> (i != length-<span class="number">1</span>) &#123;</span><br><span class="line">					sb.append(<span class="string">", "</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append(<span class="string">"]"</span>);</span><br><span class="line">			<span class="keyword">return</span> sb.toString();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="연결리스트-큐-LinkedList-Queue"><a href="#연결리스트-큐-LinkedList-Queue" class="headerlink" title="연결리스트 큐 (LinkedList Queue)"></a>연결리스트 큐 (LinkedList Queue)</h1><ul>
<li>연결리스트 큐를 이용하면 용량상태를 확인할 필요가 없으며 용량의 제한이 없어서 가득찬다는 개념이 존재하지 않음</li>
<li>front에서 데이터를 빼낼 때 next Node를 연결 해제 해주면 되므로 삽입 삭제가 편리</li>
</ul>
<p>LinkedQueue.h</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#ifndef LINKQUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINKQUEUE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">int</span> element;</span><br><span class="line">typedef <span class="keyword">struct</span> _Node &#123;</span><br><span class="line">    element data;</span><br><span class="line">    <span class="keyword">struct</span> _Node* next;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">struct</span> _Queue &#123;</span><br><span class="line">    Node* front;</span><br><span class="line">    Node* rear;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">&#125;LinkedQueue;</span><br><span class="line"></span><br><span class="line">Node *createNode(element data);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createQueue</span>(<span class="params">LinkedQueue **queue</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span>(<span class="params">LinkedQueue *queue, Node* newNode</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dequeue</span>(<span class="params">LinkedQueue *queue</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span>(<span class="params">LinkedQueue *queue</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> //LINKQUEUE_H</span></span><br></pre></td></tr></table></figure>
<p>LinkQueue.c</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include "LinkQueue.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createQueue</span>(<span class="params">LinkedQueue **queue</span>)</span> &#123;</span><br><span class="line">    (*queue) = (LinkedQueue*)malloc((<span class="keyword">sizeof</span>(LinkedQueue)));</span><br><span class="line">    (*queue)-&gt;front = NULL;</span><br><span class="line">    (*queue)-&gt;rear = NULL;</span><br><span class="line">    (*queue)-&gt;count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *createNode(element data) &#123;</span><br><span class="line">    Node* newNode = (Node*)malloc(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;next = NULL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span>(<span class="params">LinkedQueue *queue, Node* newNode</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (queue-&gt;front == NULL) &#123;</span><br><span class="line">        queue-&gt;front = newNode;</span><br><span class="line">        queue-&gt;rear = newNode;</span><br><span class="line">        queue-&gt;count++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queue-&gt;rear-&gt;next = newNode;</span><br><span class="line">        queue-&gt;rear = newNode;</span><br><span class="line">        queue-&gt;count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dequeue</span>(<span class="params">LinkedQueue *queue</span>)</span> &#123;</span><br><span class="line">    Node* front = queue-&gt;front;</span><br><span class="line">    <span class="keyword">if</span> (queue-&gt;front-&gt;next == NULL) &#123;</span><br><span class="line">        queue-&gt;front = NULL;</span><br><span class="line">        queue-&gt;rear = NULL;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queue-&gt;front =queue-&gt;front-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    queue-&gt;count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span>(<span class="params">LinkedQueue *queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (queue-&gt;count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Linked-Queue-java-version"><a href="#Linked-Queue-java-version" class="headerlink" title="Linked Queue java version"></a>Linked Queue java version</h2><p>LinkedQueue.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedQueue</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Node front;</span><br><span class="line">	<span class="keyword">private</span> Node rear;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> length;</span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> T data;</span><br><span class="line">		<span class="keyword">private</span> Node next;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.data = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.data =data;</span><br><span class="line">			<span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LinkedQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">		<span class="keyword">if</span> (front == <span class="keyword">null</span>) &#123;</span><br><span class="line">			front = newNode;</span><br><span class="line">			rear = newNode;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			rear.next = newNode;</span><br><span class="line">			rear = newNode;</span><br><span class="line">		&#125;</span><br><span class="line">		length++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"is empty"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Node remove = front;</span><br><span class="line">		front = front.next;</span><br><span class="line">		remove.next = <span class="keyword">null</span>;</span><br><span class="line">		length--;</span><br><span class="line">		<span class="keyword">return</span> remove.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Node temp = front;</span><br><span class="line">		<span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[ ]"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// StringBuilder 클래스를 이용하여 데이터를 출력</span></span><br><span class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">			sb.append(temp.data);</span><br><span class="line">			temp = temp.next;</span><br><span class="line">			<span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sb.append(<span class="string">", "</span>);</span><br><span class="line">				sb.append(temp.data);</span><br><span class="line">				temp = temp.next;</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append(<span class="string">"]"</span>);</span><br><span class="line">			<span class="keyword">return</span> sb.toString();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Queue.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T t)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h1><p><strong><a href="https://github.com/pscheol/ILT/tree/master/algorithm/Queue" target="_blank" rel="noopener">github 이동 (Click)</a></strong></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>queue</tag>
        <tag>큐</tag>
        <tag>dequeue</tag>
      </tags>
  </entry>
  <entry>
    <title>3. 연결리스트(Linked List)</title>
    <url>/2020/03/20/3-linkedlist/</url>
    <content><![CDATA[<h1 id="연결리스트-Linked-List"><a href="#연결리스트-Linked-List" class="headerlink" title="연결리스트(Linked List)"></a>연결리스트(Linked List)</h1><h2 id="개념과-구조"><a href="#개념과-구조" class="headerlink" title="개념과 구조"></a>개념과 구조</h2><ul>
<li><p>데이터가 연속적인 리스트</p>
</li>
<li><p>새로운 노드를 삽입하거나 삭제가 간편</p>
</li>
<li><p>링크라는 개념을 통해 물리 메모리를 연속적으로 사용하지 않아도 된다.</p>
</li>
<li><p>데이터를 구조체로 묶어 포인터로 연결</p>
</li>
</ul>
<p>Linked List에는 기본적으로 Node와 Link라는 용어를 사용</p>
<img src="/2020/03/20/3-linkedlist/linkedlist1.png" class="" title="&lt;그림1 : 연결리스트&gt;">
<blockquote>
<p>HeadNode에는 데이터를 저장하지 않는다. 단지 LinkedList의 시작부분임을 나타낸다.(ex:기관차에서 headNode는 승객이 타지 않음)</p>
</blockquote>
<p>LinkedList의 마지막 부분을 나타내는 노드도 있다. End Node or Tail Node라고 불리며, 데이터를 저장하지 않는다. 즉, Head, Tail(End) 노드는 데이터를 저장하지 않음(저장할 수 없다는 것이 아니라 묵시적으로 데이터를 저장하지 않는다는 것)</p>
<img src="/2020/03/20/3-linkedlist/linkedlist2.png" class="" title="&lt;그림2: HeadNode와 TailNode를 가진 연결리스트&gt;">
<ul>
<li>링크에 화살표가 표시되어 있는 방향은 Head Node 부터 시작해 연결된 다음 노드들을 계속 가리키다보면 D에는 EndNode를 가리키고 EndNode는 아무것도 가리키지 않는 상태가 된다. 이와 같이 자신의 노드에서 다음 노드만 가리킬 수 있는 형태가 전형적이 LinkedList 의 형태이다.</li>
</ul>
<h2 id="연결리스트의-구조체"><a href="#연결리스트의-구조체" class="headerlink" title="연결리스트의 구조체"></a>연결리스트의 구조체</h2><p><strong>c</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _Node &#123;</span><br><span class="line">    char data; &#x2F;&#x2F;데이터</span><br><span class="line">    struct _Node *next; &#x2F;&#x2F;다음노드 꼬리 Link</span><br><span class="line">&#125; Node;</span><br></pre></td></tr></table></figure>
<p><strong>java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Object data;</span><br><span class="line">  <span class="keyword">private</span> Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="연결리스트의-장-단점"><a href="#연결리스트의-장-단점" class="headerlink" title="연결리스트의 장 단점"></a>연결리스트의 장 단점</h2><p><strong>장점</strong></p>
<ul>
<li>새로운 노드의 추가, 삽입, 삭제가 쉽고 빠름, 배열은 삽입 삭제가 어렵 - 현재 노드의 다음 노드를 얻어오는 연산에 대해 비용이 발생하지 않음</li>
</ul>
<p><strong>단점</strong></p>
<ul>
<li>다음 노드를 가리키려는 포인터 때문에 각 노드마다 4byte의 메모리가 추가로 필요</li>
<li>특정 위치에 있는 노드(중간삽입)를 얻는데 비용이 크며 속도가 느림</li>
<li>노드의 개수가 n개면 최악의 경우 n개의 노드 탐색 루프를 실행해야 특정 위치에 있는 노드를 찾을 수 있는 반면 배열은 상수 시간에 노드를 얻을 수 있음</li>
</ul>
<h2 id="연결리스트의-삽입과-삭제"><a href="#연결리스트의-삽입과-삭제" class="headerlink" title="연결리스트의 삽입과 삭제"></a>연결리스트의 삽입과 삭제</h2><p>Q. 배열을 사용하지 않고 LinkedList를 사용하는 이유</p>
<ul>
<li><p>배열은 생성할 때 데이터를 저장하는데 필요한 모든 메모리를 한번에 확보해 사용할 수 있게 해주므로 프로그램이 실행되는 중간에 배열의 크기를 바꿀 수 없다.</p>
</li>
<li><p>배얼 안에 저장되어 있는 값들을 정렬할 때에도 메모리에 저장되어 있는 각각의 값을 바꿔줘야한다.</p>
</li>
<li><p>배열은 연속적인 메모리를 사용하지만 연결리스트는 반드시 연속적이라고 불 수 없다</p>
</li>
<li><p>연결리스트는 연속적이지 않은 데이터들을 링크로 서로 연결시키는 개념으로 볼 수 있다.</p>
</li>
</ul>
<h3 id="배열에서의-삽입"><a href="#배열에서의-삽입" class="headerlink" title="배열에서의 삽입"></a>배열에서의 삽입</h3><p>배열에서 B와 D 사이에 C 데이터 추가하려면 배열의 끝에서부터 한 칸씩 뒤로 이동해야 한다 즉 E와 D가 한칸씩 이동하고 B 와 D 사이에 C가 들어간다.</p>
<img src="/2020/03/20/3-linkedlist/linkedlist3.png" class="" title="&lt;그림3. B와 D 사이에 C 데이터 추가 과정&gt;">
<p><strong>배열 데이터 삽입(C언어)</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertArray</span><span class="params">(<span class="keyword">char</span>* <span class="built_in">array</span>, <span class="keyword">char</span> data,<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, cur;</span><br><span class="line">    <span class="keyword">char</span> tmp, tmp2;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>[i] &gt; data) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = <span class="built_in">array</span>[i];</span><br><span class="line">    <span class="built_in">array</span>[i] = data;</span><br><span class="line">    i++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i&lt;length; i++) &#123;</span><br><span class="line">        tmp2 = <span class="built_in">array</span>[i];</span><br><span class="line">        <span class="built_in">array</span>[i] = tmp;</span><br><span class="line">        tmp = tmp2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="연결리스트의-삽입"><a href="#연결리스트의-삽입" class="headerlink" title="연결리스트의 삽입"></a>연결리스트의 삽입</h3><p>ㅁㅁ -&gt; A -&gt; B - <strong>C</strong> - D -&gt; E -&gt; ㅁㅁ<br>(B와 D 사이에 새로운 노드 C 삽입)</p>
<p>B와 D 노드에 새로 삽입되는 노드 C가 있다면 C가 노드 D를 가리키도록 하고 원래 노드 D를 가리키던 B노드는 C 노드를 가리키도록 해야한다.</p>
<p><strong>연결리스트 삽입(C언어)</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(Node *newNode)</span> </span>&#123;</span><br><span class="line">  Node *idxNode;</span><br><span class="line">  <span class="keyword">for</span> (idxNode = head; idxNode != end; idxNodx = idxNode-&gt;Next) &#123;</span><br><span class="line">    <span class="keyword">if</span> (idxNode-&gt;next-&gt;data &gt; newNode-&gt;data) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  newNode-&gt;next = idxNode-&gt;next;</span><br><span class="line">  idxNode-&gt;next = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="연결리스트에서-1개의-노드를-삽입하는-과정"><a href="#연결리스트에서-1개의-노드를-삽입하는-과정" class="headerlink" title="연결리스트에서 1개의 노드를 삽입하는 과정"></a>연결리스트에서 1개의 노드를 삽입하는 과정</h4><ol>
<li>새로운 노드를 생성한다<br><code>Node *noewNode = (Node*)malloc(sizeof(Node));</code></li>
<li><p>새로운 노드가 삽입될 위치를 검색한다.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (idxNode = head; idxNode != <span class="built_in">end</span>; idxNodx = idxNode-&gt;Next) &#123;</span><br><span class="line">  <span class="keyword">if</span> (idxNode-&gt;next-&gt;data &gt; newNode-&gt;data) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>새로운 노드의 Next를 새로운 노드가 삽입될 다음 노드로 연결</p>
<p><code>newNode-&gt;next = idxNode-&gt;next</code></p>
</li>
<li><p>새로운 노드가 삽입될 위치의 이전노드의 Next가 새로운 노드를 가리키도록 한다.</p>
<p><code>idxNode-&gt;next = newNode</code></p>
</li>
</ol>
<h3 id="연결리스트에서-노드-삭제하는-과정"><a href="#연결리스트에서-노드-삭제하는-과정" class="headerlink" title="연결리스트에서 노드 삭제하는 과정"></a>연결리스트에서 노드 삭제하는 과정</h3><ol>
<li><p>이전 노드를 가리킬 포인터와 삭제할 노드를 가리킬 포인터를 선언</p>
<p><code>Node idxNode</code><br><code>Node removeNode</code></p>
</li>
<li><p>삭제할 노드 검색</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(idxNode = head; idxNode != end; idxNode = idxNode-&gt;next) &#123;</span><br><span class="line">  <span class="keyword">if</span> (idxNode-&gt;next-&gt;data == removeNode-&gt;data) &#123;</span><br><span class="line">    removeNode = idxNode-&gt;next;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>이전 노드가 삭제할 노드를 건너뛰고 다음 노드를 가리키도록 새로 설정</p>
<p><code>idxNode-&gt;next = idexNode-&gt;next-&gt;next</code></p>
</li>
<li><p>free() 함수로 노드를 메모리에서 삭제</p>
<p><code>free(removeNode)</code></p>
</li>
</ol>
<h2 id="연결리스트-c-version"><a href="#연결리스트-c-version" class="headerlink" title="연결리스트 c version"></a>연결리스트 c version</h2><p>LinkedList.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LINKEDLIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINKEDLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">createNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Node** head, Node* newNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addAfter</span><span class="params">(Node* cur, Node* newNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHead</span><span class="params">(Node** head, Node* newHead)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeNode</span><span class="params">(Node** head, Node* remove)</span></span>;</span><br><span class="line"><span class="function">Node* <span class="title">getNode</span><span class="params">(Node* head, <span class="keyword">int</span> idx)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryNode</span><span class="params">(Node *node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    Node* cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cur= cur-&gt;next;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>LinkedList.c</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LinkedList.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">createNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    Node *newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newNode-&gt;data =data;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryNode</span><span class="params">(Node *node)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Node** head, Node* newNode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((*head) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node* tail = (*head);</span><br><span class="line">        <span class="keyword">while</span>(tail-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail-&gt;next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addAfter</span><span class="params">(Node* cur, Node* newNode)</span> </span>&#123;</span><br><span class="line">    newNode-&gt;next = cur-&gt;next;</span><br><span class="line">    cur-&gt;next = newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHead</span><span class="params">(Node** head, Node* newHead)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (*head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        (*head) = newHead;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newHead-&gt;next = (*head);</span><br><span class="line">        (*head) = newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeNode</span><span class="params">(Node** head, Node* remove)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (*head == remove) &#123;</span><br><span class="line">        *head = remove-&gt;next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node* cur = *head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">NULL</span> &amp;&amp; cur-&gt;next != remove) &#123;</span><br><span class="line">            cur= cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            cur-&gt;next = remove-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    destoryNode(remove);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node* <span class="title">getNode</span><span class="params">(Node* head, <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">    Node* cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cur= cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="연결리스트-java-version"><a href="#연결리스트-java-version" class="headerlink" title="연결리스트 java version"></a>연결리스트 java version</h2><p>List.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// 임의의 위치에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data, <span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 첫번째에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addFirst</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 마지막에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 끝에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 인덱스 값을 통해 임의 위치 값 줄력</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 리스트의 크기 값</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 마지막 리스트 의 값 출력</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 첫번째 리스트의 값 출력</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 임의 위치에 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 첫번째 위치 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 마지막 위치 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 마지막 위치 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LinkedList.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Node header;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		header = <span class="keyword">new</span> Node();</span><br><span class="line">		length = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> T data;</span><br><span class="line">		<span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">		Node() &#123;</span><br><span class="line">			data = <span class="keyword">null</span>;</span><br><span class="line">			next = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Node(<span class="keyword">final</span> T data) &#123;</span><br><span class="line">			<span class="keyword">this</span>.data = data;</span><br><span class="line">			<span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; (length == <span class="number">0</span> || index &lt;= <span class="number">0</span> || index &gt; length)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		Node cur = header;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++) &#123;</span><br><span class="line">			cur = cur.next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cur;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">				addFirst(data);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Node prev = getNode(index - <span class="number">1</span>);</span><br><span class="line">			Node next = getNode(index);</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">			newNode.next = next;</span><br><span class="line">			prev.next = newNode;</span><br><span class="line">			length++;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addFirst</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">			<span class="keyword">if</span> (header.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">				header.next = newNode;</span><br><span class="line">				length++;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				newNode.next = header.next;</span><br><span class="line">				header.next = newNode;</span><br><span class="line">				length++;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">				addFirst(data);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			Node next = getNode(length - <span class="number">1</span>);</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">			next.next = newNode;</span><br><span class="line">			length++;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		addLast(data);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		Node cur = header;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">			cur = cur.next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cur.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.length;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> get(length);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> get(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (length &lt; index) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (length &lt;= <span class="number">0</span> || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> removeFirst();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				Node prev = getNode(index - <span class="number">1</span>);</span><br><span class="line">				Node remove = getNode(index);</span><br><span class="line">				<span class="keyword">if</span> (remove.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">					prev.next = <span class="keyword">null</span>;</span><br><span class="line">					length--;</span><br><span class="line">					<span class="keyword">return</span> remove.data;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					prev.next = remove.next;</span><br><span class="line">					length--;</span><br><span class="line">					<span class="keyword">return</span> remove.data;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length ==<span class="number">0</span> ) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Node remove = header.next;</span><br><span class="line">		header.next = remove.next;</span><br><span class="line">		length--;</span><br><span class="line">		<span class="keyword">return</span> remove.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> remove(length - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> removeLast();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Node temp = header.next;</span><br><span class="line">		<span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[ ]"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// StringBuilder 클래스를 이용하여 데이터를 출력</span></span><br><span class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">			sb.append(temp.data);</span><br><span class="line">			temp = temp.next;</span><br><span class="line">			<span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sb.append(<span class="string">", "</span>);</span><br><span class="line">				sb.append(temp.data);</span><br><span class="line">				temp = temp.next;</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append(<span class="string">"]"</span>);</span><br><span class="line">			<span class="keyword">return</span> sb.toString();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Circular-Linked-List-원형-연결-리스트"><a href="#Circular-Linked-List-원형-연결-리스트" class="headerlink" title="Circular Linked List(원형 연결 리스트)"></a>Circular Linked List(원형 연결 리스트)</h1><ul>
<li><p>head와 tail로 연결되어 있는 연결 리스트</p>
</li>
<li><p>tail의 다음 노드 포인터가 헤드를 가리킴</p>
<ul>
<li>장점으로는 시작과 끝을 알 수 있다.</li>
</ul>
</li>
</ul>
<p><strong>노드추가</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> *<span class="title">prev</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Node** head, Node* newNode)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((*head) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    *head = newNode;</span><br><span class="line">    (*head)-&gt;next = *head;</span><br><span class="line">    (*head)-&gt;prev = *head;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">     Node* tail = (*head)-&gt;prev;</span><br><span class="line">     tail-&gt;next-&gt;prev = newNode;</span><br><span class="line">     tail-&gt;next = newNode;</span><br><span class="line">     newNode-&gt;nextNode = (*head)</span><br><span class="line">     newNode-&gt;prevNode = tail;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>노드 삭제</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node** head, Node* remove)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((*head)-&gt;next == remove) &#123;</span><br><span class="line">    (*head)-&gt;prev-&gt;next = remove-&gt;next;</span><br><span class="line">    (*head)-&gt;next-&gt;prev = remove-&gt;prev;</span><br><span class="line">    *head = remove-&gt;nextNode;</span><br><span class="line"></span><br><span class="line">    remove-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    remove-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    Node* tmp = remove;</span><br><span class="line">    remove-&gt;prev-&gt;next = temp-&gt;next;</span><br><span class="line">    remove-&gt;next-&gt;prev = temp-&gt;prev;</span><br><span class="line"></span><br><span class="line">    remove-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    remove-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Circular-Linked-List-for-Java"><a href="#Circular-Linked-List-for-Java" class="headerlink" title="Circular Linked List for Java"></a>Circular Linked List for Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircularLinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Node header;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> T data;</span><br><span class="line">		<span class="keyword">private</span> Node prev;</span><br><span class="line">		<span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.data = data;</span><br><span class="line">			<span class="keyword">this</span>.prev = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.data = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">this</span>.prev = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CircularLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		header = <span class="keyword">new</span> Node();</span><br><span class="line">		header.prev = header;</span><br><span class="line">		header.next = header;</span><br><span class="line">		<span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> addFirst(data);</span><br><span class="line"></span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == length - <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> addLast(data);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				Node prev = getNode(index - <span class="number">1</span>);</span><br><span class="line">				Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">				newNode.next = prev.next;</span><br><span class="line">				newNode.prev = prev;</span><br><span class="line">				prev.next.prev = newNode;</span><br><span class="line">				prev.next = newNode;</span><br><span class="line">				length++;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addFirst</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">			Node nextNode = header.next;</span><br><span class="line">			newNode.next = nextNode;</span><br><span class="line">			newNode.prev = header;</span><br><span class="line">			nextNode.prev = newNode;</span><br><span class="line">			header.next = newNode;</span><br><span class="line">			length++;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">			Node tailNode = header.prev;</span><br><span class="line">			tailNode.next = newNode;</span><br><span class="line">			newNode.prev = tailNode;</span><br><span class="line">			newNode.next = header;</span><br><span class="line">			header.prev = newNode;</span><br><span class="line">			length++;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> addLast(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		T data = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">			data = getFirst();</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == length - <span class="number">1</span>) &#123;</span><br><span class="line">			data = getLast();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Node cur = header;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">				cur = cur.next;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.length;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> header.prev.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> header.next.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (length &lt; index) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (length &lt;= <span class="number">0</span> || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">		  <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> removeFirst();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == length - <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> removeLast();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				Node remove = getNode(index);</span><br><span class="line">				Node prev = remove.prev;</span><br><span class="line">				prev.next = remove.next;</span><br><span class="line">				remove.next.prev = prev;</span><br><span class="line">				remove.next = <span class="keyword">null</span>;</span><br><span class="line">				remove.prev = <span class="keyword">null</span>;</span><br><span class="line">				length--;</span><br><span class="line">				<span class="keyword">return</span> remove.data;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Node remove = header.next;</span><br><span class="line">		<span class="keyword">if</span> (remove.next == header) &#123;</span><br><span class="line">			header.next = header;</span><br><span class="line">			header.prev = header;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			header.next = remove.next;</span><br><span class="line">			remove.next.prev = header;</span><br><span class="line">		&#125;</span><br><span class="line">		remove.next = <span class="keyword">null</span>;</span><br><span class="line">		remove.next = <span class="keyword">null</span>;</span><br><span class="line">		length--;</span><br><span class="line">		<span class="keyword">return</span> remove.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		Node remove = header.prev;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (remove.prev == header) &#123;</span><br><span class="line">			header.next = header;</span><br><span class="line">			header.prev = header;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			remove.prev.next = header;</span><br><span class="line">			header.prev = remove.prev;</span><br><span class="line">		&#125;</span><br><span class="line">		remove.next = <span class="keyword">null</span>;</span><br><span class="line">		remove.prev = <span class="keyword">null</span>;</span><br><span class="line">		length--;</span><br><span class="line">		<span class="keyword">return</span> remove.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> removeLast();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Node temp = header.next;</span><br><span class="line">		<span class="keyword">if</span> (temp == header) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[ ]"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">			sb.append(temp.data);</span><br><span class="line">			temp = temp.next;</span><br><span class="line">			<span class="keyword">while</span> (temp != header) &#123;</span><br><span class="line">				sb.append(<span class="string">", "</span>);</span><br><span class="line">				sb.append(temp.data);</span><br><span class="line">				temp = temp.next;</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append(<span class="string">"]"</span>);</span><br><span class="line">			<span class="keyword">return</span> sb.toString();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; (length == <span class="number">0</span> || index &lt;= <span class="number">0</span> || index &gt; length)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		Node cur = header;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++) &#123;</span><br><span class="line">			cur = cur.next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cur;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Double-Linked-List-더블-연결-리스트"><a href="#Double-Linked-List-더블-연결-리스트" class="headerlink" title="Double Linked List(더블 연결 리스트)"></a>Double Linked List(더블 연결 리스트)</h1><h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><ul>
<li>Double Linked List는 연결리스트의 탐색 기능을 개선한 자료구조이다.</li>
<li>연결리스트는 노드를 찾으려면 head에서 tail 방향으로만 탐색할 수 있지만 Double Linked List는 양방향 탐색이가능하다.</li>
</ul>
<img src="/2020/03/20/3-linkedlist/linkedlist4.png" class="" title="&lt;그림4. 더블 연결 리스트&gt;">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> data;             <span class="comment">//데이터 필드</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span>* <span class="title">prev</span>;</span>   <span class="comment">//이전 노드를 가리키는 포인터</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span>* <span class="title">next</span>;</span>   <span class="comment">//다음 노드를 가리키는 포인텅</span></span><br><span class="line">&#125;Node;</span><br></pre></td></tr></table></figure>
<h2 id="생성-삽입-삭제"><a href="#생성-삽입-삭제" class="headerlink" title="생성/삽입/삭제"></a>생성/삽입/삭제</h2><h3 id="노드생성"><a href="#노드생성" class="headerlink" title="노드생성"></a>노드생성</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">createNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    Node* newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="노드-삽입-순서대로"><a href="#노드-삽입-순서대로" class="headerlink" title="노드 삽입(순서대로)"></a>노드 삽입(순서대로)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Node** head, Node* newNode)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((*head) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    (*head)-&gt;next = newNode;</span><br><span class="line">    newNode-&gt;prev = (*head);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Node* tail = (*head);</span><br><span class="line">    <span class="keyword">while</span>( tail-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        tail = tail -&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    tail-&gt;next = newNode;</span><br><span class="line">    newNode-&gt;prev = tail;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="노드-중간-삽입"><a href="#노드-중간-삽입" class="headerlink" title="노드 중간 삽입"></a>노드 중간 삽입</h3><ol>
<li>newNode-&gt;next는 nextNode를 연결</li>
<li>newNode-&gt;prev는 prevNode를 연결</li>
<li>nextNode-&gt;prev는 newNode를 연결</li>
<li>prevNode-&gt;next는 newNode를 연결</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addAfter</span><span class="params">(Node* cur, Node* newNode)</span> </span>&#123;</span><br><span class="line">  newNode-&gt;next = cur-&gt;next;</span><br><span class="line">  newNode-&gt;prev = cur;</span><br><span class="line">  <span class="keyword">if</span> (cur-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    cur-&gt;next-&gt;prev = newNode;</span><br><span class="line">  &#125;</span><br><span class="line">  cur-&gt;next = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="노드-삭제"><a href="#노드-삭제" class="headerlink" title="노드 삭제"></a>노드 삭제</h3><ol>
<li>prevNode-&gt;next에 nextNode를 연결</li>
<li>nextNode-&gt;prev에 prevNode를 연결</li>
<li>removeNode는 메모리 해제</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(Node** head, Node* <span class="built_in">remove</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (*head == <span class="built_in">remove</span>) &#123;</span><br><span class="line">    *head = <span class="built_in">remove</span>-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> ((*head) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        (*head)-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">remove</span>-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">remove</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Node* tmp = <span class="built_in">remove</span>;</span><br><span class="line">    <span class="built_in">remove</span>-&gt;prev-&gt;next = tmp-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">remove</span>-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="built_in">remove</span>-&gt;next-&gt;prev = temp-&gt;prev;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">remove</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">remove</span>-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(<span class="built_in">remove</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Double-Linked-List-java-version"><a href="#Double-Linked-List-java-version" class="headerlink" title="Double Linked List (java version)"></a>Double Linked List (java version)</h2><p>List.java (interface)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// 임의의 위치에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data, <span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 첫번째에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addFirst</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 마지막에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 끝에 데이터 삽입</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 인덱스 값을 통해 임의 위치 값 줄력</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 리스트의 크기 값</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 마지막 리스트 의 값 출력</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 맨 첫번째 리스트의 값 출력</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 임의 위치에 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 첫번째 위치 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 마지막 위치 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 마지막 위치 삭제</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DLinkedList.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DLinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Node header;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		header = <span class="keyword">new</span> Node();</span><br><span class="line">		length = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> T data;</span><br><span class="line">		<span class="keyword">private</span> Node next;</span><br><span class="line">		<span class="keyword">private</span> Node prev;</span><br><span class="line"></span><br><span class="line">		Node() &#123;</span><br><span class="line">			data = <span class="keyword">null</span>;</span><br><span class="line">			next = <span class="keyword">null</span>;</span><br><span class="line">			prev = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Node(<span class="keyword">final</span> T data) &#123;</span><br><span class="line">			<span class="keyword">this</span>.data = data;</span><br><span class="line">			<span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">this</span>.prev = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; (length == <span class="number">0</span> || index &lt;= <span class="number">0</span> || index &gt; length)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		Node cur = header;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++) &#123;</span><br><span class="line">			cur = cur.next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cur;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">				addFirst(data);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Node prev = getNode(index - <span class="number">1</span>);</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">			newNode.next = prev.next;</span><br><span class="line">			newNode.prev = prev;</span><br><span class="line">			prev.next.prev = newNode;</span><br><span class="line">			prev.next = newNode;</span><br><span class="line">			length++;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addFirst</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">			<span class="keyword">if</span> (header.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">				header.next = newNode;</span><br><span class="line">				newNode.prev = header;</span><br><span class="line">				length++;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				newNode.next = header.next;</span><br><span class="line">				newNode.prev = header;</span><br><span class="line">				header.next.prev = newNode;</span><br><span class="line">				header.next = newNode;</span><br><span class="line">				length++;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">				addFirst(data);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			Node next = getNode(length - <span class="number">1</span>);</span><br><span class="line">			Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">			next.next = newNode;</span><br><span class="line">			newNode.prev = next;</span><br><span class="line">			length++;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		addLast(data);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line">		Node cur = header;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">			cur = cur.next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cur.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.length;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> get(length);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> get(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (length &lt; index) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (length &lt;= <span class="number">0</span> || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> removeFirst();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				Node prev = getNode(index - <span class="number">1</span>);</span><br><span class="line">				Node remove = getNode(index);</span><br><span class="line">				<span class="keyword">if</span> (remove.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">					prev.next = <span class="keyword">null</span>;</span><br><span class="line">					remove.next = <span class="keyword">null</span>;</span><br><span class="line">					remove.prev = <span class="keyword">null</span>;</span><br><span class="line">					length--;</span><br><span class="line">					<span class="keyword">return</span> remove.data;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					prev.next = remove.next;</span><br><span class="line">					remove.next.prev = prev;</span><br><span class="line">					remove.next = <span class="keyword">null</span>;</span><br><span class="line">					remove.prev = <span class="keyword">null</span>;</span><br><span class="line">					length--;</span><br><span class="line">					<span class="keyword">return</span> remove.data;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="keyword">null</span> &amp;&amp; length ==<span class="number">0</span> ) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Node remove = header.next;</span><br><span class="line">		header.next = remove.next;</span><br><span class="line">		remove.next.prev = header;</span><br><span class="line">		remove.next = <span class="keyword">null</span>;</span><br><span class="line">		remove.next = <span class="keyword">null</span>;</span><br><span class="line">		length--;</span><br><span class="line">		<span class="keyword">return</span> remove.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> remove(length - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> removeLast();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Node temp = header.next;</span><br><span class="line">		<span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[ ]"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// StringBuilder 클래스를 이용하여 데이터를 출력</span></span><br><span class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">			sb.append(temp.data);</span><br><span class="line">			temp = temp.next;</span><br><span class="line">			<span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sb.append(<span class="string">", "</span>);</span><br><span class="line">				sb.append(temp.data);</span><br><span class="line">				temp = temp.next;</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append(<span class="string">"]"</span>);</span><br><span class="line">			<span class="keyword">return</span> sb.toString();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h1><p><strong><a href="https://github.com/pscheol/ILT/tree/master/algorithm/LinkedList" target="_blank" rel="noopener">github 이동 (Click)</a></strong></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>연결리스트</tag>
        <tag>linkedlist</tag>
      </tags>
  </entry>
  <entry>
    <title>2. 스택(Stack)</title>
    <url>/2020/03/19/2-Stack/</url>
    <content><![CDATA[<h1 id="스택-Stack"><a href="#스택-Stack" class="headerlink" title="스택(Stack)"></a>스택(Stack)</h1><ul>
<li>먼저 들어간 데이터가 가장 마지막에 나오는 구조(Last In, First Out : LIFO)</li>
<li>삽입과 삭제가 한쪽 끝에서만 자료를 넣고 뺄 수 있다.</li>
<li>ex) 자동메모리, 네트워크 프로토콜</li>
</ul>
<h2 id="스택-Stack-의-주요-기능"><a href="#스택-Stack-의-주요-기능" class="headerlink" title="스택(Stack)의 주요 기능"></a>스택(Stack)의 주요 기능</h2><p><strong>스택의 초기화</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> stack[<span class="number">100</span>]; <span class="comment">//스택 배열</span></span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>; <span class="comment">// 스태의 크기</span></span><br></pre></td></tr></table></figure></p>
<h3 id="삽입-Push"><a href="#삽입-Push" class="headerlink" title="삽입(Push)"></a>삽입(Push)</h3><ul>
<li>스택 위에 새로운 노드를 쌓는 작업</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">	stack[size] = data;</span><br><span class="line">	size = size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>데이터 80 삽입</p>
<img src="/2020/03/19/2-Stack/stack-push.png" class="" title="&lt;데이터 80 삽입&gt;"> 
<h3 id="삭제-Pop"><a href="#삭제-Pop" class="headerlink" title="삭제(Pop)"></a>삭제(Pop)</h3><ul>
<li>스택에서 최상위 노드를 걷어내는 작업</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (size &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;		</span><br><span class="line">	<span class="keyword">int</span> pop = stack[size];</span><br><span class="line">	size = size - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> pop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>데이터 80 제거  </p>
<img src="/2020/03/19/2-Stack/stack-pop.png" class="" title="&lt;데이터 80 제거&gt;"> 
<h3 id="Peek"><a href="#Peek" class="headerlink" title="Peek"></a>Peek</h3><ul>
<li>Top이 가리키는 위치의 데이터를 가져오는 작업</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> stack[size];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/03/19/2-Stack/stack-push.png" class="" title="&lt; Top이 가리키는 위치의 데이터 70을 가져온다 &gt;"> 
<h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><ul>
<li>스택이 비어있는지 비어있지 않은지 알아보는 작업</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (size == <span class="number">0</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><ul>
<li>스택에 저장되어 있는 자료의 개수를 알아보는 작업</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="배열로-구현하는-스택"><a href="#배열로-구현하는-스택" class="headerlink" title="배열로 구현하는 스택"></a>배열로 구현하는 스택</h2><ul>
<li>동적으로 스택의 용량을 조절하기가 어렵다는 단점이 있다.</li>
<li>구현이 간단하다.</li>
</ul>
<p>Java version</p>
<p>ArrayStack.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> top;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> capacity;</span><br><span class="line">	<span class="keyword">private</span> Object[] stack;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		top = -<span class="number">1</span>;</span><br><span class="line">		capacity = DEFAULT_SIZE;</span><br><span class="line">		stack = <span class="keyword">new</span> Object[capacity];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">		top = -<span class="number">1</span>;</span><br><span class="line">		capacity = DEFAULT_SIZE;</span><br><span class="line">		stack = <span class="keyword">new</span> Object[capacity];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"stack overflow"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		stack[++top] = data;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"data impty"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> (T)stack[top--];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (T)stack[top];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (top == capacity-<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (top == -<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Stack.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T data)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>c language</p>
<p>ArrayList.h</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paik Seung Cheol on 2020. 3. 19..</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#ifndef ARRAYSTACK_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAYSTACK_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">struct</span> _Node &#123;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">struct</span> _Stack &#123;</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    Node* nodes;</span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createStack</span>(<span class="params">Stack** stack, <span class="keyword">int</span> capacity</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isFull</span>(<span class="params">Stack* stack</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span>(<span class="params">Stack* stack</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span>(<span class="params">Stack* stack, <span class="keyword">int</span> data</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">popup</span>(<span class="params">Stack* stack</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">peek</span>(<span class="params">Stack* stack</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> //ARRAYSTACK_H</span></span><br></pre></td></tr></table></figure>
<p>ArrayList.c</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paik Seung Cheol on 2020. 3. 19..</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#include "ArrayStack.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createStack</span>(<span class="params">Stack** stack, <span class="keyword">int</span> capacity</span>)</span> &#123;</span><br><span class="line">    (*stack) = (Stack*)malloc(<span class="keyword">sizeof</span>(Stack));</span><br><span class="line">    (*stack)-&gt;capacity = capacity;</span><br><span class="line">    (*stack)-&gt;top = <span class="number">-1</span>;</span><br><span class="line">    (*stack)-&gt;nodes = (Node*) malloc(<span class="keyword">sizeof</span>(Node)* capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isFull</span>(<span class="params">Stack* stack</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((stack)-&gt;top == (stack)-&gt;capacity<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span>(<span class="params">Stack* stack</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((stack)-&gt;top == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span>(<span class="params">Stack* stack, <span class="keyword">int</span> data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isFull(stack)) &#123;</span><br><span class="line">        printf(<span class="string">"stack overflow\n"</span>);</span><br><span class="line">        exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    stack-&gt;nodes[++stack-&gt;top].data = data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">popup</span>(<span class="params">Stack* stack</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty(stack)) &#123;</span><br><span class="line">        printf(<span class="string">"is empty\n"</span>);</span><br><span class="line">        exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack-&gt;nodes[stack-&gt;top--].data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">peek</span>(<span class="params">Stack* stack</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty(stack)) &#123;</span><br><span class="line">        printf(<span class="string">"is empty\n"</span>);</span><br><span class="line">        exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack-&gt;nodes[stack-&gt;top].data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="연결리스트로-구현하는-스택"><a href="#연결리스트로-구현하는-스택" class="headerlink" title="연결리스트로 구현하는 스택"></a>연결리스트로 구현하는 스택</h2><ul>
<li>스택의 용량에 제한을 두지 않는다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paik Seung Cheol on 2020. 3. 19..</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Node stack;</span><br><span class="line">	<span class="keyword">private</span> Node top;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> T data;</span><br><span class="line">		<span class="keyword">private</span> Node top;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.data = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">this</span>.top = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.data = data;</span><br><span class="line">			<span class="keyword">this</span>.top = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LinkedListStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		stack = <span class="keyword">new</span> Node();</span><br><span class="line">		top = <span class="keyword">new</span> Node();</span><br><span class="line">		length = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">		<span class="keyword">if</span> (stack.top == <span class="keyword">null</span>) &#123;</span><br><span class="line">			stack.top = newNode;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Node oldStack = stack;</span><br><span class="line">			<span class="keyword">do</span> &#123;</span><br><span class="line">				oldStack = oldStack.top;</span><br><span class="line">			&#125; <span class="keyword">while</span> (oldStack.top != <span class="keyword">null</span>);</span><br><span class="line">			oldStack.top = newNode;</span><br><span class="line">		&#125;</span><br><span class="line">		top = newNode;</span><br><span class="line">		length++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Stack is Empty "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Node remove = top;</span><br><span class="line">		<span class="keyword">if</span> (stack.top == top) &#123;</span><br><span class="line">			stack.top = <span class="keyword">null</span>;</span><br><span class="line">			top = <span class="keyword">null</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Node curTop = stack;</span><br><span class="line">			<span class="keyword">do</span> &#123;</span><br><span class="line">				curTop = curTop.top;</span><br><span class="line">			&#125; <span class="keyword">while</span> (curTop.top != top);</span><br><span class="line">			curTop.top = <span class="keyword">null</span>;</span><br><span class="line">			top = curTop;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		length--;</span><br><span class="line">		<span class="keyword">return</span> remove.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"stack is empty"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> top.data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (length == <span class="number">0</span> &amp;&amp; stack.top == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Node temp = stack.top;</span><br><span class="line">		<span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[ ]"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// StringBuilder 클래스를 이용하여 데이터를 출력</span></span><br><span class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">			sb.append(temp.data);</span><br><span class="line">			temp = temp.top;</span><br><span class="line">			<span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sb.append(<span class="string">", "</span>);</span><br><span class="line">				sb.append(temp.data);</span><br><span class="line">				temp = temp.top;</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append(<span class="string">"]"</span>);</span><br><span class="line">			<span class="keyword">return</span> sb.toString();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ex) 후위표기 사칙연산 계산</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paik Seung Cheol on 2020. 3. 19..</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> result = postFixCalc(<span class="string">"132**"</span>);</span><br><span class="line">		System.out.println(result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">postFixCalc</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">		Stack&lt;Double&gt; stack = <span class="keyword">new</span> ArrayStack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length(); i++) &#123;</span><br><span class="line">			<span class="keyword">switch</span> (data.charAt(i)) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">				<span class="keyword">double</span> op1 = <span class="keyword">new</span> BigDecimal(stack.pop()).doubleValue();</span><br><span class="line">				<span class="keyword">double</span> op2 = <span class="keyword">new</span> BigDecimal(stack.pop()).doubleValue();</span><br><span class="line">				<span class="keyword">double</span> result = calculate(data.charAt(i), op1, op2);</span><br><span class="line">				stack.push(result);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">int</span> num = Character.digit(data.charAt(i),<span class="number">10</span>);</span><br><span class="line">				stack.push(<span class="keyword">new</span> BigDecimal(num).doubleValue());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">			result = stack.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">char</span> postfixExp, <span class="keyword">double</span> op1, <span class="keyword">double</span> op2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> result =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span> (postfixExp) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">			result = <span class="keyword">new</span> BigDecimal(op1).multiply(<span class="keyword">new</span> BigDecimal(op2)).doubleValue();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">			result = <span class="keyword">new</span> BigDecimal(op1).subtract(<span class="keyword">new</span> BigDecimal(op2)).doubleValue();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">			result = <span class="keyword">new</span> BigDecimal(op1).add(<span class="keyword">new</span> BigDecimal(op2)).doubleValue();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">			result = <span class="keyword">new</span> BigDecimal(op1).divide(<span class="keyword">new</span> BigDecimal(op2)).doubleValue();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span> :</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h1><p><strong><a href="https://github.com/pscheol/ILT/tree/master/algorithm/Stack" target="_blank" rel="noopener">github 이동 (Click)</a></strong></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>stack</tag>
        <tag>스택</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-9012]-괄호(Parentheses)</title>
    <url>/2020/03/18/BaekJoon-9012-Parentheses/</url>
    <content><![CDATA[<h1 id="BaekJoon-9012-괄호"><a href="#BaekJoon-9012-괄호" class="headerlink" title="[BaekJoon-9012] 괄호"></a>[BaekJoon-9012] 괄호</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>괄호 문자열(Parenthesis String, PS)은 두 개의 괄호 기호인 ‘(’ 와 ‘)’ 만으로 구성되어 있는 문자열이다. 그 중에서 괄호의 모양이 바르게 구성된 문자열을 올바른 괄호 문자열(Valid PS, VPS)이라고 부른다. 한 쌍의 괄호 기호로 된 “( )” 문자열은 기본 VPS 이라고 부른다. 만일 x 가 VPS 라면 이것을 하나의 괄호에 넣은 새로운 문자열 “(x)”도 VPS 가 된다. 그리고 두 VPS x 와 y를 접합(concatenation)시킨 새로운 문자열 xy도 VPS 가 된다. 예를 들어 “(())()”와 “((()))” 는 VPS 이지만 “(()(”, “(())()))” , 그리고 “(()” 는 모두 VPS 가 아닌 문자열이다. </p>
<p>여러분은 입력으로 주어진 괄호 문자열이 VPS 인지 아닌지를 판단해서 그 결과를 YES 와 NO 로 나타내어야 한다. </p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>입력 데이터는 표준 입력을 사용한다. 입력은 T개의 테스트 데이터로 주어진다. 입력의 첫 번째 줄에는 입력 데이터의 수를 나타내는 정수 T가 주어진다. 각 테스트 데이터의 첫째 줄에는 괄호 문자열이 한 줄에 주어진다. 하나의 괄호 문자열의 길이는 2 이상 50 이하이다. </p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>출력은 표준 출력을 사용한다. 만일 입력 괄호 문자열이 올바른 괄호 문자열(VPS)이면 “YES”, 아니면 “NO”를 한 줄에 하나씩 차례대로 출력해야 한다. </p>
<h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6  </span><br><span class="line">(())())  </span><br><span class="line">(((()())()  </span><br><span class="line">(()())((()))  </span><br><span class="line">((()()(()))(((())))()  </span><br><span class="line">()()()()(()()())()  </span><br><span class="line">(()((())()(</span><br></pre></td></tr></table></figure>
<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>
<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3  </span><br><span class="line">(  </span><br><span class="line">)  </span><br><span class="line">())(()</span><br></pre></td></tr></table></figure>
<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NO  </span><br><span class="line">NO  </span><br><span class="line">NO</span><br></pre></td></tr></table></figure>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>스택을 이용하여 문제를 풀수 있으며, ‘(‘를 만나면 stack에 push를 하고 ‘)’일 경우 pop을 하여 처리하였다. 만약 ‘)’일 경우 stack에 ‘(‘가 없다면 NO를 출력하고, 문자열을 다 검색 후 스택에 ‘(‘가 남아 있다면 NO를 처리했다.</p>
<h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        parenthesis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parenthesis</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> t = parseInt(in.readLine());</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">0</span> &lt; t--) &#123;</span><br><span class="line">            Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            String ps = in.readLine();</span><br><span class="line">            String result = <span class="string">"YES"</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;ps.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch = ps.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'('</span>) &#123;</span><br><span class="line">                    stack.push(ch);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stack.empty()) &#123;</span><br><span class="line">                    result = <span class="string">"NO"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result.equals(<span class="string">"YES"</span>) &amp;&amp; !stack.empty()) &#123;</span><br><span class="line">                result = <span class="string">"NO"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(result);</span><br><span class="line">            out.write(<span class="string">'\n'</span>);</span><br><span class="line">            out.flush();;</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/9012" target="_blank" rel="noopener">https://www.acmicpc.net/problem/9012</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>stack</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BaekJoon-9093] 단어 뒤집기</title>
    <url>/2020/03/18/BaekJoon-9093-Flip-Word/</url>
    <content><![CDATA[<h1 id="BaekJoon-9093-단어-뒤집기"><a href="#BaekJoon-9093-단어-뒤집기" class="headerlink" title="[BaekJoon-9093] 단어 뒤집기"></a>[BaekJoon-9093] 단어 뒤집기</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>문장이 주어졌을 때, 단어를 모두 뒤집어서 출력하는 프로그램을 작성하시오. 단, 단어의 순서는 바꿀 수 없다. 단어는 영어 알파벳으로만 이루어져 있다.</p>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있으며, 문장이 하나 주어진다. 단어의 길이는 최대 20, 문장의 길이는 최대 1000이다. 단어와 단어 사이에는 공백이 하나 있다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>각 테스트 케이스에 대해서, 입력으로 주어진 문장의 단어를 모두 뒤집어 출력한다.</p>
<h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><p>2<br>I am happy today<br>We want to win the first prize  </p>
<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><p>I ma yppah yadot<br>eW tnaw ot niw eht tsrif ezirp  </p>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>스택을 이용하면 N개의 문자를 스택에 넣었다 빼면 역순으로 출력할 수 있다.</p>
<ol>
<li>스택에 알파벳을 넣는다.</li>
<li>공백이나 문자열의 끝이면 스택에서 모두 빼낸다.</li>
<li>역순으로 만들도록 출력</li>
</ol>
<h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        flipWord();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">flipWord</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> t = parseInt(in.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">0</span> &lt; t--) &#123;</span><br><span class="line">            Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            String word = in.readLine() + <span class="string">"\n"</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i  = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch = word.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (ch != <span class="string">' '</span> &amp;&amp; ch != <span class="string">'\n'</span>) &#123;</span><br><span class="line">                    stack.push(ch);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">                    out.write(stack.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();;</span><br><span class="line">        in.close();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>문제 사이트</em> : <a href="https://www.acmicpc.net/problem/9093" target="_blank" rel="noopener">https://www.acmicpc.net/problem/9093</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>stack</tag>
        <tag>코딩테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>[BackJoon-10828] 스택</title>
    <url>/2020/03/18/BackJoon-10828-stack/</url>
    <content><![CDATA[<h1 id="BackJoon-10828-스택"><a href="#BackJoon-10828-스택" class="headerlink" title="[BackJoon-10828] 스택"></a>[BackJoon-10828] 스택</h1><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.</p>
<p>명령은 총 다섯 가지이다.</p>
<ul>
<li>push X: 정수 X를 스택에 넣는 연산이다.</li>
<li>pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.</li>
<li>size: 스택에 들어있는 정수의 개수를 출력한다.</li>
<li>empty: 스택이 비어있으면 1, 아니면 0을 출력한다.</li>
<li>top: 스택의 가장 위에 있는 정수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.</li>
</ul>
<h2 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h2><p>첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 문제에 나와있지 않은 명령이 주어지는 경우는 없다.</p>
<h2 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h2><p>출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.</p>
<h2 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">14  </span><br><span class="line">push 1  </span><br><span class="line">push 2  </span><br><span class="line">top  </span><br><span class="line">size  </span><br><span class="line">empty  </span><br><span class="line">pop  </span><br><span class="line">pop  </span><br><span class="line">pop  </span><br><span class="line">size  </span><br><span class="line">empty  </span><br><span class="line">pop  </span><br><span class="line">push 3  </span><br><span class="line">empty  </span><br><span class="line">top</span><br></pre></td></tr></table></figure>
<h2 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">-1</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">-1</span><br><span class="line">0</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h2 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">pop</span><br><span class="line">top</span><br><span class="line">push 123</span><br><span class="line">top</span><br><span class="line">pop</span><br><span class="line">top</span><br><span class="line">pop</span><br></pre></td></tr></table></figure>
<h2 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1</span><br><span class="line">-1</span><br><span class="line">123</span><br><span class="line">123</span><br><span class="line">-1</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>
<h2 id="코드"><a href="#코드" class="headerlink" title="[코드]"></a>[코드]</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        stack();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stack</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        <span class="keyword">int</span> n = parseInt(in.readLine());</span><br><span class="line">        String stack[] = <span class="keyword">new</span> String[n];</span><br><span class="line">        <span class="keyword">int</span> size = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            String input = in.readLine();</span><br><span class="line">            <span class="keyword">if</span> (input.contains(<span class="string">"push"</span>)) &#123;</span><br><span class="line">                stack[++size] = input.split(<span class="string">" "</span>)[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"pop"</span>)) &#123;</span><br><span class="line">                out.write(size == -<span class="number">1</span> ? size + <span class="string">"\n"</span> : stack[size--] + <span class="string">"\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"size"</span>)) &#123;</span><br><span class="line">                out.write((size + <span class="number">1</span>) + <span class="string">"\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"empty"</span>)) &#123;</span><br><span class="line">                out.write((size == -<span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>) + <span class="string">"\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"top"</span>)) &#123;</span><br><span class="line">                out.write((size == -<span class="number">1</span> ? size : stack[size]) + <span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>문제 사이트</strong> : <a href="https://www.acmicpc.net/problem/10828" target="_blank" rel="noopener">https://www.acmicpc.net/problem/10828</a></p>
]]></content>
      <categories>
        <category>Computer</category>
        <category>CodingTest</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>coding-test</tag>
        <tag>stack</tag>
        <tag>코딩테스트</tag>
        <tag>스택</tag>
      </tags>
  </entry>
  <entry>
    <title>1. 알고리즘 개요(Algorithm Overview)</title>
    <url>/2020/03/17/1-algorithm-overview/</url>
    <content><![CDATA[<h1 id="알고리즘-Algorithm"><a href="#알고리즘-Algorithm" class="headerlink" title="알고리즘(Algorithm)"></a>알고리즘(Algorithm)</h1><p>알고리즘은 수학, 컴퓨터과학, 언어학 또는 관련분야에서 <strong>어떠한 문제를 해결하기 위해 정해진 일련의 절차나 방법을 공식화한 형태로 표현한 것</strong>을 말한다.</p>
<ul>
<li>계산 또는 작업을 처리하기 위한 순서</li>
<li>요리의 레시피(요리의 재료를 이용하여 레시피 대로 요리한 다음 요리를 완성)</li>
<li>특정문제를 컴퓨터로 해결하기 위한 순서</li>
<li>어떤 문제를 해결하는 방법을 모두 알고리즘이라 한다.</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">입력</td>
<td>0개 이상의 입력이 존재햐아한다</td>
</tr>
<tr>
<td style="text-align:center">출력</td>
<td>1개 이상의 출력이 존재해야한다</td>
</tr>
<tr>
<td style="text-align:center">명백성</td>
<td>각 명령어의 의미는 모호하지 않고 명확해야한다</td>
</tr>
<tr>
<td style="text-align:center">유한성</td>
<td>한정된 수의 단계 후에는 반드시 종료되어야한다</td>
</tr>
<tr>
<td style="text-align:center">유효성</td>
<td>각 명령어들은 실행 가능한 연산이어야 한다</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p><strong>코딩 테스트나 인터뷰에서 알고리즘을 보는 이유는 문제를 모델링하고 해결하는 능력을 알아보기 위해서이다.</strong></p>
</blockquote>
<h2 id="알고리즘의-효율성-Efficiency"><a href="#알고리즘의-효율성-Efficiency" class="headerlink" title="알고리즘의 효율성(Efficiency)"></a>알고리즘의 효율성(Efficiency)</h2><p>알고리즘 문제를 해결하는 어떤 코드를 작성했을 때, 이 프로그램의 효율성을 알고싶을 때</p>
<ul>
<li><strong>수행시간</strong></li>
<li>사용한 메모리</li>
<li>코드의 길이</li>
</ul>
<p>중 <strong>수행시간</strong>이 중요하다.</p>
<p>예를들어 어떤 프로그램을 작성했는데, 시간이 10일 걸리면 10일동안 실행해야하고, 메모리가 64GB가 필요할 경우 메모리가 부족하면 램을 구매하면 된다.<br>이런 문제를 해결할 때는 <strong>시간</strong>이 중요.</p>
<h2 id="문제의-크기-Scale-Of-Problem"><a href="#문제의-크기-Scale-Of-Problem" class="headerlink" title="문제의 크기(Scale Of Problem)"></a>문제의 크기(Scale Of Problem)</h2><p>개발중 접하게 되는 문제를 해결하는 과정에는 항상 문제의 크기가 발생한다.</p>
<ol>
<li>‘게임 동시 접속자 수’, ‘쇼핑몰 장바구니 물건의 수’ 등 이런 문제의 크기를 보통 <strong>N</strong>이라 하고, <strong>N</strong>에 따라 걸리는 시간이 다르다.</li>
<li>웹 사이트를 만드는 경우 100명이 동시에 접속하는 것과 10만명이 동시에 접속하는 사이트를 만드는 방법은 큰차이가 있으며 접속자가 많을 경우 사이트를 만드는 방법은 더 어렵다. 이럴 때도 문제의 크기에 따라 최적은 방법을 선택해야한다.</li>
</ol>
<blockquote>
<p><strong>문제를 해결할 때는 문제의 크기를 먼저 보고 방법을 생각해야 한다.</strong></p>
</blockquote>
<h2 id="알고리즘의-복잡도-분석-Complexity-Analysis"><a href="#알고리즘의-복잡도-분석-Complexity-Analysis" class="headerlink" title="알고리즘의 복잡도 분석(Complexity Analysis)"></a>알고리즘의 복잡도 분석(Complexity Analysis)</h2><p>알고리즘 복잡도 분석은 직접 구현하지 않고 모든 입력을 고려하는 방법으로 하드웨어나 소프트웨어어 환경과 관계없이 알고리즘의 수행시간 및 효율성을 평가할 수 있다. </p>
<ul>
<li>알고리즘이 수행하는 연산의 횟수를 측정</li>
<li>연산의 횟수는 N함수로 표현된다.</li>
</ul>
<p>알고리즘의 분석 방법에는 기억 공간을 분석하는 <strong>공간 복잡도(Space Complexity)</strong>와 실행 시간을 분석하는 <strong>시간복잡도(Time Complexity)</strong>가 있다.</p>
<h3 id="공간복잡도-Space-Complexity"><a href="#공간복잡도-Space-Complexity" class="headerlink" title="공간복잡도(Space Complexity)"></a>공간복잡도(Space Complexity)</h3><p>알고리즘의 메모리 사용량에 대한 분석결과로 대략적으로 얼마나 공간을 사용할지 예상할 수 있다.</p>
<h3 id="시간복잡도-Time-Complexity"><a href="#시간복잡도-Time-Complexity" class="headerlink" title="시간복잡도(Time Complexity)"></a>시간복잡도(Time Complexity)</h3><p>알고리즘의 수행시간 분석결과로 시간 복잡도를 이용하면 작성한 코드의 수행 시간이 얼마나 걸릴지 예상할 수 있다.</p>
<p>시간복잡도에서 불필요한 정보를 제거하여 알고리즘 분석을 쉽게할 목적으로 빅-오 표기법(Big-O Notation)을 이용하여 복잡도를 표시한다.</p>
<p><strong>빅오 표기법의 수학적 정의</strong></p>
<blockquote>
<p> 두 개의 함수 $f(n)$ 과 $g(n)$이 주어졌을 때 모든 $n \geqq n_0$ 에 대하여 $|f(n) \leqq c|g(n)|$을 만족하는 2개의 상수 $c$와 $n_0$가 존재하면 $f(n) = O(g(n))$이다 </p>
</blockquote>
<p>즉 입력크기 N에 대하여 얼마나 시간이 걸릴지 나타내고, 최악의 경우 시간이 얼마나 걸리지 알 수 있다.</p>
<p>빅오 표기법은 연산의 횟수가 다항식으로 표현되었을 경우 다항식의 최고차 항만을 남기고 다른 항들과 상수항을 버리는 것이다. 궁극적으로 최고차 항의 계수도 버리고 단지 최고차 항의 차수만을 사용한다.</p>
<ol>
<li>상수는 버린다. <ul>
<li>$O(3N^2) = O(N^2)$</li>
<li>$O({1 \over 2} N^2) = O(N^2)$</li>
<li>$O(5) = O(1)$</li>
</ul>
</li>
<li>두 개 이상 항이 있을 때 최고차의 항의 차수만 사용한다.<ul>
<li>$O(N^2 + N) = O(N^2)$</li>
<li>$O(N^2 + N\log N) = O(N^2)$</li>
</ul>
</li>
<li>두 가지 항이 있는데 다른 변수가 있으면 둔다<ul>
<li>$O(N^2 + M)$</li>
</ul>
</li>
</ol>
<p><strong>대표적인 시간복잡도</strong></p>
<ul>
<li>$O(1)$ : 상수</li>
<li>$O(\log N)$ : 로그</li>
<li>$O(N)$ : 선형</li>
<li>$O(N\log N)$ : 선형로그</li>
<li>$O(N^2)$ : 2차</li>
<li>$O(N^3)$ :3차</li>
<li>$O(2^N)$ : 지수</li>
<li>$O(N!)$ : 팩토리얼</li>
</ul>
<p><strong>실행시간 </strong></p>
<p>$O(1) &lt; O(\log N) &lt; O(N) &lt; O(N\log N) &lt; O(N^2) &lt; O(N^3) &lt; O(2^N) &lt; O(N!)$</p>
<p>Ex1) 1부터 N까지의 합</p>
<ul>
<li>i 는 1부터 N번을 수행하므로 시간복잡도 : $O(N)$</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line">for (int i &#x3D; 1; i&lt;&#x3D;N; i++) &#123;</span><br><span class="line">    sum+&#x3D; i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ex2) 1부터 N까지의 합</p>
<ul>
<li>N번을 2번 수행하므로 시간복잡도 : $O(N^2)$</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line">for (int i &#x3D; 1; i&lt;&#x3D;N; i++) &#123;</span><br><span class="line">    for (int j &#x3D; 1; j&lt;&#x3D;N; j++) &#123;</span><br><span class="line">       sum+&#x3D; j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ex3) 1부터 N까지의 합을 계산</p>
<ul>
<li><p>1번의 연산만 수행하므로 시간복잡도 : $O(1)$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line">sum &#x3D; N * (N + 1) &#x2F; 2;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><strong>참조</strong></p>
<ul>
<li>code.Plus : <a href="https://code.plus/course/41" target="_blank" rel="noopener">https://code.plus/course/41</a></li>
<li>C언어로 쉽게 풀어쓴 자료구조</li>
<li>위키피디아 : <a href="https://ko.wikipedia.org/wiki/알고리즘" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/알고리즘</a></li>
</ul>
]]></content>
      <categories>
        <category>Computer</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>big-O</tag>
        <tag>빅오</tag>
        <tag>시간복잡도</tag>
        <tag>time complexity</tag>
      </tags>
  </entry>
</search>
